{"id":"d208e8610946c03ff455f7940fe2c8f4","_format":"hh-sol-build-info-1","solcVersion":"0.8.19","solcLongVersion":"0.8.19+commit.7dd6d404","input":{"language":"Solidity","sources":{"@account-abstraction/contracts/callback/TokenCallbackHandler.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable no-empty-blocks */\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\n\n/**\n * Token callback handler.\n *   Handles supported tokens' callbacks, allowing account receiving these tokens.\n */\ncontract TokenCallbackHandler is IERC777Recipient, IERC721Receiver, IERC1155Receiver {\n    function tokensReceived(\n        address,\n        address,\n        address,\n        uint256,\n        bytes calldata,\n        bytes calldata\n    ) external pure override {\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return IERC1155Receiver.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return IERC1155Receiver.onERC1155BatchReceived.selector;\n    }\n\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\n        return\n            interfaceId == type(IERC721Receiver).interfaceId ||\n            interfaceId == type(IERC1155Receiver).interfaceId ||\n            interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@account-abstraction/contracts/core/BaseAccount.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable avoid-low-level-calls */\n/* solhint-disable no-empty-blocks */\n\nimport \"../interfaces/IAccount.sol\";\nimport \"../interfaces/IEntryPoint.sol\";\nimport \"./Helpers.sol\";\n\n/**\n * Basic account implementation.\n * this contract provides the basic logic for implementing the IAccount interface  - validateUserOp\n * specific account implementation should inherit it and provide the account-specific logic\n */\nabstract contract BaseAccount is IAccount {\n    using UserOperationLib for UserOperation;\n\n    //return value in case of signature failure, with no time-range.\n    // equivalent to _packValidationData(true,0,0);\n    uint256 constant internal SIG_VALIDATION_FAILED = 1;\n\n    /**\n     * Return the account nonce.\n     * This method returns the next sequential nonce.\n     * For a nonce of a specific key, use `entrypoint.getNonce(account, key)`\n     */\n    function getNonce() public view virtual returns (uint256) {\n        return entryPoint().getNonce(address(this), 0);\n    }\n\n    /**\n     * return the entryPoint used by this account.\n     * subclass should return the current entryPoint used by this account.\n     */\n    function entryPoint() public view virtual returns (IEntryPoint);\n\n    /**\n     * Validate user's signature and nonce.\n     * subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\n     */\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\n    external override virtual returns (uint256 validationData) {\n        _requireFromEntryPoint();\n        validationData = _validateSignature(userOp, userOpHash);\n        _validateNonce(userOp.nonce);\n        _payPrefund(missingAccountFunds);\n    }\n\n    /**\n     * ensure the request comes from the known entrypoint.\n     */\n    function _requireFromEntryPoint() internal virtual view {\n        require(msg.sender == address(entryPoint()), \"account: not from EntryPoint\");\n    }\n\n    /**\n     * validate the signature is valid for this message.\n     * @param userOp validate the userOp.signature field\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\n     *          (also hashes the entrypoint and chain id)\n     * @return validationData signature and time-range of this operation\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\n     *         otherwise, an address of an \"authorizer\" contract.\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\n     *      <6-byte> validAfter - first timestamp this operation is valid\n     *      If the account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\n     */\n    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash)\n    internal virtual returns (uint256 validationData);\n\n    /**\n     * Validate the nonce of the UserOperation.\n     * This method may validate the nonce requirement of this account.\n     * e.g.\n     * To limit the nonce to use sequenced UserOps only (no \"out of order\" UserOps):\n     *      `require(nonce < type(uint64).max)`\n     * For a hypothetical account that *requires* the nonce to be out-of-order:\n     *      `require(nonce & type(uint64).max == 0)`\n     *\n     * The actual nonce uniqueness is managed by the EntryPoint, and thus no other\n     * action is needed by the account itself.\n     *\n     * @param nonce to validate\n     *\n     * solhint-disable-next-line no-empty-blocks\n     */\n    function _validateNonce(uint256 nonce) internal view virtual {\n    }\n\n    /**\n     * sends to the entrypoint (msg.sender) the missing funds for this transaction.\n     * subclass MAY override this method for better funds management\n     * (e.g. send to the entryPoint more than the minimum required, so that in future transactions\n     * it will not be required to send again)\n     * @param missingAccountFunds the minimum value this method should send the entrypoint.\n     *  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\n     */\n    function _payPrefund(uint256 missingAccountFunds) internal virtual {\n        if (missingAccountFunds != 0) {\n            (bool success,) = payable(msg.sender).call{value : missingAccountFunds, gas : type(uint256).max}(\"\");\n            (success);\n            //ignore failure (its EntryPoint's job to verify, not account.)\n        }\n    }\n}\n"},"@account-abstraction/contracts/core/Helpers.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable no-inline-assembly */\n\n/**\n * returned data from validateUserOp.\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\n * @param aggregator - address(0) - the account validated the signature by itself.\n *              address(1) - the account failed to validate the signature.\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\n * @param validAfter - this UserOp is valid only after this timestamp.\n * @param validaUntil - this UserOp is valid only up to this timestamp.\n */\n    struct ValidationData {\n        address aggregator;\n        uint48 validAfter;\n        uint48 validUntil;\n    }\n\n//extract sigFailed, validAfter, validUntil.\n// also convert zero validUntil to type(uint48).max\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\n        address aggregator = address(uint160(validationData));\n        uint48 validUntil = uint48(validationData >> 160);\n        if (validUntil == 0) {\n            validUntil = type(uint48).max;\n        }\n        uint48 validAfter = uint48(validationData >> (48 + 160));\n        return ValidationData(aggregator, validAfter, validUntil);\n    }\n\n// intersect account and paymaster ranges.\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\n        address aggregator = accountValidationData.aggregator;\n        if (aggregator == address(0)) {\n            aggregator = pmValidationData.aggregator;\n        }\n        uint48 validAfter = accountValidationData.validAfter;\n        uint48 validUntil = accountValidationData.validUntil;\n        uint48 pmValidAfter = pmValidationData.validAfter;\n        uint48 pmValidUntil = pmValidationData.validUntil;\n\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\n        return ValidationData(aggregator, validAfter, validUntil);\n    }\n\n/**\n * helper to pack the return value for validateUserOp\n * @param data - the ValidationData to pack\n */\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\n    }\n\n/**\n * helper to pack the return value for validateUserOp, when not using an aggregator\n * @param sigFailed - true for signature failure, false for success\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\n * @param validAfter first timestamp this UserOperation is valid\n */\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\n    }\n\n/**\n * keccak function over calldata.\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\n */\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\n        assembly {\n            let mem := mload(0x40)\n            let len := data.length\n            calldatacopy(mem, data.offset, len)\n            ret := keccak256(mem, len)\n        }\n    }\n\n"},"@account-abstraction/contracts/interfaces/IAccount.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\nimport \"./UserOperation.sol\";\n\ninterface IAccount {\n\n    /**\n     * Validate user's signature and nonce\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\n     * This allows making a \"simulation call\" without a valid signature\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\n     *\n     * @dev Must validate caller is the entryPoint.\n     *      Must validate the signature and nonce\n     * @param userOp the operation that is about to be executed.\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\n     *      The excess is left as a deposit in the entrypoint, for future calls.\n     *      can be withdrawn anytime using \"entryPoint.withdrawTo()\"\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\n     *         otherwise, an address of an \"authorizer\" contract.\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\n     *      <6-byte> validAfter - first timestamp this operation is valid\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\n     */\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\n    external returns (uint256 validationData);\n}\n"},"@account-abstraction/contracts/interfaces/IAggregator.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\nimport \"./UserOperation.sol\";\n\n/**\n * Aggregated Signatures validator.\n */\ninterface IAggregator {\n\n    /**\n     * validate aggregated signature.\n     * revert if the aggregated signature does not match the given list of operations.\n     */\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\n\n    /**\n     * validate signature of a single userOp\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\n     * @param userOp the userOperation received from the user.\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\n     *    (usually empty, unless account and aggregator support some kind of \"multisig\"\n     */\n    function validateUserOpSignature(UserOperation calldata userOp)\n    external view returns (bytes memory sigForUserOp);\n\n    /**\n     * aggregate multiple signatures into a single value.\n     * This method is called off-chain to calculate the signature to pass with handleOps()\n     * bundler MAY use optimized custom code perform this aggregation\n     * @param userOps array of UserOperations to collect the signatures from.\n     * @return aggregatedSignature the aggregated signature\n     */\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\n}\n"},"@account-abstraction/contracts/interfaces/IEntryPoint.sol":{"content":"/**\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\n ** Only one instance required on each chain.\n **/\n// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable avoid-low-level-calls */\n/* solhint-disable no-inline-assembly */\n/* solhint-disable reason-string */\n\nimport \"./UserOperation.sol\";\nimport \"./IStakeManager.sol\";\nimport \"./IAggregator.sol\";\nimport \"./INonceManager.sol\";\n\ninterface IEntryPoint is IStakeManager, INonceManager {\n\n    /***\n     * An event emitted after each successful request\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\n     * @param sender - the account that generates this request.\n     * @param paymaster - if non-null, the paymaster that pays for this request.\n     * @param nonce - the nonce value from the request.\n     * @param success - true if the sender transaction succeeded, false if reverted.\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\n     */\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\n\n    /**\n     * account \"sender\" was deployed.\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\n     * @param sender the account that is deployed\n     * @param factory the factory used to deploy this account (in the initCode)\n     * @param paymaster the paymaster used by this UserOp\n     */\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\n\n    /**\n     * An event emitted if the UserOperation \"callData\" reverted with non-zero length\n     * @param userOpHash the request unique identifier.\n     * @param sender the sender of this request\n     * @param nonce the nonce used in the request\n     * @param revertReason - the return bytes from the (reverted) call to \"callData\".\n     */\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\n\n    /**\n     * an event emitted by handleOps(), before starting the execution loop.\n     * any event emitted before this event, is part of the validation.\n     */\n    event BeforeExecution();\n\n    /**\n     * signature aggregator used by the following UserOperationEvents within this bundle.\n     */\n    event SignatureAggregatorChanged(address indexed aggregator);\n\n    /**\n     * a custom revert error of handleOps, to identify the offending op.\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\n     *  @param reason - revert reason\n     *      The string starts with a unique code \"AAmn\", where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,\n     *      so a failure can be attributed to the correct entity.\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\n     */\n    error FailedOp(uint256 opIndex, string reason);\n\n    /**\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\n     */\n    error SignatureValidationFailed(address aggregator);\n\n    /**\n     * Successful result from simulateValidation.\n     * @param returnInfo gas and time-range returned values\n     * @param senderInfo stake information about the sender\n     * @param factoryInfo stake information about the factory (if any)\n     * @param paymasterInfo stake information about the paymaster (if any)\n     */\n    error ValidationResult(ReturnInfo returnInfo,\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\n\n    /**\n     * Successful result from simulateValidation, if the account returns a signature aggregator\n     * @param returnInfo gas and time-range returned values\n     * @param senderInfo stake information about the sender\n     * @param factoryInfo stake information about the factory (if any)\n     * @param paymasterInfo stake information about the paymaster (if any)\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\n     */\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\n        AggregatorStakeInfo aggregatorInfo);\n\n    /**\n     * return value of getSenderAddress\n     */\n    error SenderAddressResult(address sender);\n\n    /**\n     * return value of simulateHandleOp\n     */\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint48 validAfter, uint48 validUntil, bool targetSuccess, bytes targetResult);\n\n    //UserOps handled, per aggregator\n    struct UserOpsPerAggregator {\n        UserOperation[] userOps;\n\n        // aggregator address\n        IAggregator aggregator;\n        // aggregated signature\n        bytes signature;\n    }\n\n    /**\n     * Execute a batch of UserOperation.\n     * no signature aggregator is used.\n     * if any account requires an aggregator (that is, it returned an aggregator when\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\n     * @param ops the operations to execute\n     * @param beneficiary the address to receive the fees\n     */\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\n\n    /**\n     * Execute a batch of UserOperation with Aggregators\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\n     * @param beneficiary the address to receive the fees\n     */\n    function handleAggregatedOps(\n        UserOpsPerAggregator[] calldata opsPerAggregator,\n        address payable beneficiary\n    ) external;\n\n    /**\n     * generate a request Id - unique identifier for this request.\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\n     */\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\n\n    /**\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\n     * @param userOp the user operation to validate.\n     */\n    function simulateValidation(UserOperation calldata userOp) external;\n\n    /**\n     * gas and return values during simulation\n     * @param preOpGas the gas used for validation (including preValidationGas)\n     * @param prefund the required prefund for this operation\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\n     */\n    struct ReturnInfo {\n        uint256 preOpGas;\n        uint256 prefund;\n        bool sigFailed;\n        uint48 validAfter;\n        uint48 validUntil;\n        bytes paymasterContext;\n    }\n\n    /**\n     * returned aggregated signature info.\n     * the aggregator returned by the account, and its current stake.\n     */\n    struct AggregatorStakeInfo {\n        address aggregator;\n        StakeInfo stakeInfo;\n    }\n\n    /**\n     * Get counterfactual sender address.\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\n     * this method always revert, and returns the address in SenderAddressResult error\n     * @param initCode the constructor code to be passed into the UserOperation.\n     */\n    function getSenderAddress(bytes memory initCode) external;\n\n\n    /**\n     * simulate full execution of a UserOperation (including both validation and target execution)\n     * this method will always revert with \"ExecutionResult\".\n     * it performs full validation of the UserOperation, but ignores signature error.\n     * an optional target address is called after the userop succeeds, and its value is returned\n     * (before the entire call is reverted)\n     * Note that in order to collect the the success/failure of the target call, it must be executed\n     * with trace enabled to track the emitted events.\n     * @param op the UserOperation to simulate\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\n     *        are set to the return from that call.\n     * @param targetCallData callData to pass to target address\n     */\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\n}\n\n"},"@account-abstraction/contracts/interfaces/INonceManager.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\ninterface INonceManager {\n\n    /**\n     * Return the next nonce for this sender.\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\n     * But UserOp with different keys can come with arbitrary order.\n     *\n     * @param sender the account address\n     * @param key the high 192 bit of the nonce\n     * @return nonce a full nonce to pass for next UserOp with this sender.\n     */\n    function getNonce(address sender, uint192 key)\n    external view returns (uint256 nonce);\n\n    /**\n     * Manually increment the nonce of the sender.\n     * This method is exposed just for completeness..\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\n     * as the EntryPoint will update the nonce regardless.\n     * Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future\n     * UserOperations will not pay extra for the first transaction with a given key.\n     */\n    function incrementNonce(uint192 key) external;\n}\n"},"@account-abstraction/contracts/interfaces/IStakeManager.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.12;\n\n/**\n * manage deposits and stakes.\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\n * stake is value locked for at least \"unstakeDelay\" by the staked entity.\n */\ninterface IStakeManager {\n\n    event Deposited(\n        address indexed account,\n        uint256 totalDeposit\n    );\n\n    event Withdrawn(\n        address indexed account,\n        address withdrawAddress,\n        uint256 amount\n    );\n\n    /// Emitted when stake or unstake delay are modified\n    event StakeLocked(\n        address indexed account,\n        uint256 totalStaked,\n        uint256 unstakeDelaySec\n    );\n\n    /// Emitted once a stake is scheduled for withdrawal\n    event StakeUnlocked(\n        address indexed account,\n        uint256 withdrawTime\n    );\n\n    event StakeWithdrawn(\n        address indexed account,\n        address withdrawAddress,\n        uint256 amount\n    );\n\n    /**\n     * @param deposit the entity's deposit\n     * @param staked true if this entity is staked.\n     * @param stake actual amount of ether staked for this entity.\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\n     *    and the rest fit into a 2nd cell.\n     *    112 bit allows for 10^15 eth\n     *    48 bit for full timestamp\n     *    32 bit allows 150 years for unstake delay\n     */\n    struct DepositInfo {\n        uint112 deposit;\n        bool staked;\n        uint112 stake;\n        uint32 unstakeDelaySec;\n        uint48 withdrawTime;\n    }\n\n    //API struct used by getStakeInfo and simulateValidation\n    struct StakeInfo {\n        uint256 stake;\n        uint256 unstakeDelaySec;\n    }\n\n    /// @return info - full deposit information of given account\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\n\n    /// @return the deposit (for gas payment) of the account\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * add to the deposit of the given account\n     */\n    function depositTo(address account) external payable;\n\n    /**\n     * add to the account's stake - amount and delay\n     * any pending unstake is first cancelled.\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\n     */\n    function addStake(uint32 _unstakeDelaySec) external payable;\n\n    /**\n     * attempt to unlock the stake.\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\n     */\n    function unlockStake() external;\n\n    /**\n     * withdraw from the (unlocked) stake.\n     * must first call unlockStake and wait for the unstakeDelay to pass\n     * @param withdrawAddress the address to send withdrawn value.\n     */\n    function withdrawStake(address payable withdrawAddress) external;\n\n    /**\n     * withdraw from the deposit.\n     * @param withdrawAddress the address to send withdrawn value.\n     * @param withdrawAmount the amount to withdraw.\n     */\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\n}\n"},"@account-abstraction/contracts/interfaces/UserOperation.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable no-inline-assembly */\n\nimport {calldataKeccak} from \"../core/Helpers.sol\";\n\n/**\n * User Operation struct\n * @param sender the sender account of this request.\n     * @param nonce unique value the sender uses to verify it is not a replay.\n     * @param initCode if set, the account contract will be created by this constructor/\n     * @param callData the method call to execute on this account.\n     * @param callGasLimit the gas limit passed to the callData method call.\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\n     */\n    struct UserOperation {\n\n        address sender;\n        uint256 nonce;\n        bytes initCode;\n        bytes callData;\n        uint256 callGasLimit;\n        uint256 verificationGasLimit;\n        uint256 preVerificationGas;\n        uint256 maxFeePerGas;\n        uint256 maxPriorityFeePerGas;\n        bytes paymasterAndData;\n        bytes signature;\n    }\n\n/**\n * Utility functions helpful when working with UserOperation structs.\n */\nlibrary UserOperationLib {\n\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\n        address data;\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\n        assembly {data := calldataload(userOp)}\n        return address(uint160(data));\n    }\n\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\n    // pay above what he signed for.\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\n    unchecked {\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\n        if (maxFeePerGas == maxPriorityFeePerGas) {\n            //legacy mode (for networks that don't support basefee opcode)\n            return maxFeePerGas;\n        }\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\n    }\n    }\n\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\n        address sender = getSender(userOp);\n        uint256 nonce = userOp.nonce;\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\n        uint256 callGasLimit = userOp.callGasLimit;\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\n        uint256 preVerificationGas = userOp.preVerificationGas;\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\n\n        return abi.encode(\n            sender, nonce,\n            hashInitCode, hashCallData,\n            callGasLimit, verificationGasLimit, preVerificationGas,\n            maxFeePerGas, maxPriorityFeePerGas,\n            hashPaymasterAndData\n        );\n    }\n\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\n        return keccak256(pack(userOp));\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n"},"@openzeppelin/contracts/proxy/beacon/IBeacon.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"node_modules/@openzeppelin/contracts/proxy/utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"},"@openzeppelin/contracts/proxy/Proxy.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"},"@openzeppelin/contracts/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"},"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n}\n"},"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\n *\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\n * contract implement this interface (contract holders can be their own\n * implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Recipient {\n    /**\n     * @dev Called by an {IERC777} token contract whenever tokens are being\n     * moved or created into a registered account (`to`). The type of operation\n     * is conveyed by `from` being the zero address or not.\n     *\n     * This call occurs _after_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"},"@openzeppelin/contracts/utils/Create2.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(\n        uint256 amount,\n        bytes32 salt,\n        bytes memory bytecode\n    ) internal returns (address) {\n        address addr;\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n        return addr;\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(\n        bytes32 salt,\n        bytes32 bytecodeHash,\n        address deployer\n    ) internal pure returns (address) {\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\n        return address(uint160(uint256(_data)));\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return recover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return recover(hash, r, vs);\n        } else {\n            revert(\"ECDSA: invalid signature length\");\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n            \"ECDSA: invalid signature 's' value\"\n        );\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"},"contracts/Wallet.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@account-abstraction/contracts/core/BaseAccount.sol\";\nimport \"@account-abstraction/contracts/core/Helpers.sol\";\nimport \"@account-abstraction/contracts/callback/TokenCallbackHandler.sol\";\n\ncontract Wallet is\n    BaseAccount,\n    TokenCallbackHandler,\n    Initializable,\n    UUPSUpgradeable\n{\n    using ECDSA for bytes32;\n\n    address public immutable walletFactory;\n    IEntryPoint private immutable _entryPoint;\n    address[] public owners;\n\n    event WalletInitialized(IEntryPoint indexed entryPoint, address[] owners);\n\n    modifier _requireFromEntryPointOrFactory() {\n        require(\n            msg.sender == address(_entryPoint) || msg.sender == walletFactory,\n            \"only entry point or wallet factory can call\"\n        );\n        _;\n    }\n\n    constructor(IEntryPoint anEntryPoint, address ourWalletFactory) {\n        _entryPoint = anEntryPoint;\n        walletFactory = ourWalletFactory;\n    }\n\n    function initialize(address[] memory initialOwners) public initializer {\n        _initialize(initialOwners);\n    }\n\n    function execute(\n        address dest,\n        uint256 value,\n        bytes calldata func\n    ) external _requireFromEntryPointOrFactory {\n        _call(dest, value, func);\n    }\n\n    function executeBatch(\n        address[] calldata dests,\n        uint256[] calldata values,\n        bytes[] calldata funcs\n    ) external _requireFromEntryPointOrFactory {\n        require(dests.length == funcs.length, \"wrong array lengths\");\n        require(values.length == funcs.length, \"wrong values lengths\");\n        for (uint256 i = 0; i < dests.length; i++) {\n            _call(dests[i], values[i], funcs[i]);\n        }\n    }\n\n    function _validateSignature(\n        UserOperation calldata userOp,\n        bytes32 userOpHash\n    ) internal view override returns (uint256) {\n        bytes32 hash = userOpHash.toEthSignedMessageHash();\n        bytes[] memory signatures = abi.decode(userOp.signature, (bytes[]));\n\n        for (uint256 i = 0; i < owners.length; i++) {\n            if (owners[i] != hash.recover(signatures[i])) {\n                return SIG_VALIDATION_FAILED;\n            }\n        }\n        return 0;\n    }\n\n    function _initialize(address[] memory initialOwners) internal {\n        require(initialOwners.length > 0, \"no owners\");\n        owners = initialOwners;\n        emit WalletInitialized(_entryPoint, initialOwners);\n    }\n\n    function _call(address target, uint256 value, bytes memory data) internal {\n        (bool success, bytes memory result) = target.call{value: value}(data);\n        if (!success) {\n            assembly {\n                revert(add(result, 32), mload(result))\n            }\n        }\n    }\n\n    function encodeSignatures(\n        bytes[] memory signatures\n    ) public pure returns (bytes memory) {\n        return abi.encode(signatures);\n    }\n\n    function entryPoint() public view override returns (IEntryPoint) {\n        return _entryPoint;\n    }\n\n    function getDeposit() public view returns (uint256) {\n        return entryPoint().balanceOf(address(this));\n    }\n\n    function addDeposit() public payable {\n        entryPoint().depositTo{value: msg.value}(address(this));\n    }\n\n    function _authorizeUpgrade(\n        address\n    ) internal view override _requireFromEntryPointOrFactory {}\n\n    receive() external payable {}\n}"},"contracts/WalletFactory.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\nimport {IEntryPoint} from \"@account-abstraction/contracts/interfaces/IEntryPoint.sol\";\nimport {Wallet} from \"./Wallet.sol\";\nimport {Create2} from \"@openzeppelin/contracts/utils/Create2.sol\";\nimport {ERC1967Proxy} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\n\ncontract WalletFactory {\n    Wallet public immutable walletImplementation;\n\n    constructor(IEntryPoint entryPoint) {\n        walletImplementation = new Wallet(entryPoint, address(this));\n    }\n\n    function createAccount(\n        address[] memory owners,\n        uint256 salt\n    ) external returns (Wallet) {\n        address addr = getAddress(owners, salt);\n        uint256 codeSize = addr.code.length;\n        if (codeSize > 0) {\n            return Wallet(payable(addr));\n        }\n\n        bytes memory walletInit = abi.encodeCall(Wallet.initialize, owners);\n        ERC1967Proxy proxy = new ERC1967Proxy{salt: bytes32(salt)}(\n            address(walletImplementation),\n            walletInit\n        );\n\n        return Wallet(payable(address(proxy)));\n    }\n\n    function getAddress(\n        address[] memory owners,\n        uint256 salt\n    ) public view returns (address) {\n        bytes memory walletInit = abi.encodeCall(Wallet.initialize, owners);\n        bytes memory proxyConstructor = abi.encode(\n            address(walletImplementation),\n            walletInit\n        );\n        bytes memory bytecode = abi.encodePacked(\n            type(ERC1967Proxy).creationCode,\n            proxyConstructor\n        );\n\n        bytes32 bytecodeHash = keccak256(bytecode);\n\n        return Create2.computeAddress(bytes32(salt), bytecodeHash);\n    }\n}"},"node_modules/@openzeppelin/contracts/proxy/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":1000000},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@account-abstraction/contracts/callback/TokenCallbackHandler.sol":{"ast":{"absolutePath":"@account-abstraction/contracts/callback/TokenCallbackHandler.sol","exportedSymbols":{"IERC1155Receiver":[1682],"IERC165":[2086],"IERC721Receiver":[1700],"IERC777Recipient":[1720],"TokenCallbackHandler":[123]},"id":124,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:0"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":124,"sourceUnit":2087,"src":"101:65:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol","file":"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":124,"sourceUnit":1721,"src":"167:67:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","id":4,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":124,"sourceUnit":1701,"src":"235:66:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol","file":"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":124,"sourceUnit":1683,"src":"302:68:0","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":7,"name":"IERC777Recipient","nameLocations":["523:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":1720,"src":"523:16:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"523:16:0"},{"baseName":{"id":9,"name":"IERC721Receiver","nameLocations":["541:15:0"],"nodeType":"IdentifierPath","referencedDeclaration":1700,"src":"541:15:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"541:15:0"},{"baseName":{"id":11,"name":"IERC1155Receiver","nameLocations":["558:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":1682,"src":"558:16:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"558:16:0"}],"canonicalName":"TokenCallbackHandler","contractDependencies":[],"contractKind":"contract","documentation":{"id":6,"nodeType":"StructuredDocumentation","src":"372:117:0","text":" Token callback handler.\n   Handles supported tokens' callbacks, allowing account receiving these tokens."},"fullyImplemented":true,"id":123,"linearizedBaseContracts":[123,1682,2086,1700,1720],"name":"TokenCallbackHandler","nameLocation":"499:20:0","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[1719],"body":{"id":28,"nodeType":"Block","src":"750:7:0","statements":[]},"functionSelector":"0023de29","id":29,"implemented":true,"kind":"function","modifiers":[],"name":"tokensReceived","nameLocation":"590:14:0","nodeType":"FunctionDefinition","overrides":{"id":26,"nodeType":"OverrideSpecifier","overrides":[],"src":"741:8:0"},"parameters":{"id":25,"nodeType":"ParameterList","parameters":[{"constant":false,"id":14,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":29,"src":"614:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"614:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":16,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":29,"src":"631:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"631:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":18,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":29,"src":"648:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":17,"name":"address","nodeType":"ElementaryTypeName","src":"648:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":20,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":29,"src":"665:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19,"name":"uint256","nodeType":"ElementaryTypeName","src":"665:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":22,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":29,"src":"682:14:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":21,"name":"bytes","nodeType":"ElementaryTypeName","src":"682:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":24,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":29,"src":"706:14:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":23,"name":"bytes","nodeType":"ElementaryTypeName","src":"706:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"604:122:0"},"returnParameters":{"id":27,"nodeType":"ParameterList","parameters":[],"src":"750:0:0"},"scope":123,"src":"581:176:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[1699],"body":{"id":47,"nodeType":"Block","src":"910:65:0","statements":[{"expression":{"expression":{"expression":{"id":43,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"927:15:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1700_$","typeString":"type(contract IERC721Receiver)"}},"id":44,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"943:16:0","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1699,"src":"927:32:0","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":45,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"960:8:0","memberName":"selector","nodeType":"MemberAccess","src":"927:41:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":42,"id":46,"nodeType":"Return","src":"920:48:0"}]},"functionSelector":"150b7a02","id":48,"implemented":true,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"772:16:0","nodeType":"FunctionDefinition","overrides":{"id":39,"nodeType":"OverrideSpecifier","overrides":[],"src":"884:8:0"},"parameters":{"id":38,"nodeType":"ParameterList","parameters":[{"constant":false,"id":31,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":48,"src":"798:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":30,"name":"address","nodeType":"ElementaryTypeName","src":"798:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":33,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":48,"src":"815:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":32,"name":"address","nodeType":"ElementaryTypeName","src":"815:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":35,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":48,"src":"832:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":34,"name":"uint256","nodeType":"ElementaryTypeName","src":"832:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":37,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":48,"src":"849:14:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":36,"name":"bytes","nodeType":"ElementaryTypeName","src":"849:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"788:81:0"},"returnParameters":{"id":42,"nodeType":"ParameterList","parameters":[{"constant":false,"id":41,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":48,"src":"902:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":40,"name":"bytes4","nodeType":"ElementaryTypeName","src":"902:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"901:8:0"},"scope":123,"src":"763:212:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[1663],"body":{"id":68,"nodeType":"Block","src":"1146:67:0","statements":[{"expression":{"expression":{"expression":{"id":64,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"1163:16:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$1682_$","typeString":"type(contract IERC1155Receiver)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1180:17:0","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":1663,"src":"1163:34:0","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC1155Receiver.onERC1155Received(address,address,uint256,uint256,bytes calldata) returns (bytes4)"}},"id":66,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1198:8:0","memberName":"selector","nodeType":"MemberAccess","src":"1163:43:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":63,"id":67,"nodeType":"Return","src":"1156:50:0"}]},"functionSelector":"f23a6e61","id":69,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"990:17:0","nodeType":"FunctionDefinition","overrides":{"id":60,"nodeType":"OverrideSpecifier","overrides":[],"src":"1120:8:0"},"parameters":{"id":59,"nodeType":"ParameterList","parameters":[{"constant":false,"id":50,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":69,"src":"1017:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49,"name":"address","nodeType":"ElementaryTypeName","src":"1017:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":52,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":69,"src":"1034:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51,"name":"address","nodeType":"ElementaryTypeName","src":"1034:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":54,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":69,"src":"1051:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":53,"name":"uint256","nodeType":"ElementaryTypeName","src":"1051:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":56,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":69,"src":"1068:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":55,"name":"uint256","nodeType":"ElementaryTypeName","src":"1068:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":58,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":69,"src":"1085:14:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":57,"name":"bytes","nodeType":"ElementaryTypeName","src":"1085:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1007:98:0"},"returnParameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":69,"src":"1138:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":61,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1138:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1137:8:0"},"scope":123,"src":"981:232:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[1681],"body":{"id":91,"nodeType":"Block","src":"1411:72:0","statements":[{"expression":{"expression":{"expression":{"id":87,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"1428:16:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$1682_$","typeString":"type(contract IERC1155Receiver)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1445:22:0","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":1681,"src":"1428:39:0","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC1155Receiver.onERC1155BatchReceived(address,address,uint256[] calldata,uint256[] calldata,bytes calldata) returns (bytes4)"}},"id":89,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1468:8:0","memberName":"selector","nodeType":"MemberAccess","src":"1428:48:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":86,"id":90,"nodeType":"Return","src":"1421:55:0"}]},"functionSelector":"bc197c81","id":92,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"1228:22:0","nodeType":"FunctionDefinition","overrides":{"id":83,"nodeType":"OverrideSpecifier","overrides":[],"src":"1385:8:0"},"parameters":{"id":82,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":92,"src":"1260:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"1260:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":73,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":92,"src":"1277:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":72,"name":"address","nodeType":"ElementaryTypeName","src":"1277:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":76,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":92,"src":"1294:18:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":74,"name":"uint256","nodeType":"ElementaryTypeName","src":"1294:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":75,"nodeType":"ArrayTypeName","src":"1294:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":79,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":92,"src":"1322:18:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":77,"name":"uint256","nodeType":"ElementaryTypeName","src":"1322:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":78,"nodeType":"ArrayTypeName","src":"1322:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":81,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":92,"src":"1350:14:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":80,"name":"bytes","nodeType":"ElementaryTypeName","src":"1350:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1250:120:0"},"returnParameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":92,"src":"1403:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":84,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1403:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1402:8:0"},"scope":123,"src":"1219:264:0","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[2085],"body":{"id":121,"nodeType":"Block","src":"1582:205:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":100,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"1611:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":102,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"1631:15:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1700_$","typeString":"type(contract IERC721Receiver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1700_$","typeString":"type(contract IERC721Receiver)"}],"id":101,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1626:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1626:21:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Receiver_$1700","typeString":"type(contract IERC721Receiver)"}},"id":104,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1648:11:0","memberName":"interfaceId","nodeType":"MemberAccess","src":"1626:33:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1611:48:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":106,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"1675:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":108,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"1695:16:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$1682_$","typeString":"type(contract IERC1155Receiver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$1682_$","typeString":"type(contract IERC1155Receiver)"}],"id":107,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1690:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1690:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155Receiver_$1682","typeString":"type(contract IERC1155Receiver)"}},"id":110,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1713:11:0","memberName":"interfaceId","nodeType":"MemberAccess","src":"1690:34:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1675:49:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1611:113:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":113,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"1740:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":115,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"1760:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$2086_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$2086_$","typeString":"type(contract IERC165)"}],"id":114,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1755:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1755:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$2086","typeString":"type(contract IERC165)"}},"id":117,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1769:11:0","memberName":"interfaceId","nodeType":"MemberAccess","src":"1755:25:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1740:40:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1611:169:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":99,"id":120,"nodeType":"Return","src":"1592:188:0"}]},"functionSelector":"01ffc9a7","id":122,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1498:17:0","nodeType":"FunctionDefinition","overrides":{"id":96,"nodeType":"OverrideSpecifier","overrides":[],"src":"1558:8:0"},"parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"interfaceId","nameLocation":"1523:11:0","nodeType":"VariableDeclaration","scope":122,"src":"1516:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":93,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1516:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1515:20:0"},"returnParameters":{"id":99,"nodeType":"ParameterList","parameters":[{"constant":false,"id":98,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":122,"src":"1576:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":97,"name":"bool","nodeType":"ElementaryTypeName","src":"1576:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1575:6:0"},"scope":123,"src":"1489:298:0","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":124,"src":"490:1299:0","usedErrors":[]}],"src":"36:1754:0"},"id":0},"@account-abstraction/contracts/core/BaseAccount.sol":{"ast":{"absolutePath":"@account-abstraction/contracts/core/BaseAccount.sol","exportedSymbols":{"BaseAccount":[265],"IAccount":[520],"IAggregator":[554],"IEntryPoint":[758],"INonceManager":[777],"IStakeManager":[882],"UserOperation":[909],"UserOperationLib":[1079],"ValidationData":[274],"_intersectTimeRange":[418],"_packValidationData":[455,493],"_parseValidationData":[333],"calldataKeccak":[503]},"id":266,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":125,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:1"},{"absolutePath":"@account-abstraction/contracts/interfaces/IAccount.sol","file":"../interfaces/IAccount.sol","id":126,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":266,"sourceUnit":521,"src":"145:36:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@account-abstraction/contracts/interfaces/IEntryPoint.sol","file":"../interfaces/IEntryPoint.sol","id":127,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":266,"sourceUnit":759,"src":"182:39:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@account-abstraction/contracts/core/Helpers.sol","file":"./Helpers.sol","id":128,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":266,"sourceUnit":504,"src":"222:23:1","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":130,"name":"IAccount","nameLocations":["513:8:1"],"nodeType":"IdentifierPath","referencedDeclaration":520,"src":"513:8:1"},"id":131,"nodeType":"InheritanceSpecifier","src":"513:8:1"}],"canonicalName":"BaseAccount","contractDependencies":[],"contractKind":"contract","documentation":{"id":129,"nodeType":"StructuredDocumentation","src":"247:232:1","text":" Basic account implementation.\n this contract provides the basic logic for implementing the IAccount interface  - validateUserOp\n specific account implementation should inherit it and provide the account-specific logic"},"fullyImplemented":false,"id":265,"linearizedBaseContracts":[265,520],"name":"BaseAccount","nameLocation":"498:11:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":135,"libraryName":{"id":132,"name":"UserOperationLib","nameLocations":["534:16:1"],"nodeType":"IdentifierPath","referencedDeclaration":1079,"src":"534:16:1"},"nodeType":"UsingForDirective","src":"528:41:1","typeName":{"id":134,"nodeType":"UserDefinedTypeName","pathNode":{"id":133,"name":"UserOperation","nameLocations":["555:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"555:13:1"},"referencedDeclaration":909,"src":"555:13:1","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_storage_ptr","typeString":"struct UserOperation"}}},{"constant":true,"id":138,"mutability":"constant","name":"SIG_VALIDATION_FAILED","nameLocation":"722:21:1","nodeType":"VariableDeclaration","scope":265,"src":"696:51:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":136,"name":"uint256","nodeType":"ElementaryTypeName","src":"696:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"746:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"internal"},{"body":{"id":154,"nodeType":"Block","src":"993:63:1","statements":[{"expression":{"arguments":[{"arguments":[{"id":149,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1040:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_BaseAccount_$265","typeString":"contract BaseAccount"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BaseAccount_$265","typeString":"contract BaseAccount"}],"id":148,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1032:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":147,"name":"address","nodeType":"ElementaryTypeName","src":"1032:7:1","typeDescriptions":{}}},"id":150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1032:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1047:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":144,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"1010:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_IEntryPoint_$758_$","typeString":"function () view returns (contract IEntryPoint)"}},"id":145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1010:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"}},"id":146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1023:8:1","memberName":"getNonce","nodeType":"MemberAccess","referencedDeclaration":770,"src":"1010:21:1","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_uint192_$returns$_t_uint256_$","typeString":"function (address,uint192) view external returns (uint256)"}},"id":152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1010:39:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":143,"id":153,"nodeType":"Return","src":"1003:46:1"}]},"documentation":{"id":139,"nodeType":"StructuredDocumentation","src":"754:176:1","text":" Return the account nonce.\n This method returns the next sequential nonce.\n For a nonce of a specific key, use `entrypoint.getNonce(account, key)`"},"functionSelector":"d087d288","id":155,"implemented":true,"kind":"function","modifiers":[],"name":"getNonce","nameLocation":"944:8:1","nodeType":"FunctionDefinition","parameters":{"id":140,"nodeType":"ParameterList","parameters":[],"src":"952:2:1"},"returnParameters":{"id":143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":142,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":155,"src":"984:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":141,"name":"uint256","nodeType":"ElementaryTypeName","src":"984:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"983:9:1"},"scope":265,"src":"935:121:1","stateMutability":"view","virtual":true,"visibility":"public"},{"documentation":{"id":156,"nodeType":"StructuredDocumentation","src":"1062:137:1","text":" return the entryPoint used by this account.\n subclass should return the current entryPoint used by this account."},"functionSelector":"b0d691fe","id":162,"implemented":false,"kind":"function","modifiers":[],"name":"entryPoint","nameLocation":"1213:10:1","nodeType":"FunctionDefinition","parameters":{"id":157,"nodeType":"ParameterList","parameters":[],"src":"1223:2:1"},"returnParameters":{"id":161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":160,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":162,"src":"1255:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"},"typeName":{"id":159,"nodeType":"UserDefinedTypeName","pathNode":{"id":158,"name":"IEntryPoint","nameLocations":["1255:11:1"],"nodeType":"IdentifierPath","referencedDeclaration":758,"src":"1255:11:1"},"referencedDeclaration":758,"src":"1255:11:1","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"}},"visibility":"internal"}],"src":"1254:13:1"},"scope":265,"src":"1204:64:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[519],"body":{"id":195,"nodeType":"Block","src":"1625:186:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":176,"name":"_requireFromEntryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"1635:22:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1635:24:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":178,"nodeType":"ExpressionStatement","src":"1635:24:1"},{"expression":{"id":184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":179,"name":"validationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":174,"src":"1669:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":181,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"1705:6:1","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation calldata"}},{"id":182,"name":"userOpHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":168,"src":"1713:10:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":180,"name":"_validateSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"1686:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_UserOperation_$909_calldata_ptr_$_t_bytes32_$returns$_t_uint256_$","typeString":"function (struct UserOperation calldata,bytes32) returns (uint256)"}},"id":183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1686:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1669:55:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":185,"nodeType":"ExpressionStatement","src":"1669:55:1"},{"expression":{"arguments":[{"expression":{"id":187,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"1749:6:1","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1756:5:1","memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":890,"src":"1749:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":186,"name":"_validateNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"1734:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1734:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":190,"nodeType":"ExpressionStatement","src":"1734:28:1"},{"expression":{"arguments":[{"id":192,"name":"missingAccountFunds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"1784:19:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":191,"name":"_payPrefund","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":264,"src":"1772:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1772:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":194,"nodeType":"ExpressionStatement","src":"1772:32:1"}]},"documentation":{"id":163,"nodeType":"StructuredDocumentation","src":"1274:179:1","text":" Validate user's signature and nonce.\n subclass doesn't need to override this method. Instead, it should override the specific internal validation methods."},"functionSelector":"3a871cdd","id":196,"implemented":true,"kind":"function","modifiers":[],"name":"validateUserOp","nameLocation":"1467:14:1","nodeType":"FunctionDefinition","overrides":{"id":172,"nodeType":"OverrideSpecifier","overrides":[],"src":"1575:8:1"},"parameters":{"id":171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":166,"mutability":"mutable","name":"userOp","nameLocation":"1505:6:1","nodeType":"VariableDeclaration","scope":196,"src":"1482:29:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":165,"nodeType":"UserDefinedTypeName","pathNode":{"id":164,"name":"UserOperation","nameLocations":["1482:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"1482:13:1"},"referencedDeclaration":909,"src":"1482:13:1","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"},{"constant":false,"id":168,"mutability":"mutable","name":"userOpHash","nameLocation":"1521:10:1","nodeType":"VariableDeclaration","scope":196,"src":"1513:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":167,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1513:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":170,"mutability":"mutable","name":"missingAccountFunds","nameLocation":"1541:19:1","nodeType":"VariableDeclaration","scope":196,"src":"1533:27:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":169,"name":"uint256","nodeType":"ElementaryTypeName","src":"1533:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1481:80:1"},"returnParameters":{"id":175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":174,"mutability":"mutable","name":"validationData","nameLocation":"1609:14:1","nodeType":"VariableDeclaration","scope":196,"src":"1601:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":173,"name":"uint256","nodeType":"ElementaryTypeName","src":"1601:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1600:24:1"},"scope":265,"src":"1458:353:1","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":212,"nodeType":"Block","src":"1948:93:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":201,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1966:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1970:6:1","memberName":"sender","nodeType":"MemberAccess","src":"1966:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":205,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"1988:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_IEntryPoint_$758_$","typeString":"function () view returns (contract IEntryPoint)"}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1988:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"}],"id":204,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1980:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":203,"name":"address","nodeType":"ElementaryTypeName","src":"1980:7:1","typeDescriptions":{}}},"id":207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1980:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1966:35:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6163636f756e743a206e6f742066726f6d20456e747279506f696e74","id":209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2003:30:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_f684c2c0c9ec797849b62669189fe025e9077c00ba7812987ce38c0071ad7a50","typeString":"literal_string \"account: not from EntryPoint\""},"value":"account: not from EntryPoint"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f684c2c0c9ec797849b62669189fe025e9077c00ba7812987ce38c0071ad7a50","typeString":"literal_string \"account: not from EntryPoint\""}],"id":200,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1958:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1958:76:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":211,"nodeType":"ExpressionStatement","src":"1958:76:1"}]},"documentation":{"id":197,"nodeType":"StructuredDocumentation","src":"1817:70:1","text":" ensure the request comes from the known entrypoint."},"id":213,"implemented":true,"kind":"function","modifiers":[],"name":"_requireFromEntryPoint","nameLocation":"1901:22:1","nodeType":"FunctionDefinition","parameters":{"id":198,"nodeType":"ParameterList","parameters":[],"src":"1923:2:1"},"returnParameters":{"id":199,"nodeType":"ParameterList","parameters":[],"src":"1948:0:1"},"scope":265,"src":"1892:149:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"documentation":{"id":214,"nodeType":"StructuredDocumentation","src":"2047:904:1","text":" validate the signature is valid for this message.\n @param userOp validate the userOp.signature field\n @param userOpHash convenient field: the hash of the request, to check the signature against\n          (also hashes the entrypoint and chain id)\n @return validationData signature and time-range of this operation\n      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\n         otherwise, an address of an \"authorizer\" contract.\n      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\n      <6-byte> validAfter - first timestamp this operation is valid\n      If the account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\n      Note that the validation code cannot use block.timestamp (or block.number) directly."},"id":224,"implemented":false,"kind":"function","modifiers":[],"name":"_validateSignature","nameLocation":"2965:18:1","nodeType":"FunctionDefinition","parameters":{"id":220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":217,"mutability":"mutable","name":"userOp","nameLocation":"3007:6:1","nodeType":"VariableDeclaration","scope":224,"src":"2984:29:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":216,"nodeType":"UserDefinedTypeName","pathNode":{"id":215,"name":"UserOperation","nameLocations":["2984:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"2984:13:1"},"referencedDeclaration":909,"src":"2984:13:1","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"},{"constant":false,"id":219,"mutability":"mutable","name":"userOpHash","nameLocation":"3023:10:1","nodeType":"VariableDeclaration","scope":224,"src":"3015:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":218,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3015:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2983:51:1"},"returnParameters":{"id":223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":222,"mutability":"mutable","name":"validationData","nameLocation":"3073:14:1","nodeType":"VariableDeclaration","scope":224,"src":"3065:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":221,"name":"uint256","nodeType":"ElementaryTypeName","src":"3065:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3064:24:1"},"scope":265,"src":"2956:133:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":230,"nodeType":"Block","src":"3801:7:1","statements":[]},"documentation":{"id":225,"nodeType":"StructuredDocumentation","src":"3095:640:1","text":" Validate the nonce of the UserOperation.\n This method may validate the nonce requirement of this account.\n e.g.\n To limit the nonce to use sequenced UserOps only (no \"out of order\" UserOps):\n      `require(nonce < type(uint64).max)`\n For a hypothetical account that *requires* the nonce to be out-of-order:\n      `require(nonce & type(uint64).max == 0)`\n The actual nonce uniqueness is managed by the EntryPoint, and thus no other\n action is needed by the account itself.\n @param nonce to validate\n solhint-disable-next-line no-empty-blocks"},"id":231,"implemented":true,"kind":"function","modifiers":[],"name":"_validateNonce","nameLocation":"3749:14:1","nodeType":"FunctionDefinition","parameters":{"id":228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":227,"mutability":"mutable","name":"nonce","nameLocation":"3772:5:1","nodeType":"VariableDeclaration","scope":231,"src":"3764:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":226,"name":"uint256","nodeType":"ElementaryTypeName","src":"3764:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3763:15:1"},"returnParameters":{"id":229,"nodeType":"ParameterList","parameters":[],"src":"3801:0:1"},"scope":265,"src":"3740:68:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":263,"nodeType":"Block","src":"4383:270:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":237,"name":"missingAccountFunds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":234,"src":"4397:19:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4420:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4397:24:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":262,"nodeType":"IfStatement","src":"4393:254:1","trueBody":{"id":261,"nodeType":"Block","src":"4423:224:1","statements":[{"assignments":[241,null],"declarations":[{"constant":false,"id":241,"mutability":"mutable","name":"success","nameLocation":"4443:7:1","nodeType":"VariableDeclaration","scope":261,"src":"4438:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":240,"name":"bool","nodeType":"ElementaryTypeName","src":"4438:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":257,"initialValue":{"arguments":[{"hexValue":"","id":255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4534:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[{"expression":{"id":244,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4463:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4467:6:1","memberName":"sender","nodeType":"MemberAccess","src":"4463:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":243,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4455:8:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":242,"name":"address","nodeType":"ElementaryTypeName","src":"4455:8:1","stateMutability":"payable","typeDescriptions":{}}},"id":246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4455:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4475:4:1","memberName":"call","nodeType":"MemberAccess","src":"4455:24:1","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value","gas"],"nodeType":"FunctionCallOptions","options":[{"id":248,"name":"missingAccountFunds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":234,"src":"4488:19:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"arguments":[{"id":251,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4520:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":250,"name":"uint256","nodeType":"ElementaryTypeName","src":"4520:7:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":249,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4515:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4515:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":253,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4529:3:1","memberName":"max","nodeType":"MemberAccess","src":"4515:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"4455:78:1","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$gasvalue","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4455:82:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4437:100:1"},{"expression":{"components":[{"id":258,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"4552:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":259,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4551:9:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":260,"nodeType":"ExpressionStatement","src":"4551:9:1"}]}}]},"documentation":{"id":232,"nodeType":"StructuredDocumentation","src":"3814:497:1","text":" sends to the entrypoint (msg.sender) the missing funds for this transaction.\n subclass MAY override this method for better funds management\n (e.g. send to the entryPoint more than the minimum required, so that in future transactions\n it will not be required to send again)\n @param missingAccountFunds the minimum value this method should send the entrypoint.\n  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster."},"id":264,"implemented":true,"kind":"function","modifiers":[],"name":"_payPrefund","nameLocation":"4325:11:1","nodeType":"FunctionDefinition","parameters":{"id":235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":234,"mutability":"mutable","name":"missingAccountFunds","nameLocation":"4345:19:1","nodeType":"VariableDeclaration","scope":264,"src":"4337:27:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":233,"name":"uint256","nodeType":"ElementaryTypeName","src":"4337:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4336:29:1"},"returnParameters":{"id":236,"nodeType":"ParameterList","parameters":[],"src":"4383:0:1"},"scope":265,"src":"4316:337:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":266,"src":"480:4175:1","usedErrors":[]}],"src":"36:4620:1"},"id":1},"@account-abstraction/contracts/core/Helpers.sol":{"ast":{"absolutePath":"@account-abstraction/contracts/core/Helpers.sol","exportedSymbols":{"ValidationData":[274],"_intersectTimeRange":[418],"_packValidationData":[455,493],"_parseValidationData":[333],"calldataKeccak":[503]},"id":504,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":267,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:2"},{"canonicalName":"ValidationData","id":274,"members":[{"constant":false,"id":269,"mutability":"mutable","name":"aggregator","nameLocation":"730:10:2","nodeType":"VariableDeclaration","scope":274,"src":"722:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":268,"name":"address","nodeType":"ElementaryTypeName","src":"722:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":271,"mutability":"mutable","name":"validAfter","nameLocation":"757:10:2","nodeType":"VariableDeclaration","scope":274,"src":"750:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":270,"name":"uint48","nodeType":"ElementaryTypeName","src":"750:6:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":273,"mutability":"mutable","name":"validUntil","nameLocation":"784:10:2","nodeType":"VariableDeclaration","scope":274,"src":"777:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":272,"name":"uint48","nodeType":"ElementaryTypeName","src":"777:6:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"name":"ValidationData","nameLocation":"697:14:2","nodeType":"StructDefinition","scope":504,"src":"690:111:2","visibility":"public"},{"body":{"id":332,"nodeType":"Block","src":"997:346:2","statements":[{"assignments":[283],"declarations":[{"constant":false,"id":283,"mutability":"mutable","name":"aggregator","nameLocation":"1015:10:2","nodeType":"VariableDeclaration","scope":332,"src":"1007:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":282,"name":"address","nodeType":"ElementaryTypeName","src":"1007:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":291,"initialValue":{"arguments":[{"arguments":[{"id":288,"name":"validationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"1044:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":287,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1036:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":286,"name":"uint160","nodeType":"ElementaryTypeName","src":"1036:7:2","typeDescriptions":{}}},"id":289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1036:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":285,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1028:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":284,"name":"address","nodeType":"ElementaryTypeName","src":"1028:7:2","typeDescriptions":{}}},"id":290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1028:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1007:53:2"},{"assignments":[293],"declarations":[{"constant":false,"id":293,"mutability":"mutable","name":"validUntil","nameLocation":"1077:10:2","nodeType":"VariableDeclaration","scope":332,"src":"1070:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":292,"name":"uint48","nodeType":"ElementaryTypeName","src":"1070:6:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":300,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":296,"name":"validationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"1097:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313630","id":297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1115:3:2","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"src":"1097:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":295,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1090:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":294,"name":"uint48","nodeType":"ElementaryTypeName","src":"1090:6:2","typeDescriptions":{}}},"id":299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1090:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"1070:49:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":301,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"1133:10:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1147:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1133:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":313,"nodeType":"IfStatement","src":"1129:75:2","trueBody":{"id":312,"nodeType":"Block","src":"1150:54:2","statements":[{"expression":{"id":310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":304,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"1164:10:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":307,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1182:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":306,"name":"uint48","nodeType":"ElementaryTypeName","src":"1182:6:2","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"}],"id":305,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1177:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1177:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint48","typeString":"type(uint48)"}},"id":309,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1190:3:2","memberName":"max","nodeType":"MemberAccess","src":"1177:16:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"1164:29:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"id":311,"nodeType":"ExpressionStatement","src":"1164:29:2"}]}},{"assignments":[315],"declarations":[{"constant":false,"id":315,"mutability":"mutable","name":"validAfter","nameLocation":"1220:10:2","nodeType":"VariableDeclaration","scope":332,"src":"1213:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":314,"name":"uint48","nodeType":"ElementaryTypeName","src":"1213:6:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":325,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":318,"name":"validationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"1240:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"id":321,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3438","id":319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1259:2:2","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"313630","id":320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1264:3:2","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"src":"1259:8:2","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}}],"id":322,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1258:10:2","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}},"src":"1240:28:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":317,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1233:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":316,"name":"uint48","nodeType":"ElementaryTypeName","src":"1233:6:2","typeDescriptions":{}}},"id":324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1233:36:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"1213:56:2"},{"expression":{"arguments":[{"id":327,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"1301:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":328,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"1313:10:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":329,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"1325:10:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":326,"name":"ValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":274,"src":"1286:14:2","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ValidationData_$274_storage_ptr_$","typeString":"type(struct ValidationData storage pointer)"}},"id":330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1286:50:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$274_memory_ptr","typeString":"struct ValidationData memory"}},"functionReturnParameters":281,"id":331,"nodeType":"Return","src":"1279:57:2"}]},"id":333,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"_parseValidationData","nameLocation":"913:20:2","nodeType":"FunctionDefinition","parameters":{"id":277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":276,"mutability":"mutable","name":"validationData","nameLocation":"939:14:2","nodeType":"VariableDeclaration","scope":333,"src":"934:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":275,"name":"uint","nodeType":"ElementaryTypeName","src":"934:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"933:21:2"},"returnParameters":{"id":281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":280,"mutability":"mutable","name":"data","nameLocation":"991:4:2","nodeType":"VariableDeclaration","scope":333,"src":"969:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$274_memory_ptr","typeString":"struct ValidationData"},"typeName":{"id":279,"nodeType":"UserDefinedTypeName","pathNode":{"id":278,"name":"ValidationData","nameLocations":["969:14:2"],"nodeType":"IdentifierPath","referencedDeclaration":274,"src":"969:14:2"},"referencedDeclaration":274,"src":"969:14:2","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$274_storage_ptr","typeString":"struct ValidationData"}},"visibility":"internal"}],"src":"968:28:2"},"scope":504,"src":"904:439:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":417,"nodeType":"Block","src":"1515:804:2","statements":[{"assignments":[345],"declarations":[{"constant":false,"id":345,"mutability":"mutable","name":"accountValidationData","nameLocation":"1547:21:2","nodeType":"VariableDeclaration","scope":417,"src":"1525:43:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$274_memory_ptr","typeString":"struct ValidationData"},"typeName":{"id":344,"nodeType":"UserDefinedTypeName","pathNode":{"id":343,"name":"ValidationData","nameLocations":["1525:14:2"],"nodeType":"IdentifierPath","referencedDeclaration":274,"src":"1525:14:2"},"referencedDeclaration":274,"src":"1525:14:2","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$274_storage_ptr","typeString":"struct ValidationData"}},"visibility":"internal"}],"id":349,"initialValue":{"arguments":[{"id":347,"name":"validationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"1592:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":346,"name":"_parseValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"1571:20:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_ValidationData_$274_memory_ptr_$","typeString":"function (uint256) pure returns (struct ValidationData memory)"}},"id":348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1571:36:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$274_memory_ptr","typeString":"struct ValidationData memory"}},"nodeType":"VariableDeclarationStatement","src":"1525:82:2"},{"assignments":[352],"declarations":[{"constant":false,"id":352,"mutability":"mutable","name":"pmValidationData","nameLocation":"1639:16:2","nodeType":"VariableDeclaration","scope":417,"src":"1617:38:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$274_memory_ptr","typeString":"struct ValidationData"},"typeName":{"id":351,"nodeType":"UserDefinedTypeName","pathNode":{"id":350,"name":"ValidationData","nameLocations":["1617:14:2"],"nodeType":"IdentifierPath","referencedDeclaration":274,"src":"1617:14:2"},"referencedDeclaration":274,"src":"1617:14:2","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$274_storage_ptr","typeString":"struct ValidationData"}},"visibility":"internal"}],"id":356,"initialValue":{"arguments":[{"id":354,"name":"paymasterValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":337,"src":"1679:23:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":353,"name":"_parseValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"1658:20:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_ValidationData_$274_memory_ptr_$","typeString":"function (uint256) pure returns (struct ValidationData memory)"}},"id":355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1658:45:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$274_memory_ptr","typeString":"struct ValidationData memory"}},"nodeType":"VariableDeclarationStatement","src":"1617:86:2"},{"assignments":[358],"declarations":[{"constant":false,"id":358,"mutability":"mutable","name":"aggregator","nameLocation":"1721:10:2","nodeType":"VariableDeclaration","scope":417,"src":"1713:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":357,"name":"address","nodeType":"ElementaryTypeName","src":"1713:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":361,"initialValue":{"expression":{"id":359,"name":"accountValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"1734:21:2","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$274_memory_ptr","typeString":"struct ValidationData memory"}},"id":360,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1756:10:2","memberName":"aggregator","nodeType":"MemberAccess","referencedDeclaration":269,"src":"1734:32:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1713:53:2"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":362,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":358,"src":"1780:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1802:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":364,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1794:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":363,"name":"address","nodeType":"ElementaryTypeName","src":"1794:7:2","typeDescriptions":{}}},"id":366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1794:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1780:24:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":374,"nodeType":"IfStatement","src":"1776:95:2","trueBody":{"id":373,"nodeType":"Block","src":"1806:65:2","statements":[{"expression":{"id":371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":368,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":358,"src":"1820:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":369,"name":"pmValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"1833:16:2","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$274_memory_ptr","typeString":"struct ValidationData memory"}},"id":370,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1850:10:2","memberName":"aggregator","nodeType":"MemberAccess","referencedDeclaration":269,"src":"1833:27:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1820:40:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":372,"nodeType":"ExpressionStatement","src":"1820:40:2"}]}},{"assignments":[376],"declarations":[{"constant":false,"id":376,"mutability":"mutable","name":"validAfter","nameLocation":"1887:10:2","nodeType":"VariableDeclaration","scope":417,"src":"1880:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":375,"name":"uint48","nodeType":"ElementaryTypeName","src":"1880:6:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":379,"initialValue":{"expression":{"id":377,"name":"accountValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"1900:21:2","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$274_memory_ptr","typeString":"struct ValidationData memory"}},"id":378,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1922:10:2","memberName":"validAfter","nodeType":"MemberAccess","referencedDeclaration":271,"src":"1900:32:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"1880:52:2"},{"assignments":[381],"declarations":[{"constant":false,"id":381,"mutability":"mutable","name":"validUntil","nameLocation":"1949:10:2","nodeType":"VariableDeclaration","scope":417,"src":"1942:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":380,"name":"uint48","nodeType":"ElementaryTypeName","src":"1942:6:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":384,"initialValue":{"expression":{"id":382,"name":"accountValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"1962:21:2","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$274_memory_ptr","typeString":"struct ValidationData memory"}},"id":383,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1984:10:2","memberName":"validUntil","nodeType":"MemberAccess","referencedDeclaration":273,"src":"1962:32:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"1942:52:2"},{"assignments":[386],"declarations":[{"constant":false,"id":386,"mutability":"mutable","name":"pmValidAfter","nameLocation":"2011:12:2","nodeType":"VariableDeclaration","scope":417,"src":"2004:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":385,"name":"uint48","nodeType":"ElementaryTypeName","src":"2004:6:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":389,"initialValue":{"expression":{"id":387,"name":"pmValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"2026:16:2","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$274_memory_ptr","typeString":"struct ValidationData memory"}},"id":388,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2043:10:2","memberName":"validAfter","nodeType":"MemberAccess","referencedDeclaration":271,"src":"2026:27:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"2004:49:2"},{"assignments":[391],"declarations":[{"constant":false,"id":391,"mutability":"mutable","name":"pmValidUntil","nameLocation":"2070:12:2","nodeType":"VariableDeclaration","scope":417,"src":"2063:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":390,"name":"uint48","nodeType":"ElementaryTypeName","src":"2063:6:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":394,"initialValue":{"expression":{"id":392,"name":"pmValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"2085:16:2","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$274_memory_ptr","typeString":"struct ValidationData memory"}},"id":393,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2102:10:2","memberName":"validUntil","nodeType":"MemberAccess","referencedDeclaration":273,"src":"2085:27:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"2063:49:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":395,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":376,"src":"2127:10:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":396,"name":"pmValidAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"2140:12:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"2127:25:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":402,"nodeType":"IfStatement","src":"2123:56:2","trueBody":{"expression":{"id":400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":398,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":376,"src":"2154:10:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":399,"name":"pmValidAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"2167:12:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"2154:25:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"id":401,"nodeType":"ExpressionStatement","src":"2154:25:2"}},{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":403,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"2193:10:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":404,"name":"pmValidUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":391,"src":"2206:12:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"2193:25:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":410,"nodeType":"IfStatement","src":"2189:56:2","trueBody":{"expression":{"id":408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":406,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"2220:10:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":407,"name":"pmValidUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":391,"src":"2233:12:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"2220:25:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"id":409,"nodeType":"ExpressionStatement","src":"2220:25:2"}},{"expression":{"arguments":[{"id":412,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":358,"src":"2277:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":413,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":376,"src":"2289:10:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":414,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"2301:10:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":411,"name":"ValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":274,"src":"2262:14:2","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ValidationData_$274_storage_ptr_$","typeString":"type(struct ValidationData storage pointer)"}},"id":415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2262:50:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$274_memory_ptr","typeString":"struct ValidationData memory"}},"functionReturnParameters":342,"id":416,"nodeType":"Return","src":"2255:57:2"}]},"id":418,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"_intersectTimeRange","nameLocation":"1401:19:2","nodeType":"FunctionDefinition","parameters":{"id":338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":335,"mutability":"mutable","name":"validationData","nameLocation":"1429:14:2","nodeType":"VariableDeclaration","scope":418,"src":"1421:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":334,"name":"uint256","nodeType":"ElementaryTypeName","src":"1421:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":337,"mutability":"mutable","name":"paymasterValidationData","nameLocation":"1453:23:2","nodeType":"VariableDeclaration","scope":418,"src":"1445:31:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":336,"name":"uint256","nodeType":"ElementaryTypeName","src":"1445:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1420:57:2"},"returnParameters":{"id":342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":341,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":418,"src":"1492:21:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$274_memory_ptr","typeString":"struct ValidationData"},"typeName":{"id":340,"nodeType":"UserDefinedTypeName","pathNode":{"id":339,"name":"ValidationData","nameLocations":["1492:14:2"],"nodeType":"IdentifierPath","referencedDeclaration":274,"src":"1492:14:2"},"referencedDeclaration":274,"src":"1492:14:2","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$274_storage_ptr","typeString":"struct ValidationData"}},"visibility":"internal"}],"src":"1491:23:2"},"scope":504,"src":"1392:927:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":454,"nodeType":"Block","src":"2511:127:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":429,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":422,"src":"2536:4:2","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$274_memory_ptr","typeString":"struct ValidationData memory"}},"id":430,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2541:10:2","memberName":"aggregator","nodeType":"MemberAccess","referencedDeclaration":269,"src":"2536:15:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":428,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2528:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":427,"name":"uint160","nodeType":"ElementaryTypeName","src":"2528:7:2","typeDescriptions":{}}},"id":431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2528:24:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":434,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":422,"src":"2564:4:2","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$274_memory_ptr","typeString":"struct ValidationData memory"}},"id":435,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2569:10:2","memberName":"validUntil","nodeType":"MemberAccess","referencedDeclaration":273,"src":"2564:15:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":433,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2556:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":432,"name":"uint256","nodeType":"ElementaryTypeName","src":"2556:7:2","typeDescriptions":{}}},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2556:24:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313630","id":437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2584:3:2","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"src":"2556:31:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":439,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2555:33:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2528:60:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":443,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":422,"src":"2600:4:2","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$274_memory_ptr","typeString":"struct ValidationData memory"}},"id":444,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2605:10:2","memberName":"validAfter","nodeType":"MemberAccess","referencedDeclaration":271,"src":"2600:15:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":442,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2592:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":441,"name":"uint256","nodeType":"ElementaryTypeName","src":"2592:7:2","typeDescriptions":{}}},"id":445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2592:24:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"id":448,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"313630","id":446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2621:3:2","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3438","id":447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2627:2:2","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"src":"2621:8:2","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}}],"id":449,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2620:10:2","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}},"src":"2592:38:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":451,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2591:40:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2528:103:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":426,"id":453,"nodeType":"Return","src":"2521:110:2"}]},"documentation":{"id":419,"nodeType":"StructuredDocumentation","src":"2321:105:2","text":" helper to pack the return value for validateUserOp\n @param data - the ValidationData to pack"},"id":455,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"_packValidationData","nameLocation":"2440:19:2","nodeType":"FunctionDefinition","parameters":{"id":423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":422,"mutability":"mutable","name":"data","nameLocation":"2482:4:2","nodeType":"VariableDeclaration","scope":455,"src":"2460:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$274_memory_ptr","typeString":"struct ValidationData"},"typeName":{"id":421,"nodeType":"UserDefinedTypeName","pathNode":{"id":420,"name":"ValidationData","nameLocations":["2460:14:2"],"nodeType":"IdentifierPath","referencedDeclaration":274,"src":"2460:14:2"},"referencedDeclaration":274,"src":"2460:14:2","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$274_storage_ptr","typeString":"struct ValidationData"}},"visibility":"internal"}],"src":"2459:28:2"},"returnParameters":{"id":426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":425,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":455,"src":"2502:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":424,"name":"uint256","nodeType":"ElementaryTypeName","src":"2502:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2501:9:2"},"scope":504,"src":"2431:207:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":492,"nodeType":"Block","src":"3062:112:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"condition":{"id":467,"name":"sigFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"3080:9:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3096:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3080:17:2","trueExpression":{"hexValue":"31","id":468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3092:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":471,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3079:19:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":474,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":460,"src":"3110:10:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":473,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3102:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":472,"name":"uint256","nodeType":"ElementaryTypeName","src":"3102:7:2","typeDescriptions":{}}},"id":475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3102:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313630","id":476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3125:3:2","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"src":"3102:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":478,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3101:28:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3079:50:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":482,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"3141:10:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":481,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3133:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":480,"name":"uint256","nodeType":"ElementaryTypeName","src":"3133:7:2","typeDescriptions":{}}},"id":483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3133:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"id":486,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"313630","id":484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3157:3:2","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3438","id":485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3163:2:2","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"src":"3157:8:2","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}}],"id":487,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3156:10:2","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}},"src":"3133:33:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":489,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3132:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3079:88:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":466,"id":491,"nodeType":"Return","src":"3072:95:2"}]},"documentation":{"id":456,"nodeType":"StructuredDocumentation","src":"2640:311:2","text":" helper to pack the return value for validateUserOp, when not using an aggregator\n @param sigFailed - true for signature failure, false for success\n @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\n @param validAfter first timestamp this UserOperation is valid"},"id":493,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"_packValidationData","nameLocation":"2965:19:2","nodeType":"FunctionDefinition","parameters":{"id":463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":458,"mutability":"mutable","name":"sigFailed","nameLocation":"2990:9:2","nodeType":"VariableDeclaration","scope":493,"src":"2985:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":457,"name":"bool","nodeType":"ElementaryTypeName","src":"2985:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":460,"mutability":"mutable","name":"validUntil","nameLocation":"3008:10:2","nodeType":"VariableDeclaration","scope":493,"src":"3001:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":459,"name":"uint48","nodeType":"ElementaryTypeName","src":"3001:6:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":462,"mutability":"mutable","name":"validAfter","nameLocation":"3027:10:2","nodeType":"VariableDeclaration","scope":493,"src":"3020:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":461,"name":"uint48","nodeType":"ElementaryTypeName","src":"3020:6:2","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"2984:54:2"},"returnParameters":{"id":466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":465,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":493,"src":"3053:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":464,"name":"uint256","nodeType":"ElementaryTypeName","src":"3053:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3052:9:2"},"scope":504,"src":"2956:218:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":502,"nodeType":"Block","src":"3429:193:2","statements":[{"AST":{"nodeType":"YulBlock","src":"3448:168:2","statements":[{"nodeType":"YulVariableDeclaration","src":"3462:22:2","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3479:4:2","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3473:5:2"},"nodeType":"YulFunctionCall","src":"3473:11:2"},"variables":[{"name":"mem","nodeType":"YulTypedName","src":"3466:3:2","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3497:22:2","value":{"name":"data.length","nodeType":"YulIdentifier","src":"3508:11:2"},"variables":[{"name":"len","nodeType":"YulTypedName","src":"3501:3:2","type":""}]},{"expression":{"arguments":[{"name":"mem","nodeType":"YulIdentifier","src":"3545:3:2"},{"name":"data.offset","nodeType":"YulIdentifier","src":"3550:11:2"},{"name":"len","nodeType":"YulIdentifier","src":"3563:3:2"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3532:12:2"},"nodeType":"YulFunctionCall","src":"3532:35:2"},"nodeType":"YulExpressionStatement","src":"3532:35:2"},{"nodeType":"YulAssignment","src":"3580:26:2","value":{"arguments":[{"name":"mem","nodeType":"YulIdentifier","src":"3597:3:2"},{"name":"len","nodeType":"YulIdentifier","src":"3602:3:2"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"3587:9:2"},"nodeType":"YulFunctionCall","src":"3587:19:2"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"3580:3:2"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":496,"isOffset":false,"isSlot":false,"src":"3508:11:2","suffix":"length","valueSize":1},{"declaration":496,"isOffset":true,"isSlot":false,"src":"3550:11:2","suffix":"offset","valueSize":1},{"declaration":499,"isOffset":false,"isSlot":false,"src":"3580:3:2","valueSize":1}],"id":501,"nodeType":"InlineAssembly","src":"3439:177:2"}]},"documentation":{"id":494,"nodeType":"StructuredDocumentation","src":"3176:176:2","text":" keccak function over calldata.\n @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it."},"id":503,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"calldataKeccak","nameLocation":"3366:14:2","nodeType":"FunctionDefinition","parameters":{"id":497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":496,"mutability":"mutable","name":"data","nameLocation":"3396:4:2","nodeType":"VariableDeclaration","scope":503,"src":"3381:19:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":495,"name":"bytes","nodeType":"ElementaryTypeName","src":"3381:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3380:21:2"},"returnParameters":{"id":500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":499,"mutability":"mutable","name":"ret","nameLocation":"3424:3:2","nodeType":"VariableDeclaration","scope":503,"src":"3416:11:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":498,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3416:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3415:13:2"},"scope":504,"src":"3357:265:2","stateMutability":"pure","virtual":false,"visibility":"internal"}],"src":"36:3588:2"},"id":2},"@account-abstraction/contracts/interfaces/IAccount.sol":{"ast":{"absolutePath":"@account-abstraction/contracts/interfaces/IAccount.sol","exportedSymbols":{"IAccount":[520],"UserOperation":[909],"UserOperationLib":[1079],"calldataKeccak":[503]},"id":521,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":505,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:3"},{"absolutePath":"@account-abstraction/contracts/interfaces/UserOperation.sol","file":"./UserOperation.sol","id":506,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":521,"sourceUnit":1080,"src":"62:29:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IAccount","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":520,"linearizedBaseContracts":[520],"name":"IAccount","nameLocation":"103:8:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":507,"nodeType":"StructuredDocumentation","src":"119:1861:3","text":" Validate user's signature and nonce\n the entryPoint will make the call to the recipient only if this validation call returns successfully.\n signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\n This allows making a \"simulation call\" without a valid signature\n Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\n @dev Must validate caller is the entryPoint.\n      Must validate the signature and nonce\n @param userOp the operation that is about to be executed.\n @param userOpHash hash of the user's request data. can be used as the basis for signature.\n @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\n      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\n      The excess is left as a deposit in the entrypoint, for future calls.\n      can be withdrawn anytime using \"entryPoint.withdrawTo()\"\n      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\n @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\n      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\n         otherwise, an address of an \"authorizer\" contract.\n      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\n      <6-byte> validAfter - first timestamp this operation is valid\n      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\n      Note that the validation code cannot use block.timestamp (or block.number) directly."},"functionSelector":"3a871cdd","id":519,"implemented":false,"kind":"function","modifiers":[],"name":"validateUserOp","nameLocation":"1994:14:3","nodeType":"FunctionDefinition","parameters":{"id":515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":510,"mutability":"mutable","name":"userOp","nameLocation":"2032:6:3","nodeType":"VariableDeclaration","scope":519,"src":"2009:29:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":509,"nodeType":"UserDefinedTypeName","pathNode":{"id":508,"name":"UserOperation","nameLocations":["2009:13:3"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"2009:13:3"},"referencedDeclaration":909,"src":"2009:13:3","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"},{"constant":false,"id":512,"mutability":"mutable","name":"userOpHash","nameLocation":"2048:10:3","nodeType":"VariableDeclaration","scope":519,"src":"2040:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":511,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2040:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":514,"mutability":"mutable","name":"missingAccountFunds","nameLocation":"2068:19:3","nodeType":"VariableDeclaration","scope":519,"src":"2060:27:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":513,"name":"uint256","nodeType":"ElementaryTypeName","src":"2060:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2008:80:3"},"returnParameters":{"id":518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":517,"mutability":"mutable","name":"validationData","nameLocation":"2119:14:3","nodeType":"VariableDeclaration","scope":519,"src":"2111:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":516,"name":"uint256","nodeType":"ElementaryTypeName","src":"2111:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2110:24:3"},"scope":520,"src":"1985:150:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":521,"src":"93:2044:3","usedErrors":[]}],"src":"36:2102:3"},"id":3},"@account-abstraction/contracts/interfaces/IAggregator.sol":{"ast":{"absolutePath":"@account-abstraction/contracts/interfaces/IAggregator.sol","exportedSymbols":{"IAggregator":[554],"UserOperation":[909],"UserOperationLib":[1079],"calldataKeccak":[503]},"id":555,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":522,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:4"},{"absolutePath":"@account-abstraction/contracts/interfaces/UserOperation.sol","file":"./UserOperation.sol","id":523,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":555,"sourceUnit":1080,"src":"62:29:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IAggregator","contractDependencies":[],"contractKind":"interface","documentation":{"id":524,"nodeType":"StructuredDocumentation","src":"93:43:4","text":" Aggregated Signatures validator."},"fullyImplemented":false,"id":554,"linearizedBaseContracts":[554],"name":"IAggregator","nameLocation":"147:11:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":525,"nodeType":"StructuredDocumentation","src":"166:136:4","text":" validate aggregated signature.\n revert if the aggregated signature does not match the given list of operations."},"functionSelector":"e3563a4f","id":534,"implemented":false,"kind":"function","modifiers":[],"name":"validateSignatures","nameLocation":"316:18:4","nodeType":"FunctionDefinition","parameters":{"id":532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":529,"mutability":"mutable","name":"userOps","nameLocation":"360:7:4","nodeType":"VariableDeclaration","scope":534,"src":"335:32:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$909_calldata_ptr_$dyn_calldata_ptr","typeString":"struct UserOperation[]"},"typeName":{"baseType":{"id":527,"nodeType":"UserDefinedTypeName","pathNode":{"id":526,"name":"UserOperation","nameLocations":["335:13:4"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"335:13:4"},"referencedDeclaration":909,"src":"335:13:4","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_storage_ptr","typeString":"struct UserOperation"}},"id":528,"nodeType":"ArrayTypeName","src":"335:15:4","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$909_storage_$dyn_storage_ptr","typeString":"struct UserOperation[]"}},"visibility":"internal"},{"constant":false,"id":531,"mutability":"mutable","name":"signature","nameLocation":"384:9:4","nodeType":"VariableDeclaration","scope":534,"src":"369:24:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":530,"name":"bytes","nodeType":"ElementaryTypeName","src":"369:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"334:60:4"},"returnParameters":{"id":533,"nodeType":"ParameterList","parameters":[],"src":"408:0:4"},"scope":554,"src":"307:102:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":535,"nodeType":"StructuredDocumentation","src":"415:576:4","text":" validate signature of a single userOp\n This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\n First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\n @param userOp the userOperation received from the user.\n @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\n    (usually empty, unless account and aggregator support some kind of \"multisig\""},"functionSelector":"64c530cd","id":543,"implemented":false,"kind":"function","modifiers":[],"name":"validateUserOpSignature","nameLocation":"1005:23:4","nodeType":"FunctionDefinition","parameters":{"id":539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":538,"mutability":"mutable","name":"userOp","nameLocation":"1052:6:4","nodeType":"VariableDeclaration","scope":543,"src":"1029:29:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":537,"nodeType":"UserDefinedTypeName","pathNode":{"id":536,"name":"UserOperation","nameLocations":["1029:13:4"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"1029:13:4"},"referencedDeclaration":909,"src":"1029:13:4","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"1028:31:4"},"returnParameters":{"id":542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":541,"mutability":"mutable","name":"sigForUserOp","nameLocation":"1100:12:4","nodeType":"VariableDeclaration","scope":543,"src":"1087:25:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":540,"name":"bytes","nodeType":"ElementaryTypeName","src":"1087:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1086:27:4"},"scope":554,"src":"996:118:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":544,"nodeType":"StructuredDocumentation","src":"1120:368:4","text":" aggregate multiple signatures into a single value.\n This method is called off-chain to calculate the signature to pass with handleOps()\n bundler MAY use optimized custom code perform this aggregation\n @param userOps array of UserOperations to collect the signatures from.\n @return aggregatedSignature the aggregated signature"},"functionSelector":"275e2d79","id":553,"implemented":false,"kind":"function","modifiers":[],"name":"aggregateSignatures","nameLocation":"1502:19:4","nodeType":"FunctionDefinition","parameters":{"id":549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":548,"mutability":"mutable","name":"userOps","nameLocation":"1547:7:4","nodeType":"VariableDeclaration","scope":553,"src":"1522:32:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$909_calldata_ptr_$dyn_calldata_ptr","typeString":"struct UserOperation[]"},"typeName":{"baseType":{"id":546,"nodeType":"UserDefinedTypeName","pathNode":{"id":545,"name":"UserOperation","nameLocations":["1522:13:4"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"1522:13:4"},"referencedDeclaration":909,"src":"1522:13:4","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_storage_ptr","typeString":"struct UserOperation"}},"id":547,"nodeType":"ArrayTypeName","src":"1522:15:4","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$909_storage_$dyn_storage_ptr","typeString":"struct UserOperation[]"}},"visibility":"internal"}],"src":"1521:34:4"},"returnParameters":{"id":552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":551,"mutability":"mutable","name":"aggregatedSignature","nameLocation":"1592:19:4","nodeType":"VariableDeclaration","scope":553,"src":"1579:32:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":550,"name":"bytes","nodeType":"ElementaryTypeName","src":"1579:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1578:34:4"},"scope":554,"src":"1493:120:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":555,"src":"137:1478:4","usedErrors":[]}],"src":"36:1580:4"},"id":4},"@account-abstraction/contracts/interfaces/IEntryPoint.sol":{"ast":{"absolutePath":"@account-abstraction/contracts/interfaces/IEntryPoint.sol","exportedSymbols":{"IAggregator":[554],"IEntryPoint":[758],"INonceManager":[777],"IStakeManager":[882],"UserOperation":[909],"UserOperationLib":[1079],"calldataKeccak":[503]},"id":759,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":556,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"163:24:5"},{"absolutePath":"@account-abstraction/contracts/interfaces/UserOperation.sol","file":"./UserOperation.sol","id":557,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":759,"sourceUnit":1080,"src":"311:29:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@account-abstraction/contracts/interfaces/IStakeManager.sol","file":"./IStakeManager.sol","id":558,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":759,"sourceUnit":883,"src":"341:29:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@account-abstraction/contracts/interfaces/IAggregator.sol","file":"./IAggregator.sol","id":559,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":759,"sourceUnit":555,"src":"371:27:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@account-abstraction/contracts/interfaces/INonceManager.sol","file":"./INonceManager.sol","id":560,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":759,"sourceUnit":778,"src":"399:29:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":561,"name":"IStakeManager","nameLocations":["455:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":882,"src":"455:13:5"},"id":562,"nodeType":"InheritanceSpecifier","src":"455:13:5"},{"baseName":{"id":563,"name":"INonceManager","nameLocations":["470:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":777,"src":"470:13:5"},"id":564,"nodeType":"InheritanceSpecifier","src":"470:13:5"}],"canonicalName":"IEntryPoint","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":758,"linearizedBaseContracts":[758,777,882],"name":"IEntryPoint","nameLocation":"440:11:5","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"49628fd1471006c1482da88028e9ce4dbb080b815c9b0344d39e5a8e6ec1419f","id":580,"name":"UserOperationEvent","nameLocation":"1191:18:5","nodeType":"EventDefinition","parameters":{"id":579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":566,"indexed":true,"mutability":"mutable","name":"userOpHash","nameLocation":"1226:10:5","nodeType":"VariableDeclaration","scope":580,"src":"1210:26:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":565,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1210:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":568,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1254:6:5","nodeType":"VariableDeclaration","scope":580,"src":"1238:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":567,"name":"address","nodeType":"ElementaryTypeName","src":"1238:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":570,"indexed":true,"mutability":"mutable","name":"paymaster","nameLocation":"1278:9:5","nodeType":"VariableDeclaration","scope":580,"src":"1262:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":569,"name":"address","nodeType":"ElementaryTypeName","src":"1262:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":572,"indexed":false,"mutability":"mutable","name":"nonce","nameLocation":"1297:5:5","nodeType":"VariableDeclaration","scope":580,"src":"1289:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":571,"name":"uint256","nodeType":"ElementaryTypeName","src":"1289:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":574,"indexed":false,"mutability":"mutable","name":"success","nameLocation":"1309:7:5","nodeType":"VariableDeclaration","scope":580,"src":"1304:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":573,"name":"bool","nodeType":"ElementaryTypeName","src":"1304:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":576,"indexed":false,"mutability":"mutable","name":"actualGasCost","nameLocation":"1326:13:5","nodeType":"VariableDeclaration","scope":580,"src":"1318:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":575,"name":"uint256","nodeType":"ElementaryTypeName","src":"1318:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":578,"indexed":false,"mutability":"mutable","name":"actualGasUsed","nameLocation":"1349:13:5","nodeType":"VariableDeclaration","scope":580,"src":"1341:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":577,"name":"uint256","nodeType":"ElementaryTypeName","src":"1341:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1209:154:5"},"src":"1185:179:5"},{"anonymous":false,"documentation":{"id":581,"nodeType":"StructuredDocumentation","src":"1370:333:5","text":" account \"sender\" was deployed.\n @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\n @param sender the account that is deployed\n @param factory the factory used to deploy this account (in the initCode)\n @param paymaster the paymaster used by this UserOp"},"eventSelector":"d51a9c61267aa6196961883ecf5ff2da6619c37dac0fa92122513fb32c032d2d","id":591,"name":"AccountDeployed","nameLocation":"1714:15:5","nodeType":"EventDefinition","parameters":{"id":590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":583,"indexed":true,"mutability":"mutable","name":"userOpHash","nameLocation":"1746:10:5","nodeType":"VariableDeclaration","scope":591,"src":"1730:26:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":582,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1730:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":585,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1774:6:5","nodeType":"VariableDeclaration","scope":591,"src":"1758:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":584,"name":"address","nodeType":"ElementaryTypeName","src":"1758:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":587,"indexed":false,"mutability":"mutable","name":"factory","nameLocation":"1790:7:5","nodeType":"VariableDeclaration","scope":591,"src":"1782:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":586,"name":"address","nodeType":"ElementaryTypeName","src":"1782:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":589,"indexed":false,"mutability":"mutable","name":"paymaster","nameLocation":"1807:9:5","nodeType":"VariableDeclaration","scope":591,"src":"1799:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":588,"name":"address","nodeType":"ElementaryTypeName","src":"1799:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1729:88:5"},"src":"1708:110:5"},{"anonymous":false,"documentation":{"id":592,"nodeType":"StructuredDocumentation","src":"1824:337:5","text":" An event emitted if the UserOperation \"callData\" reverted with non-zero length\n @param userOpHash the request unique identifier.\n @param sender the sender of this request\n @param nonce the nonce used in the request\n @param revertReason - the return bytes from the (reverted) call to \"callData\"."},"eventSelector":"1c4fada7374c0a9ee8841fc38afe82932dc0f8e69012e927f061a8bae611a201","id":602,"name":"UserOperationRevertReason","nameLocation":"2172:25:5","nodeType":"EventDefinition","parameters":{"id":601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":594,"indexed":true,"mutability":"mutable","name":"userOpHash","nameLocation":"2214:10:5","nodeType":"VariableDeclaration","scope":602,"src":"2198:26:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":593,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2198:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":596,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"2242:6:5","nodeType":"VariableDeclaration","scope":602,"src":"2226:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":595,"name":"address","nodeType":"ElementaryTypeName","src":"2226:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":598,"indexed":false,"mutability":"mutable","name":"nonce","nameLocation":"2258:5:5","nodeType":"VariableDeclaration","scope":602,"src":"2250:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":597,"name":"uint256","nodeType":"ElementaryTypeName","src":"2250:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":600,"indexed":false,"mutability":"mutable","name":"revertReason","nameLocation":"2271:12:5","nodeType":"VariableDeclaration","scope":602,"src":"2265:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":599,"name":"bytes","nodeType":"ElementaryTypeName","src":"2265:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2197:87:5"},"src":"2166:119:5"},{"anonymous":false,"documentation":{"id":603,"nodeType":"StructuredDocumentation","src":"2291:158:5","text":" an event emitted by handleOps(), before starting the execution loop.\n any event emitted before this event, is part of the validation."},"eventSelector":"bb47ee3e183a558b1a2ff0874b079f3fc5478b7454eacf2bfc5af2ff5878f972","id":605,"name":"BeforeExecution","nameLocation":"2460:15:5","nodeType":"EventDefinition","parameters":{"id":604,"nodeType":"ParameterList","parameters":[],"src":"2475:2:5"},"src":"2454:24:5"},{"anonymous":false,"documentation":{"id":606,"nodeType":"StructuredDocumentation","src":"2484:101:5","text":" signature aggregator used by the following UserOperationEvents within this bundle."},"eventSelector":"575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d","id":610,"name":"SignatureAggregatorChanged","nameLocation":"2596:26:5","nodeType":"EventDefinition","parameters":{"id":609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":608,"indexed":true,"mutability":"mutable","name":"aggregator","nameLocation":"2639:10:5","nodeType":"VariableDeclaration","scope":610,"src":"2623:26:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":607,"name":"address","nodeType":"ElementaryTypeName","src":"2623:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2622:28:5"},"src":"2590:61:5"},{"documentation":{"id":611,"nodeType":"StructuredDocumentation","src":"2657:756:5","text":" a custom revert error of handleOps, to identify the offending op.\n  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\n  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\n  @param reason - revert reason\n      The string starts with a unique code \"AAmn\", where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,\n      so a failure can be attributed to the correct entity.\n   Should be caught in off-chain handleOps simulation and not happen on-chain.\n   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts."},"errorSelector":"220266b6","id":617,"name":"FailedOp","nameLocation":"3424:8:5","nodeType":"ErrorDefinition","parameters":{"id":616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":613,"mutability":"mutable","name":"opIndex","nameLocation":"3441:7:5","nodeType":"VariableDeclaration","scope":617,"src":"3433:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":612,"name":"uint256","nodeType":"ElementaryTypeName","src":"3433:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":615,"mutability":"mutable","name":"reason","nameLocation":"3457:6:5","nodeType":"VariableDeclaration","scope":617,"src":"3450:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":614,"name":"string","nodeType":"ElementaryTypeName","src":"3450:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3432:32:5"},"src":"3418:47:5"},{"documentation":{"id":618,"nodeType":"StructuredDocumentation","src":"3471:114:5","text":" error case when a signature aggregator fails to verify the aggregated signature it had created."},"errorSelector":"86a9f750","id":622,"name":"SignatureValidationFailed","nameLocation":"3596:25:5","nodeType":"ErrorDefinition","parameters":{"id":621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":620,"mutability":"mutable","name":"aggregator","nameLocation":"3630:10:5","nodeType":"VariableDeclaration","scope":622,"src":"3622:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":619,"name":"address","nodeType":"ElementaryTypeName","src":"3622:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3621:20:5"},"src":"3590:52:5"},{"documentation":{"id":623,"nodeType":"StructuredDocumentation","src":"3648:327:5","text":" Successful result from simulateValidation.\n @param returnInfo gas and time-range returned values\n @param senderInfo stake information about the sender\n @param factoryInfo stake information about the factory (if any)\n @param paymasterInfo stake information about the paymaster (if any)"},"errorSelector":"e0cff05f","id":637,"name":"ValidationResult","nameLocation":"3986:16:5","nodeType":"ErrorDefinition","parameters":{"id":636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":626,"mutability":"mutable","name":"returnInfo","nameLocation":"4014:10:5","nodeType":"VariableDeclaration","scope":637,"src":"4003:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$734_memory_ptr","typeString":"struct IEntryPoint.ReturnInfo"},"typeName":{"id":625,"nodeType":"UserDefinedTypeName","pathNode":{"id":624,"name":"ReturnInfo","nameLocations":["4003:10:5"],"nodeType":"IdentifierPath","referencedDeclaration":734,"src":"4003:10:5"},"referencedDeclaration":734,"src":"4003:10:5","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$734_storage_ptr","typeString":"struct IEntryPoint.ReturnInfo"}},"visibility":"internal"},{"constant":false,"id":629,"mutability":"mutable","name":"senderInfo","nameLocation":"4044:10:5","nodeType":"VariableDeclaration","scope":637,"src":"4034:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$834_memory_ptr","typeString":"struct IStakeManager.StakeInfo"},"typeName":{"id":628,"nodeType":"UserDefinedTypeName","pathNode":{"id":627,"name":"StakeInfo","nameLocations":["4034:9:5"],"nodeType":"IdentifierPath","referencedDeclaration":834,"src":"4034:9:5"},"referencedDeclaration":834,"src":"4034:9:5","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$834_storage_ptr","typeString":"struct IStakeManager.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":632,"mutability":"mutable","name":"factoryInfo","nameLocation":"4066:11:5","nodeType":"VariableDeclaration","scope":637,"src":"4056:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$834_memory_ptr","typeString":"struct IStakeManager.StakeInfo"},"typeName":{"id":631,"nodeType":"UserDefinedTypeName","pathNode":{"id":630,"name":"StakeInfo","nameLocations":["4056:9:5"],"nodeType":"IdentifierPath","referencedDeclaration":834,"src":"4056:9:5"},"referencedDeclaration":834,"src":"4056:9:5","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$834_storage_ptr","typeString":"struct IStakeManager.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":635,"mutability":"mutable","name":"paymasterInfo","nameLocation":"4089:13:5","nodeType":"VariableDeclaration","scope":637,"src":"4079:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$834_memory_ptr","typeString":"struct IStakeManager.StakeInfo"},"typeName":{"id":634,"nodeType":"UserDefinedTypeName","pathNode":{"id":633,"name":"StakeInfo","nameLocations":["4079:9:5"],"nodeType":"IdentifierPath","referencedDeclaration":834,"src":"4079:9:5"},"referencedDeclaration":834,"src":"4079:9:5","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$834_storage_ptr","typeString":"struct IStakeManager.StakeInfo"}},"visibility":"internal"}],"src":"4002:101:5"},"src":"3980:124:5"},{"documentation":{"id":638,"nodeType":"StructuredDocumentation","src":"4110:561:5","text":" Successful result from simulateValidation, if the account returns a signature aggregator\n @param returnInfo gas and time-range returned values\n @param senderInfo stake information about the sender\n @param factoryInfo stake information about the factory (if any)\n @param paymasterInfo stake information about the paymaster (if any)\n @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\n      bundler MUST use it to verify the signature, or reject the UserOperation"},"errorSelector":"faecb4e4","id":655,"name":"ValidationResultWithAggregation","nameLocation":"4682:31:5","nodeType":"ErrorDefinition","parameters":{"id":654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":641,"mutability":"mutable","name":"returnInfo","nameLocation":"4725:10:5","nodeType":"VariableDeclaration","scope":655,"src":"4714:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$734_memory_ptr","typeString":"struct IEntryPoint.ReturnInfo"},"typeName":{"id":640,"nodeType":"UserDefinedTypeName","pathNode":{"id":639,"name":"ReturnInfo","nameLocations":["4714:10:5"],"nodeType":"IdentifierPath","referencedDeclaration":734,"src":"4714:10:5"},"referencedDeclaration":734,"src":"4714:10:5","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$734_storage_ptr","typeString":"struct IEntryPoint.ReturnInfo"}},"visibility":"internal"},{"constant":false,"id":644,"mutability":"mutable","name":"senderInfo","nameLocation":"4755:10:5","nodeType":"VariableDeclaration","scope":655,"src":"4745:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$834_memory_ptr","typeString":"struct IStakeManager.StakeInfo"},"typeName":{"id":643,"nodeType":"UserDefinedTypeName","pathNode":{"id":642,"name":"StakeInfo","nameLocations":["4745:9:5"],"nodeType":"IdentifierPath","referencedDeclaration":834,"src":"4745:9:5"},"referencedDeclaration":834,"src":"4745:9:5","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$834_storage_ptr","typeString":"struct IStakeManager.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":647,"mutability":"mutable","name":"factoryInfo","nameLocation":"4777:11:5","nodeType":"VariableDeclaration","scope":655,"src":"4767:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$834_memory_ptr","typeString":"struct IStakeManager.StakeInfo"},"typeName":{"id":646,"nodeType":"UserDefinedTypeName","pathNode":{"id":645,"name":"StakeInfo","nameLocations":["4767:9:5"],"nodeType":"IdentifierPath","referencedDeclaration":834,"src":"4767:9:5"},"referencedDeclaration":834,"src":"4767:9:5","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$834_storage_ptr","typeString":"struct IStakeManager.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":650,"mutability":"mutable","name":"paymasterInfo","nameLocation":"4800:13:5","nodeType":"VariableDeclaration","scope":655,"src":"4790:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$834_memory_ptr","typeString":"struct IStakeManager.StakeInfo"},"typeName":{"id":649,"nodeType":"UserDefinedTypeName","pathNode":{"id":648,"name":"StakeInfo","nameLocations":["4790:9:5"],"nodeType":"IdentifierPath","referencedDeclaration":834,"src":"4790:9:5"},"referencedDeclaration":834,"src":"4790:9:5","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$834_storage_ptr","typeString":"struct IStakeManager.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":653,"mutability":"mutable","name":"aggregatorInfo","nameLocation":"4843:14:5","nodeType":"VariableDeclaration","scope":655,"src":"4823:34:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_AggregatorStakeInfo_$740_memory_ptr","typeString":"struct IEntryPoint.AggregatorStakeInfo"},"typeName":{"id":652,"nodeType":"UserDefinedTypeName","pathNode":{"id":651,"name":"AggregatorStakeInfo","nameLocations":["4823:19:5"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"4823:19:5"},"referencedDeclaration":740,"src":"4823:19:5","typeDescriptions":{"typeIdentifier":"t_struct$_AggregatorStakeInfo_$740_storage_ptr","typeString":"struct IEntryPoint.AggregatorStakeInfo"}},"visibility":"internal"}],"src":"4713:145:5"},"src":"4676:183:5"},{"documentation":{"id":656,"nodeType":"StructuredDocumentation","src":"4865:51:5","text":" return value of getSenderAddress"},"errorSelector":"6ca7b806","id":660,"name":"SenderAddressResult","nameLocation":"4927:19:5","nodeType":"ErrorDefinition","parameters":{"id":659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":658,"mutability":"mutable","name":"sender","nameLocation":"4955:6:5","nodeType":"VariableDeclaration","scope":660,"src":"4947:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":657,"name":"address","nodeType":"ElementaryTypeName","src":"4947:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4946:16:5"},"src":"4921:42:5"},{"documentation":{"id":661,"nodeType":"StructuredDocumentation","src":"4969:51:5","text":" return value of simulateHandleOp"},"errorSelector":"8b7ac980","id":675,"name":"ExecutionResult","nameLocation":"5031:15:5","nodeType":"ErrorDefinition","parameters":{"id":674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":663,"mutability":"mutable","name":"preOpGas","nameLocation":"5055:8:5","nodeType":"VariableDeclaration","scope":675,"src":"5047:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":662,"name":"uint256","nodeType":"ElementaryTypeName","src":"5047:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":665,"mutability":"mutable","name":"paid","nameLocation":"5073:4:5","nodeType":"VariableDeclaration","scope":675,"src":"5065:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":664,"name":"uint256","nodeType":"ElementaryTypeName","src":"5065:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":667,"mutability":"mutable","name":"validAfter","nameLocation":"5086:10:5","nodeType":"VariableDeclaration","scope":675,"src":"5079:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":666,"name":"uint48","nodeType":"ElementaryTypeName","src":"5079:6:5","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":669,"mutability":"mutable","name":"validUntil","nameLocation":"5105:10:5","nodeType":"VariableDeclaration","scope":675,"src":"5098:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":668,"name":"uint48","nodeType":"ElementaryTypeName","src":"5098:6:5","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":671,"mutability":"mutable","name":"targetSuccess","nameLocation":"5122:13:5","nodeType":"VariableDeclaration","scope":675,"src":"5117:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":670,"name":"bool","nodeType":"ElementaryTypeName","src":"5117:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":673,"mutability":"mutable","name":"targetResult","nameLocation":"5143:12:5","nodeType":"VariableDeclaration","scope":675,"src":"5137:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":672,"name":"bytes","nodeType":"ElementaryTypeName","src":"5137:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5046:110:5"},"src":"5025:132:5"},{"canonicalName":"IEntryPoint.UserOpsPerAggregator","id":685,"members":[{"constant":false,"id":679,"mutability":"mutable","name":"userOps","nameLocation":"5255:7:5","nodeType":"VariableDeclaration","scope":685,"src":"5239:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$909_storage_$dyn_storage_ptr","typeString":"struct UserOperation[]"},"typeName":{"baseType":{"id":677,"nodeType":"UserDefinedTypeName","pathNode":{"id":676,"name":"UserOperation","nameLocations":["5239:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"5239:13:5"},"referencedDeclaration":909,"src":"5239:13:5","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_storage_ptr","typeString":"struct UserOperation"}},"id":678,"nodeType":"ArrayTypeName","src":"5239:15:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$909_storage_$dyn_storage_ptr","typeString":"struct UserOperation[]"}},"visibility":"internal"},{"constant":false,"id":682,"mutability":"mutable","name":"aggregator","nameLocation":"5315:10:5","nodeType":"VariableDeclaration","scope":685,"src":"5303:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAggregator_$554","typeString":"contract IAggregator"},"typeName":{"id":681,"nodeType":"UserDefinedTypeName","pathNode":{"id":680,"name":"IAggregator","nameLocations":["5303:11:5"],"nodeType":"IdentifierPath","referencedDeclaration":554,"src":"5303:11:5"},"referencedDeclaration":554,"src":"5303:11:5","typeDescriptions":{"typeIdentifier":"t_contract$_IAggregator_$554","typeString":"contract IAggregator"}},"visibility":"internal"},{"constant":false,"id":684,"mutability":"mutable","name":"signature","nameLocation":"5373:9:5","nodeType":"VariableDeclaration","scope":685,"src":"5367:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":683,"name":"bytes","nodeType":"ElementaryTypeName","src":"5367:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"UserOpsPerAggregator","nameLocation":"5208:20:5","nodeType":"StructDefinition","scope":758,"src":"5201:188:5","visibility":"public"},{"documentation":{"id":686,"nodeType":"StructuredDocumentation","src":"5395:368:5","text":" Execute a batch of UserOperation.\n no signature aggregator is used.\n if any account requires an aggregator (that is, it returned an aggregator when\n performing simulateValidation), then handleAggregatedOps() must be used instead.\n @param ops the operations to execute\n @param beneficiary the address to receive the fees"},"functionSelector":"1fad948c","id":695,"implemented":false,"kind":"function","modifiers":[],"name":"handleOps","nameLocation":"5777:9:5","nodeType":"FunctionDefinition","parameters":{"id":693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":690,"mutability":"mutable","name":"ops","nameLocation":"5812:3:5","nodeType":"VariableDeclaration","scope":695,"src":"5787:28:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$909_calldata_ptr_$dyn_calldata_ptr","typeString":"struct UserOperation[]"},"typeName":{"baseType":{"id":688,"nodeType":"UserDefinedTypeName","pathNode":{"id":687,"name":"UserOperation","nameLocations":["5787:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"5787:13:5"},"referencedDeclaration":909,"src":"5787:13:5","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_storage_ptr","typeString":"struct UserOperation"}},"id":689,"nodeType":"ArrayTypeName","src":"5787:15:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$909_storage_$dyn_storage_ptr","typeString":"struct UserOperation[]"}},"visibility":"internal"},{"constant":false,"id":692,"mutability":"mutable","name":"beneficiary","nameLocation":"5833:11:5","nodeType":"VariableDeclaration","scope":695,"src":"5817:27:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":691,"name":"address","nodeType":"ElementaryTypeName","src":"5817:15:5","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"5786:59:5"},"returnParameters":{"id":694,"nodeType":"ParameterList","parameters":[],"src":"5854:0:5"},"scope":758,"src":"5768:87:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":696,"nodeType":"StructuredDocumentation","src":"5861:249:5","text":" Execute a batch of UserOperation with Aggregators\n @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\n @param beneficiary the address to receive the fees"},"functionSelector":"4b1d7cf5","id":705,"implemented":false,"kind":"function","modifiers":[],"name":"handleAggregatedOps","nameLocation":"6124:19:5","nodeType":"FunctionDefinition","parameters":{"id":703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":700,"mutability":"mutable","name":"opsPerAggregator","nameLocation":"6185:16:5","nodeType":"VariableDeclaration","scope":705,"src":"6153:48:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOpsPerAggregator_$685_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IEntryPoint.UserOpsPerAggregator[]"},"typeName":{"baseType":{"id":698,"nodeType":"UserDefinedTypeName","pathNode":{"id":697,"name":"UserOpsPerAggregator","nameLocations":["6153:20:5"],"nodeType":"IdentifierPath","referencedDeclaration":685,"src":"6153:20:5"},"referencedDeclaration":685,"src":"6153:20:5","typeDescriptions":{"typeIdentifier":"t_struct$_UserOpsPerAggregator_$685_storage_ptr","typeString":"struct IEntryPoint.UserOpsPerAggregator"}},"id":699,"nodeType":"ArrayTypeName","src":"6153:22:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOpsPerAggregator_$685_storage_$dyn_storage_ptr","typeString":"struct IEntryPoint.UserOpsPerAggregator[]"}},"visibility":"internal"},{"constant":false,"id":702,"mutability":"mutable","name":"beneficiary","nameLocation":"6227:11:5","nodeType":"VariableDeclaration","scope":705,"src":"6211:27:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":701,"name":"address","nodeType":"ElementaryTypeName","src":"6211:15:5","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"6143:101:5"},"returnParameters":{"id":704,"nodeType":"ParameterList","parameters":[],"src":"6253:0:5"},"scope":758,"src":"6115:139:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":706,"nodeType":"StructuredDocumentation","src":"6260:197:5","text":" generate a request Id - unique identifier for this request.\n the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid."},"functionSelector":"a6193531","id":714,"implemented":false,"kind":"function","modifiers":[],"name":"getUserOpHash","nameLocation":"6471:13:5","nodeType":"FunctionDefinition","parameters":{"id":710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":709,"mutability":"mutable","name":"userOp","nameLocation":"6508:6:5","nodeType":"VariableDeclaration","scope":714,"src":"6485:29:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":708,"nodeType":"UserDefinedTypeName","pathNode":{"id":707,"name":"UserOperation","nameLocations":["6485:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"6485:13:5"},"referencedDeclaration":909,"src":"6485:13:5","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"6484:31:5"},"returnParameters":{"id":713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":712,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":714,"src":"6539:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":711,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6539:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6538:9:5"},"scope":758,"src":"6462:86:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":715,"nodeType":"StructuredDocumentation","src":"6554:398:5","text":" Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\n @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\n @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\n @param userOp the user operation to validate."},"functionSelector":"ee219423","id":721,"implemented":false,"kind":"function","modifiers":[],"name":"simulateValidation","nameLocation":"6966:18:5","nodeType":"FunctionDefinition","parameters":{"id":719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":718,"mutability":"mutable","name":"userOp","nameLocation":"7008:6:5","nodeType":"VariableDeclaration","scope":721,"src":"6985:29:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":717,"nodeType":"UserDefinedTypeName","pathNode":{"id":716,"name":"UserOperation","nameLocations":["6985:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"6985:13:5"},"referencedDeclaration":909,"src":"6985:13:5","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"6984:31:5"},"returnParameters":{"id":720,"nodeType":"ParameterList","parameters":[],"src":"7024:0:5"},"scope":758,"src":"6957:68:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"canonicalName":"IEntryPoint.ReturnInfo","id":734,"members":[{"constant":false,"id":723,"mutability":"mutable","name":"preOpGas","nameLocation":"7660:8:5","nodeType":"VariableDeclaration","scope":734,"src":"7652:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":722,"name":"uint256","nodeType":"ElementaryTypeName","src":"7652:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":725,"mutability":"mutable","name":"prefund","nameLocation":"7686:7:5","nodeType":"VariableDeclaration","scope":734,"src":"7678:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":724,"name":"uint256","nodeType":"ElementaryTypeName","src":"7678:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":727,"mutability":"mutable","name":"sigFailed","nameLocation":"7708:9:5","nodeType":"VariableDeclaration","scope":734,"src":"7703:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":726,"name":"bool","nodeType":"ElementaryTypeName","src":"7703:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":729,"mutability":"mutable","name":"validAfter","nameLocation":"7734:10:5","nodeType":"VariableDeclaration","scope":734,"src":"7727:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":728,"name":"uint48","nodeType":"ElementaryTypeName","src":"7727:6:5","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":731,"mutability":"mutable","name":"validUntil","nameLocation":"7761:10:5","nodeType":"VariableDeclaration","scope":734,"src":"7754:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":730,"name":"uint48","nodeType":"ElementaryTypeName","src":"7754:6:5","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":733,"mutability":"mutable","name":"paymasterContext","nameLocation":"7787:16:5","nodeType":"VariableDeclaration","scope":734,"src":"7781:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":732,"name":"bytes","nodeType":"ElementaryTypeName","src":"7781:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"ReturnInfo","nameLocation":"7631:10:5","nodeType":"StructDefinition","scope":758,"src":"7624:186:5","visibility":"public"},{"canonicalName":"IEntryPoint.AggregatorStakeInfo","id":740,"members":[{"constant":false,"id":736,"mutability":"mutable","name":"aggregator","nameLocation":"7990:10:5","nodeType":"VariableDeclaration","scope":740,"src":"7982:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":735,"name":"address","nodeType":"ElementaryTypeName","src":"7982:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":739,"mutability":"mutable","name":"stakeInfo","nameLocation":"8020:9:5","nodeType":"VariableDeclaration","scope":740,"src":"8010:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$834_storage_ptr","typeString":"struct IStakeManager.StakeInfo"},"typeName":{"id":738,"nodeType":"UserDefinedTypeName","pathNode":{"id":737,"name":"StakeInfo","nameLocations":["8010:9:5"],"nodeType":"IdentifierPath","referencedDeclaration":834,"src":"8010:9:5"},"referencedDeclaration":834,"src":"8010:9:5","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$834_storage_ptr","typeString":"struct IStakeManager.StakeInfo"}},"visibility":"internal"}],"name":"AggregatorStakeInfo","nameLocation":"7952:19:5","nodeType":"StructDefinition","scope":758,"src":"7945:91:5","visibility":"public"},{"documentation":{"id":741,"nodeType":"StructuredDocumentation","src":"8042:337:5","text":" Get counterfactual sender address.\n  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\n this method always revert, and returns the address in SenderAddressResult error\n @param initCode the constructor code to be passed into the UserOperation."},"functionSelector":"9b249f69","id":746,"implemented":false,"kind":"function","modifiers":[],"name":"getSenderAddress","nameLocation":"8393:16:5","nodeType":"FunctionDefinition","parameters":{"id":744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":743,"mutability":"mutable","name":"initCode","nameLocation":"8423:8:5","nodeType":"VariableDeclaration","scope":746,"src":"8410:21:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":742,"name":"bytes","nodeType":"ElementaryTypeName","src":"8410:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8409:23:5"},"returnParameters":{"id":745,"nodeType":"ParameterList","parameters":[],"src":"8441:0:5"},"scope":758,"src":"8384:58:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":747,"nodeType":"StructuredDocumentation","src":"8449:847:5","text":" simulate full execution of a UserOperation (including both validation and target execution)\n this method will always revert with \"ExecutionResult\".\n it performs full validation of the UserOperation, but ignores signature error.\n an optional target address is called after the userop succeeds, and its value is returned\n (before the entire call is reverted)\n Note that in order to collect the the success/failure of the target call, it must be executed\n with trace enabled to track the emitted events.\n @param op the UserOperation to simulate\n @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\n        are set to the return from that call.\n @param targetCallData callData to pass to target address"},"functionSelector":"d6383f94","id":757,"implemented":false,"kind":"function","modifiers":[],"name":"simulateHandleOp","nameLocation":"9310:16:5","nodeType":"FunctionDefinition","parameters":{"id":755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":750,"mutability":"mutable","name":"op","nameLocation":"9350:2:5","nodeType":"VariableDeclaration","scope":757,"src":"9327:25:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":749,"nodeType":"UserDefinedTypeName","pathNode":{"id":748,"name":"UserOperation","nameLocations":["9327:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"9327:13:5"},"referencedDeclaration":909,"src":"9327:13:5","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"},{"constant":false,"id":752,"mutability":"mutable","name":"target","nameLocation":"9362:6:5","nodeType":"VariableDeclaration","scope":757,"src":"9354:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":751,"name":"address","nodeType":"ElementaryTypeName","src":"9354:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":754,"mutability":"mutable","name":"targetCallData","nameLocation":"9385:14:5","nodeType":"VariableDeclaration","scope":757,"src":"9370:29:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":753,"name":"bytes","nodeType":"ElementaryTypeName","src":"9370:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9326:74:5"},"returnParameters":{"id":756,"nodeType":"ParameterList","parameters":[],"src":"9409:0:5"},"scope":758,"src":"9301:109:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":759,"src":"430:8982:5","usedErrors":[617,622,637,655,660,675]}],"src":"163:9251:5"},"id":5},"@account-abstraction/contracts/interfaces/INonceManager.sol":{"ast":{"absolutePath":"@account-abstraction/contracts/interfaces/INonceManager.sol","exportedSymbols":{"INonceManager":[777]},"id":778,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":760,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:6"},{"abstract":false,"baseContracts":[],"canonicalName":"INonceManager","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":777,"linearizedBaseContracts":[777],"name":"INonceManager","nameLocation":"72:13:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":761,"nodeType":"StructuredDocumentation","src":"93:416:6","text":" Return the next nonce for this sender.\n Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\n But UserOp with different keys can come with arbitrary order.\n @param sender the account address\n @param key the high 192 bit of the nonce\n @return nonce a full nonce to pass for next UserOp with this sender."},"functionSelector":"35567e1a","id":770,"implemented":false,"kind":"function","modifiers":[],"name":"getNonce","nameLocation":"523:8:6","nodeType":"FunctionDefinition","parameters":{"id":766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":763,"mutability":"mutable","name":"sender","nameLocation":"540:6:6","nodeType":"VariableDeclaration","scope":770,"src":"532:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":762,"name":"address","nodeType":"ElementaryTypeName","src":"532:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":765,"mutability":"mutable","name":"key","nameLocation":"556:3:6","nodeType":"VariableDeclaration","scope":770,"src":"548:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"},"typeName":{"id":764,"name":"uint192","nodeType":"ElementaryTypeName","src":"548:7:6","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"visibility":"internal"}],"src":"531:29:6"},"returnParameters":{"id":769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":768,"mutability":"mutable","name":"nonce","nameLocation":"596:5:6","nodeType":"VariableDeclaration","scope":770,"src":"588:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":767,"name":"uint256","nodeType":"ElementaryTypeName","src":"588:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"587:15:6"},"scope":777,"src":"514:89:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":771,"nodeType":"StructuredDocumentation","src":"609:449:6","text":" Manually increment the nonce of the sender.\n This method is exposed just for completeness..\n Account does NOT need to call it, neither during validation, nor elsewhere,\n as the EntryPoint will update the nonce regardless.\n Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future\n UserOperations will not pay extra for the first transaction with a given key."},"functionSelector":"0bd28e3b","id":776,"implemented":false,"kind":"function","modifiers":[],"name":"incrementNonce","nameLocation":"1072:14:6","nodeType":"FunctionDefinition","parameters":{"id":774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":773,"mutability":"mutable","name":"key","nameLocation":"1095:3:6","nodeType":"VariableDeclaration","scope":776,"src":"1087:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"},"typeName":{"id":772,"name":"uint192","nodeType":"ElementaryTypeName","src":"1087:7:6","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"visibility":"internal"}],"src":"1086:13:6"},"returnParameters":{"id":775,"nodeType":"ParameterList","parameters":[],"src":"1108:0:6"},"scope":777,"src":"1063:46:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":778,"src":"62:1049:6","usedErrors":[]}],"src":"36:1076:6"},"id":6},"@account-abstraction/contracts/interfaces/IStakeManager.sol":{"ast":{"absolutePath":"@account-abstraction/contracts/interfaces/IStakeManager.sol","exportedSymbols":{"IStakeManager":[882]},"id":883,"license":"GPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":779,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"41:24:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IStakeManager","contractDependencies":[],"contractKind":"interface","documentation":{"id":780,"nodeType":"StructuredDocumentation","src":"67:211:7","text":" manage deposits and stakes.\n deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\n stake is value locked for at least \"unstakeDelay\" by the staked entity."},"fullyImplemented":false,"id":882,"linearizedBaseContracts":[882],"name":"IStakeManager","nameLocation":"289:13:7","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4","id":786,"name":"Deposited","nameLocation":"316:9:7","nodeType":"EventDefinition","parameters":{"id":785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":782,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"351:7:7","nodeType":"VariableDeclaration","scope":786,"src":"335:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":781,"name":"address","nodeType":"ElementaryTypeName","src":"335:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":784,"indexed":false,"mutability":"mutable","name":"totalDeposit","nameLocation":"376:12:7","nodeType":"VariableDeclaration","scope":786,"src":"368:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":783,"name":"uint256","nodeType":"ElementaryTypeName","src":"368:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"325:69:7"},"src":"310:85:7"},{"anonymous":false,"eventSelector":"d1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb","id":794,"name":"Withdrawn","nameLocation":"407:9:7","nodeType":"EventDefinition","parameters":{"id":793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":788,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"442:7:7","nodeType":"VariableDeclaration","scope":794,"src":"426:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":787,"name":"address","nodeType":"ElementaryTypeName","src":"426:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":790,"indexed":false,"mutability":"mutable","name":"withdrawAddress","nameLocation":"467:15:7","nodeType":"VariableDeclaration","scope":794,"src":"459:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":789,"name":"address","nodeType":"ElementaryTypeName","src":"459:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":792,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"500:6:7","nodeType":"VariableDeclaration","scope":794,"src":"492:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":791,"name":"uint256","nodeType":"ElementaryTypeName","src":"492:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"416:96:7"},"src":"401:112:7"},{"anonymous":false,"documentation":{"id":795,"nodeType":"StructuredDocumentation","src":"519:52:7","text":"Emitted when stake or unstake delay are modified"},"eventSelector":"a5ae833d0bb1dcd632d98a8b70973e8516812898e19bf27b70071ebc8dc52c01","id":803,"name":"StakeLocked","nameLocation":"582:11:7","nodeType":"EventDefinition","parameters":{"id":802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":797,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"619:7:7","nodeType":"VariableDeclaration","scope":803,"src":"603:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":796,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":799,"indexed":false,"mutability":"mutable","name":"totalStaked","nameLocation":"644:11:7","nodeType":"VariableDeclaration","scope":803,"src":"636:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":798,"name":"uint256","nodeType":"ElementaryTypeName","src":"636:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":801,"indexed":false,"mutability":"mutable","name":"unstakeDelaySec","nameLocation":"673:15:7","nodeType":"VariableDeclaration","scope":803,"src":"665:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":800,"name":"uint256","nodeType":"ElementaryTypeName","src":"665:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"593:101:7"},"src":"576:119:7"},{"anonymous":false,"documentation":{"id":804,"nodeType":"StructuredDocumentation","src":"701:52:7","text":"Emitted once a stake is scheduled for withdrawal"},"eventSelector":"fa9b3c14cc825c412c9ed81b3ba365a5b459439403f18829e572ed53a4180f0a","id":810,"name":"StakeUnlocked","nameLocation":"764:13:7","nodeType":"EventDefinition","parameters":{"id":809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":806,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"803:7:7","nodeType":"VariableDeclaration","scope":810,"src":"787:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":805,"name":"address","nodeType":"ElementaryTypeName","src":"787:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":808,"indexed":false,"mutability":"mutable","name":"withdrawTime","nameLocation":"828:12:7","nodeType":"VariableDeclaration","scope":810,"src":"820:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":807,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"777:69:7"},"src":"758:89:7"},{"anonymous":false,"eventSelector":"b7c918e0e249f999e965cafeb6c664271b3f4317d296461500e71da39f0cbda3","id":818,"name":"StakeWithdrawn","nameLocation":"859:14:7","nodeType":"EventDefinition","parameters":{"id":817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":812,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"899:7:7","nodeType":"VariableDeclaration","scope":818,"src":"883:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":811,"name":"address","nodeType":"ElementaryTypeName","src":"883:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":814,"indexed":false,"mutability":"mutable","name":"withdrawAddress","nameLocation":"924:15:7","nodeType":"VariableDeclaration","scope":818,"src":"916:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":813,"name":"address","nodeType":"ElementaryTypeName","src":"916:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":816,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"957:6:7","nodeType":"VariableDeclaration","scope":818,"src":"949:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":815,"name":"uint256","nodeType":"ElementaryTypeName","src":"949:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"873:96:7"},"src":"853:117:7"},{"canonicalName":"IStakeManager.DepositInfo","id":829,"members":[{"constant":false,"id":820,"mutability":"mutable","name":"deposit","nameLocation":"1650:7:7","nodeType":"VariableDeclaration","scope":829,"src":"1642:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":819,"name":"uint112","nodeType":"ElementaryTypeName","src":"1642:7:7","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"},{"constant":false,"id":822,"mutability":"mutable","name":"staked","nameLocation":"1672:6:7","nodeType":"VariableDeclaration","scope":829,"src":"1667:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":821,"name":"bool","nodeType":"ElementaryTypeName","src":"1667:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":824,"mutability":"mutable","name":"stake","nameLocation":"1696:5:7","nodeType":"VariableDeclaration","scope":829,"src":"1688:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":823,"name":"uint112","nodeType":"ElementaryTypeName","src":"1688:7:7","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"},{"constant":false,"id":826,"mutability":"mutable","name":"unstakeDelaySec","nameLocation":"1718:15:7","nodeType":"VariableDeclaration","scope":829,"src":"1711:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":825,"name":"uint32","nodeType":"ElementaryTypeName","src":"1711:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":828,"mutability":"mutable","name":"withdrawTime","nameLocation":"1750:12:7","nodeType":"VariableDeclaration","scope":829,"src":"1743:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":827,"name":"uint48","nodeType":"ElementaryTypeName","src":"1743:6:7","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"name":"DepositInfo","nameLocation":"1620:11:7","nodeType":"StructDefinition","scope":882,"src":"1613:156:7","visibility":"public"},{"canonicalName":"IStakeManager.StakeInfo","id":834,"members":[{"constant":false,"id":831,"mutability":"mutable","name":"stake","nameLocation":"1871:5:7","nodeType":"VariableDeclaration","scope":834,"src":"1863:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":830,"name":"uint256","nodeType":"ElementaryTypeName","src":"1863:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":833,"mutability":"mutable","name":"unstakeDelaySec","nameLocation":"1894:15:7","nodeType":"VariableDeclaration","scope":834,"src":"1886:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":832,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"StakeInfo","nameLocation":"1843:9:7","nodeType":"StructDefinition","scope":882,"src":"1836:80:7","visibility":"public"},{"documentation":{"id":835,"nodeType":"StructuredDocumentation","src":"1922:60:7","text":"@return info - full deposit information of given account"},"functionSelector":"5287ce12","id":843,"implemented":false,"kind":"function","modifiers":[],"name":"getDepositInfo","nameLocation":"1996:14:7","nodeType":"FunctionDefinition","parameters":{"id":838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":837,"mutability":"mutable","name":"account","nameLocation":"2019:7:7","nodeType":"VariableDeclaration","scope":843,"src":"2011:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":836,"name":"address","nodeType":"ElementaryTypeName","src":"2011:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2010:17:7"},"returnParameters":{"id":842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":841,"mutability":"mutable","name":"info","nameLocation":"2070:4:7","nodeType":"VariableDeclaration","scope":843,"src":"2051:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_DepositInfo_$829_memory_ptr","typeString":"struct IStakeManager.DepositInfo"},"typeName":{"id":840,"nodeType":"UserDefinedTypeName","pathNode":{"id":839,"name":"DepositInfo","nameLocations":["2051:11:7"],"nodeType":"IdentifierPath","referencedDeclaration":829,"src":"2051:11:7"},"referencedDeclaration":829,"src":"2051:11:7","typeDescriptions":{"typeIdentifier":"t_struct$_DepositInfo_$829_storage_ptr","typeString":"struct IStakeManager.DepositInfo"}},"visibility":"internal"}],"src":"2050:25:7"},"scope":882,"src":"1987:89:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":844,"nodeType":"StructuredDocumentation","src":"2082:56:7","text":"@return the deposit (for gas payment) of the account"},"functionSelector":"70a08231","id":851,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2152:9:7","nodeType":"FunctionDefinition","parameters":{"id":847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":846,"mutability":"mutable","name":"account","nameLocation":"2170:7:7","nodeType":"VariableDeclaration","scope":851,"src":"2162:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":845,"name":"address","nodeType":"ElementaryTypeName","src":"2162:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2161:17:7"},"returnParameters":{"id":850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":849,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":851,"src":"2202:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":848,"name":"uint256","nodeType":"ElementaryTypeName","src":"2202:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2201:9:7"},"scope":882,"src":"2143:68:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":852,"nodeType":"StructuredDocumentation","src":"2217:58:7","text":" add to the deposit of the given account"},"functionSelector":"b760faf9","id":857,"implemented":false,"kind":"function","modifiers":[],"name":"depositTo","nameLocation":"2289:9:7","nodeType":"FunctionDefinition","parameters":{"id":855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":854,"mutability":"mutable","name":"account","nameLocation":"2307:7:7","nodeType":"VariableDeclaration","scope":857,"src":"2299:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":853,"name":"address","nodeType":"ElementaryTypeName","src":"2299:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2298:17:7"},"returnParameters":{"id":856,"nodeType":"ParameterList","parameters":[],"src":"2332:0:7"},"scope":882,"src":"2280:53:7","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":858,"nodeType":"StructuredDocumentation","src":"2339:201:7","text":" add to the account's stake - amount and delay\n any pending unstake is first cancelled.\n @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn."},"functionSelector":"0396cb60","id":863,"implemented":false,"kind":"function","modifiers":[],"name":"addStake","nameLocation":"2554:8:7","nodeType":"FunctionDefinition","parameters":{"id":861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":860,"mutability":"mutable","name":"_unstakeDelaySec","nameLocation":"2570:16:7","nodeType":"VariableDeclaration","scope":863,"src":"2563:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":859,"name":"uint32","nodeType":"ElementaryTypeName","src":"2563:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2562:25:7"},"returnParameters":{"id":862,"nodeType":"ParameterList","parameters":[],"src":"2604:0:7"},"scope":882,"src":"2545:60:7","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":864,"nodeType":"StructuredDocumentation","src":"2611:128:7","text":" attempt to unlock the stake.\n the value can be withdrawn (using withdrawStake) after the unstake delay."},"functionSelector":"bb9fe6bf","id":867,"implemented":false,"kind":"function","modifiers":[],"name":"unlockStake","nameLocation":"2753:11:7","nodeType":"FunctionDefinition","parameters":{"id":865,"nodeType":"ParameterList","parameters":[],"src":"2764:2:7"},"returnParameters":{"id":866,"nodeType":"ParameterList","parameters":[],"src":"2775:0:7"},"scope":882,"src":"2744:32:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":868,"nodeType":"StructuredDocumentation","src":"2782:194:7","text":" withdraw from the (unlocked) stake.\n must first call unlockStake and wait for the unstakeDelay to pass\n @param withdrawAddress the address to send withdrawn value."},"functionSelector":"c23a5cea","id":873,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawStake","nameLocation":"2990:13:7","nodeType":"FunctionDefinition","parameters":{"id":871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":870,"mutability":"mutable","name":"withdrawAddress","nameLocation":"3020:15:7","nodeType":"VariableDeclaration","scope":873,"src":"3004:31:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":869,"name":"address","nodeType":"ElementaryTypeName","src":"3004:15:7","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"3003:33:7"},"returnParameters":{"id":872,"nodeType":"ParameterList","parameters":[],"src":"3045:0:7"},"scope":882,"src":"2981:65:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":874,"nodeType":"StructuredDocumentation","src":"3052:165:7","text":" withdraw from the deposit.\n @param withdrawAddress the address to send withdrawn value.\n @param withdrawAmount the amount to withdraw."},"functionSelector":"205c2878","id":881,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawTo","nameLocation":"3231:10:7","nodeType":"FunctionDefinition","parameters":{"id":879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":876,"mutability":"mutable","name":"withdrawAddress","nameLocation":"3258:15:7","nodeType":"VariableDeclaration","scope":881,"src":"3242:31:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":875,"name":"address","nodeType":"ElementaryTypeName","src":"3242:15:7","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":878,"mutability":"mutable","name":"withdrawAmount","nameLocation":"3283:14:7","nodeType":"VariableDeclaration","scope":881,"src":"3275:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":877,"name":"uint256","nodeType":"ElementaryTypeName","src":"3275:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3241:57:7"},"returnParameters":{"id":880,"nodeType":"ParameterList","parameters":[],"src":"3307:0:7"},"scope":882,"src":"3222:86:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":883,"src":"279:3031:7","usedErrors":[]}],"src":"41:3270:7"},"id":7},"@account-abstraction/contracts/interfaces/UserOperation.sol":{"ast":{"absolutePath":"@account-abstraction/contracts/interfaces/UserOperation.sol","exportedSymbols":{"UserOperation":[909],"UserOperationLib":[1079],"calldataKeccak":[503]},"id":1080,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":884,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:8"},{"absolutePath":"@account-abstraction/contracts/core/Helpers.sol","file":"../core/Helpers.sol","id":886,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1080,"sourceUnit":504,"src":"104:51:8","symbolAliases":[{"foreign":{"id":885,"name":"calldataKeccak","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"112:14:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"UserOperation","id":909,"members":[{"constant":false,"id":888,"mutability":"mutable","name":"sender","nameLocation":"1237:6:8","nodeType":"VariableDeclaration","scope":909,"src":"1229:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":887,"name":"address","nodeType":"ElementaryTypeName","src":"1229:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":890,"mutability":"mutable","name":"nonce","nameLocation":"1261:5:8","nodeType":"VariableDeclaration","scope":909,"src":"1253:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":889,"name":"uint256","nodeType":"ElementaryTypeName","src":"1253:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":892,"mutability":"mutable","name":"initCode","nameLocation":"1282:8:8","nodeType":"VariableDeclaration","scope":909,"src":"1276:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":891,"name":"bytes","nodeType":"ElementaryTypeName","src":"1276:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":894,"mutability":"mutable","name":"callData","nameLocation":"1306:8:8","nodeType":"VariableDeclaration","scope":909,"src":"1300:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":893,"name":"bytes","nodeType":"ElementaryTypeName","src":"1300:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":896,"mutability":"mutable","name":"callGasLimit","nameLocation":"1332:12:8","nodeType":"VariableDeclaration","scope":909,"src":"1324:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":895,"name":"uint256","nodeType":"ElementaryTypeName","src":"1324:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":898,"mutability":"mutable","name":"verificationGasLimit","nameLocation":"1362:20:8","nodeType":"VariableDeclaration","scope":909,"src":"1354:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":897,"name":"uint256","nodeType":"ElementaryTypeName","src":"1354:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":900,"mutability":"mutable","name":"preVerificationGas","nameLocation":"1400:18:8","nodeType":"VariableDeclaration","scope":909,"src":"1392:26:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":899,"name":"uint256","nodeType":"ElementaryTypeName","src":"1392:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":902,"mutability":"mutable","name":"maxFeePerGas","nameLocation":"1436:12:8","nodeType":"VariableDeclaration","scope":909,"src":"1428:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":901,"name":"uint256","nodeType":"ElementaryTypeName","src":"1428:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":904,"mutability":"mutable","name":"maxPriorityFeePerGas","nameLocation":"1466:20:8","nodeType":"VariableDeclaration","scope":909,"src":"1458:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":903,"name":"uint256","nodeType":"ElementaryTypeName","src":"1458:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":906,"mutability":"mutable","name":"paymasterAndData","nameLocation":"1502:16:8","nodeType":"VariableDeclaration","scope":909,"src":"1496:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":905,"name":"bytes","nodeType":"ElementaryTypeName","src":"1496:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":908,"mutability":"mutable","name":"signature","nameLocation":"1534:9:8","nodeType":"VariableDeclaration","scope":909,"src":"1528:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":907,"name":"bytes","nodeType":"ElementaryTypeName","src":"1528:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"UserOperation","nameLocation":"1204:13:8","nodeType":"StructDefinition","scope":1080,"src":"1197:353:8","visibility":"public"},{"abstract":false,"baseContracts":[],"canonicalName":"UserOperationLib","contractDependencies":[],"contractKind":"library","documentation":{"id":910,"nodeType":"StructuredDocumentation","src":"1552:77:8","text":" Utility functions helpful when working with UserOperation structs."},"fullyImplemented":true,"id":1079,"linearizedBaseContracts":[1079],"name":"UserOperationLib","nameLocation":"1638:16:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":930,"nodeType":"Block","src":"1744:199:8","statements":[{"assignments":[919],"declarations":[{"constant":false,"id":919,"mutability":"mutable","name":"data","nameLocation":"1762:4:8","nodeType":"VariableDeclaration","scope":930,"src":"1754:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":918,"name":"address","nodeType":"ElementaryTypeName","src":"1754:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":920,"nodeType":"VariableDeclarationStatement","src":"1754:12:8"},{"AST":{"nodeType":"YulBlock","src":"1868:30:8","statements":[{"nodeType":"YulAssignment","src":"1869:28:8","value":{"arguments":[{"name":"userOp","nodeType":"YulIdentifier","src":"1890:6:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1877:12:8"},"nodeType":"YulFunctionCall","src":"1877:20:8"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1869:4:8"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":919,"isOffset":false,"isSlot":false,"src":"1869:4:8","valueSize":1},{"declaration":913,"isOffset":false,"isSlot":false,"src":"1890:6:8","valueSize":1}],"id":921,"nodeType":"InlineAssembly","src":"1859:39:8"},{"expression":{"arguments":[{"arguments":[{"id":926,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":919,"src":"1930:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":925,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1922:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":924,"name":"uint160","nodeType":"ElementaryTypeName","src":"1922:7:8","typeDescriptions":{}}},"id":927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1922:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":923,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1914:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":922,"name":"address","nodeType":"ElementaryTypeName","src":"1914:7:8","typeDescriptions":{}}},"id":928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1914:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":917,"id":929,"nodeType":"Return","src":"1907:29:8"}]},"id":931,"implemented":true,"kind":"function","modifiers":[],"name":"getSender","nameLocation":"1671:9:8","nodeType":"FunctionDefinition","parameters":{"id":914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":913,"mutability":"mutable","name":"userOp","nameLocation":"1704:6:8","nodeType":"VariableDeclaration","scope":931,"src":"1681:29:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":912,"nodeType":"UserDefinedTypeName","pathNode":{"id":911,"name":"UserOperation","nameLocations":["1681:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"1681:13:8"},"referencedDeclaration":909,"src":"1681:13:8","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"1680:31:8"},"returnParameters":{"id":917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":916,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":931,"src":"1735:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":915,"name":"address","nodeType":"ElementaryTypeName","src":"1735:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1734:9:8"},"scope":1079,"src":"1662:281:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":965,"nodeType":"Block","src":"2164:391:8","statements":[{"id":964,"nodeType":"UncheckedBlock","src":"2170:379:8","statements":[{"assignments":[940],"declarations":[{"constant":false,"id":940,"mutability":"mutable","name":"maxFeePerGas","nameLocation":"2198:12:8","nodeType":"VariableDeclaration","scope":964,"src":"2190:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":939,"name":"uint256","nodeType":"ElementaryTypeName","src":"2190:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":943,"initialValue":{"expression":{"id":941,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"2213:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2220:12:8","memberName":"maxFeePerGas","nodeType":"MemberAccess","referencedDeclaration":902,"src":"2213:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2190:42:8"},{"assignments":[945],"declarations":[{"constant":false,"id":945,"mutability":"mutable","name":"maxPriorityFeePerGas","nameLocation":"2250:20:8","nodeType":"VariableDeclaration","scope":964,"src":"2242:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":944,"name":"uint256","nodeType":"ElementaryTypeName","src":"2242:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":948,"initialValue":{"expression":{"id":946,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"2273:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2280:20:8","memberName":"maxPriorityFeePerGas","nodeType":"MemberAccess","referencedDeclaration":904,"src":"2273:27:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2242:58:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":949,"name":"maxFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"2314:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":950,"name":"maxPriorityFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":945,"src":"2330:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2314:36:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":955,"nodeType":"IfStatement","src":"2310:161:8","trueBody":{"id":954,"nodeType":"Block","src":"2352:119:8","statements":[{"expression":{"id":952,"name":"maxFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"2448:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":938,"id":953,"nodeType":"Return","src":"2441:19:8"}]}},{"expression":{"arguments":[{"id":957,"name":"maxFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"2491:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":958,"name":"maxPriorityFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":945,"src":"2505:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":959,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2528:5:8","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2534:7:8","memberName":"basefee","nodeType":"MemberAccess","src":"2528:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2505:36:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":956,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1078,"src":"2487:3:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2487:55:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":938,"id":963,"nodeType":"Return","src":"2480:62:8"}]}]},"id":966,"implemented":true,"kind":"function","modifiers":[],"name":"gasPrice","nameLocation":"2092:8:8","nodeType":"FunctionDefinition","parameters":{"id":935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":934,"mutability":"mutable","name":"userOp","nameLocation":"2124:6:8","nodeType":"VariableDeclaration","scope":966,"src":"2101:29:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":933,"nodeType":"UserDefinedTypeName","pathNode":{"id":932,"name":"UserOperation","nameLocations":["2101:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"2101:13:8"},"referencedDeclaration":909,"src":"2101:13:8","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"2100:31:8"},"returnParameters":{"id":938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":937,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":966,"src":"2155:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":936,"name":"uint256","nodeType":"ElementaryTypeName","src":"2155:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2154:9:8"},"scope":1079,"src":"2083:472:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1045,"nodeType":"Block","src":"2647:856:8","statements":[{"assignments":[975],"declarations":[{"constant":false,"id":975,"mutability":"mutable","name":"sender","nameLocation":"2665:6:8","nodeType":"VariableDeclaration","scope":1045,"src":"2657:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":974,"name":"address","nodeType":"ElementaryTypeName","src":"2657:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":979,"initialValue":{"arguments":[{"id":977,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"2684:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation calldata"}],"id":976,"name":"getSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"2674:9:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_UserOperation_$909_calldata_ptr_$returns$_t_address_$","typeString":"function (struct UserOperation calldata) pure returns (address)"}},"id":978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2674:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2657:34:8"},{"assignments":[981],"declarations":[{"constant":false,"id":981,"mutability":"mutable","name":"nonce","nameLocation":"2709:5:8","nodeType":"VariableDeclaration","scope":1045,"src":"2701:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":980,"name":"uint256","nodeType":"ElementaryTypeName","src":"2701:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":984,"initialValue":{"expression":{"id":982,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"2717:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2724:5:8","memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":890,"src":"2717:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2701:28:8"},{"assignments":[986],"declarations":[{"constant":false,"id":986,"mutability":"mutable","name":"hashInitCode","nameLocation":"2747:12:8","nodeType":"VariableDeclaration","scope":1045,"src":"2739:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":985,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2739:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":991,"initialValue":{"arguments":[{"expression":{"id":988,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"2777:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2784:8:8","memberName":"initCode","nodeType":"MemberAccess","referencedDeclaration":892,"src":"2777:15:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":987,"name":"calldataKeccak","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"2762:14:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_bytes32_$","typeString":"function (bytes calldata) pure returns (bytes32)"}},"id":990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2762:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2739:54:8"},{"assignments":[993],"declarations":[{"constant":false,"id":993,"mutability":"mutable","name":"hashCallData","nameLocation":"2811:12:8","nodeType":"VariableDeclaration","scope":1045,"src":"2803:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":992,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2803:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":998,"initialValue":{"arguments":[{"expression":{"id":995,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"2841:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2848:8:8","memberName":"callData","nodeType":"MemberAccess","referencedDeclaration":894,"src":"2841:15:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":994,"name":"calldataKeccak","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"2826:14:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_bytes32_$","typeString":"function (bytes calldata) pure returns (bytes32)"}},"id":997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2826:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2803:54:8"},{"assignments":[1000],"declarations":[{"constant":false,"id":1000,"mutability":"mutable","name":"callGasLimit","nameLocation":"2875:12:8","nodeType":"VariableDeclaration","scope":1045,"src":"2867:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":999,"name":"uint256","nodeType":"ElementaryTypeName","src":"2867:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1003,"initialValue":{"expression":{"id":1001,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"2890:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":1002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2897:12:8","memberName":"callGasLimit","nodeType":"MemberAccess","referencedDeclaration":896,"src":"2890:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2867:42:8"},{"assignments":[1005],"declarations":[{"constant":false,"id":1005,"mutability":"mutable","name":"verificationGasLimit","nameLocation":"2927:20:8","nodeType":"VariableDeclaration","scope":1045,"src":"2919:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1004,"name":"uint256","nodeType":"ElementaryTypeName","src":"2919:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1008,"initialValue":{"expression":{"id":1006,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"2950:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":1007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2957:20:8","memberName":"verificationGasLimit","nodeType":"MemberAccess","referencedDeclaration":898,"src":"2950:27:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2919:58:8"},{"assignments":[1010],"declarations":[{"constant":false,"id":1010,"mutability":"mutable","name":"preVerificationGas","nameLocation":"2995:18:8","nodeType":"VariableDeclaration","scope":1045,"src":"2987:26:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1009,"name":"uint256","nodeType":"ElementaryTypeName","src":"2987:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1013,"initialValue":{"expression":{"id":1011,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"3016:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":1012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3023:18:8","memberName":"preVerificationGas","nodeType":"MemberAccess","referencedDeclaration":900,"src":"3016:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2987:54:8"},{"assignments":[1015],"declarations":[{"constant":false,"id":1015,"mutability":"mutable","name":"maxFeePerGas","nameLocation":"3059:12:8","nodeType":"VariableDeclaration","scope":1045,"src":"3051:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1014,"name":"uint256","nodeType":"ElementaryTypeName","src":"3051:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1018,"initialValue":{"expression":{"id":1016,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"3074:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3081:12:8","memberName":"maxFeePerGas","nodeType":"MemberAccess","referencedDeclaration":902,"src":"3074:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3051:42:8"},{"assignments":[1020],"declarations":[{"constant":false,"id":1020,"mutability":"mutable","name":"maxPriorityFeePerGas","nameLocation":"3111:20:8","nodeType":"VariableDeclaration","scope":1045,"src":"3103:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1019,"name":"uint256","nodeType":"ElementaryTypeName","src":"3103:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1023,"initialValue":{"expression":{"id":1021,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"3134:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":1022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3141:20:8","memberName":"maxPriorityFeePerGas","nodeType":"MemberAccess","referencedDeclaration":904,"src":"3134:27:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3103:58:8"},{"assignments":[1025],"declarations":[{"constant":false,"id":1025,"mutability":"mutable","name":"hashPaymasterAndData","nameLocation":"3179:20:8","nodeType":"VariableDeclaration","scope":1045,"src":"3171:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1024,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3171:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1030,"initialValue":{"arguments":[{"expression":{"id":1027,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"3217:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":1028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3224:16:8","memberName":"paymasterAndData","nodeType":"MemberAccess","referencedDeclaration":906,"src":"3217:23:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1026,"name":"calldataKeccak","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"3202:14:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_bytes32_$","typeString":"function (bytes calldata) pure returns (bytes32)"}},"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3202:39:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3171:70:8"},{"expression":{"arguments":[{"id":1033,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"3283:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1034,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"3291:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1035,"name":"hashInitCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"3310:12:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1036,"name":"hashCallData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"3324:12:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1037,"name":"callGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"3350:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1038,"name":"verificationGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1005,"src":"3364:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1039,"name":"preVerificationGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"3386:18:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1040,"name":"maxFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1015,"src":"3418:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1041,"name":"maxPriorityFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1020,"src":"3432:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1042,"name":"hashPaymasterAndData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1025,"src":"3466:20:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1031,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3259:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1032,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3263:6:8","memberName":"encode","nodeType":"MemberAccess","src":"3259:10:8","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3259:237:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":973,"id":1044,"nodeType":"Return","src":"3252:244:8"}]},"id":1046,"implemented":true,"kind":"function","modifiers":[],"name":"pack","nameLocation":"2570:4:8","nodeType":"FunctionDefinition","parameters":{"id":970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":969,"mutability":"mutable","name":"userOp","nameLocation":"2598:6:8","nodeType":"VariableDeclaration","scope":1046,"src":"2575:29:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":968,"nodeType":"UserDefinedTypeName","pathNode":{"id":967,"name":"UserOperation","nameLocations":["2575:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"2575:13:8"},"referencedDeclaration":909,"src":"2575:13:8","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"2574:31:8"},"returnParameters":{"id":973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":972,"mutability":"mutable","name":"ret","nameLocation":"2642:3:8","nodeType":"VariableDeclaration","scope":1046,"src":"2629:16:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":971,"name":"bytes","nodeType":"ElementaryTypeName","src":"2629:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2628:18:8"},"scope":1079,"src":"2561:942:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1060,"nodeType":"Block","src":"3586:47:8","statements":[{"expression":{"arguments":[{"arguments":[{"id":1056,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"3618:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation calldata"}],"id":1055,"name":"pack","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"3613:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_UserOperation_$909_calldata_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (struct UserOperation calldata) pure returns (bytes memory)"}},"id":1057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3613:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1054,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3603:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3603:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1053,"id":1059,"nodeType":"Return","src":"3596:30:8"}]},"id":1061,"implemented":true,"kind":"function","modifiers":[],"name":"hash","nameLocation":"3518:4:8","nodeType":"FunctionDefinition","parameters":{"id":1050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1049,"mutability":"mutable","name":"userOp","nameLocation":"3546:6:8","nodeType":"VariableDeclaration","scope":1061,"src":"3523:29:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":1048,"nodeType":"UserDefinedTypeName","pathNode":{"id":1047,"name":"UserOperation","nameLocations":["3523:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"3523:13:8"},"referencedDeclaration":909,"src":"3523:13:8","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"3522:31:8"},"returnParameters":{"id":1053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1052,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1061,"src":"3577:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1051,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3577:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3576:9:8"},"scope":1079,"src":"3509:124:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1077,"nodeType":"Block","src":"3706:37:8","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1070,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"3723:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1071,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"3727:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3723:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1074,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"3735:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3723:13:8","trueExpression":{"id":1073,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"3731:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1069,"id":1076,"nodeType":"Return","src":"3716:20:8"}]},"id":1078,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"3648:3:8","nodeType":"FunctionDefinition","parameters":{"id":1066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1063,"mutability":"mutable","name":"a","nameLocation":"3660:1:8","nodeType":"VariableDeclaration","scope":1078,"src":"3652:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1062,"name":"uint256","nodeType":"ElementaryTypeName","src":"3652:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1065,"mutability":"mutable","name":"b","nameLocation":"3671:1:8","nodeType":"VariableDeclaration","scope":1078,"src":"3663:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1064,"name":"uint256","nodeType":"ElementaryTypeName","src":"3663:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3651:22:8"},"returnParameters":{"id":1069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1068,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1078,"src":"3697:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1067,"name":"uint256","nodeType":"ElementaryTypeName","src":"3697:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3696:9:8"},"scope":1079,"src":"3639:104:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1080,"src":"1630:2115:8","usedErrors":[]}],"src":"36:3710:8"},"id":8},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol","exportedSymbols":{"Address":[3398],"ERC1967Proxy":[1132],"ERC1967Upgrade":[1481],"IBeacon":[1543],"Proxy":[1533],"StorageSlot":[1891]},"id":1133,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1081,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:9"},{"absolutePath":"@openzeppelin/contracts/proxy/Proxy.sol","file":"../Proxy.sol","id":1082,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1133,"sourceUnit":1534,"src":"58:22:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol","file":"./ERC1967Upgrade.sol","id":1083,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1133,"sourceUnit":1482,"src":"81:30:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1085,"name":"Proxy","nameLocations":["511:5:9"],"nodeType":"IdentifierPath","referencedDeclaration":1533,"src":"511:5:9"},"id":1086,"nodeType":"InheritanceSpecifier","src":"511:5:9"},{"baseName":{"id":1087,"name":"ERC1967Upgrade","nameLocations":["518:14:9"],"nodeType":"IdentifierPath","referencedDeclaration":1481,"src":"518:14:9"},"id":1088,"nodeType":"InheritanceSpecifier","src":"518:14:9"}],"canonicalName":"ERC1967Proxy","contractDependencies":[],"contractKind":"contract","documentation":{"id":1084,"nodeType":"StructuredDocumentation","src":"113:372:9","text":" @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n implementation address that can be changed. This address is stored in storage in the location specified by\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n implementation behind the proxy."},"fullyImplemented":true,"id":1132,"linearizedBaseContracts":[1132,1481,1533],"name":"ERC1967Proxy","nameLocation":"495:12:9","nodeType":"ContractDefinition","nodes":[{"body":{"id":1118,"nodeType":"Block","src":"935:161:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1109,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":1097,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"952:20:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1107,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"656970313936372e70726f78792e696d706c656d656e746174696f6e","id":1103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1002:30:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd","typeString":"literal_string \"eip1967.proxy.implementation\""},"value":"eip1967.proxy.implementation"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd","typeString":"literal_string \"eip1967.proxy.implementation\""}],"id":1102,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"992:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"992:41:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1101,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"984:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1100,"name":"uint256","nodeType":"ElementaryTypeName","src":"984:7:9","typeDescriptions":{}}},"id":1105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"984:50:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1037:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"984:54:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1099,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"976:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1098,"name":"bytes32","nodeType":"ElementaryTypeName","src":"976:7:9","typeDescriptions":{}}},"id":1108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"976:63:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"952:87:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1096,"name":"assert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-3,"src":"945:6:9","typeDescriptions":{"typeIdentifier":"t_function_assert_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"945:95:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1111,"nodeType":"ExpressionStatement","src":"945:95:9"},{"expression":{"arguments":[{"id":1113,"name":"_logic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1091,"src":"1068:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1114,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"1076:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":1115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1083:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1112,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"1050:17:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":1116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1050:39:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1117,"nodeType":"ExpressionStatement","src":"1050:39:9"}]},"documentation":{"id":1089,"nodeType":"StructuredDocumentation","src":"539:335:9","text":" @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n function call, and allows initializating the storage of the proxy like a Solidity constructor."},"id":1119,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1091,"mutability":"mutable","name":"_logic","nameLocation":"899:6:9","nodeType":"VariableDeclaration","scope":1119,"src":"891:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1090,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1093,"mutability":"mutable","name":"_data","nameLocation":"920:5:9","nodeType":"VariableDeclaration","scope":1119,"src":"907:18:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1092,"name":"bytes","nodeType":"ElementaryTypeName","src":"907:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"890:36:9"},"returnParameters":{"id":1095,"nodeType":"ParameterList","parameters":[],"src":"935:0:9"},"scope":1132,"src":"879:217:9","stateMutability":"payable","virtual":false,"visibility":"public"},{"baseFunctions":[1498],"body":{"id":1130,"nodeType":"Block","src":"1255:59:9","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1126,"name":"ERC1967Upgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1481,"src":"1272:14:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1967Upgrade_$1481_$","typeString":"type(contract ERC1967Upgrade)"}},"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1287:18:9","memberName":"_getImplementation","nodeType":"MemberAccess","referencedDeclaration":1163,"src":"1272:33:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1272:35:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1125,"id":1129,"nodeType":"Return","src":"1265:42:9"}]},"documentation":{"id":1120,"nodeType":"StructuredDocumentation","src":"1102:67:9","text":" @dev Returns the current implementation address."},"id":1131,"implemented":true,"kind":"function","modifiers":[],"name":"_implementation","nameLocation":"1183:15:9","nodeType":"FunctionDefinition","overrides":{"id":1122,"nodeType":"OverrideSpecifier","overrides":[],"src":"1223:8:9"},"parameters":{"id":1121,"nodeType":"ParameterList","parameters":[],"src":"1198:2:9"},"returnParameters":{"id":1125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1124,"mutability":"mutable","name":"impl","nameLocation":"1249:4:9","nodeType":"VariableDeclaration","scope":1131,"src":"1241:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1123,"name":"address","nodeType":"ElementaryTypeName","src":"1241:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1240:14:9"},"scope":1132,"src":"1174:140:9","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1133,"src":"486:830:9","usedErrors":[]}],"src":"33:1284:9"},"id":9},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol","exportedSymbols":{"Address":[3398],"ERC1967Upgrade":[1481],"IBeacon":[1543],"StorageSlot":[1891]},"id":1482,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1134,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"33:23:10"},{"absolutePath":"@openzeppelin/contracts/proxy/beacon/IBeacon.sol","file":"../beacon/IBeacon.sol","id":1135,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1482,"sourceUnit":1544,"src":"58:31:10","symbolAliases":[],"unitAlias":""},{"absolutePath":"node_modules/@openzeppelin/contracts/proxy/utils/Address.sol","file":"node_modules/@openzeppelin/contracts/proxy/utils/Address.sol","id":1136,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1482,"sourceUnit":3399,"src":"90:70:10","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"../../utils/StorageSlot.sol","id":1137,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1482,"sourceUnit":1892,"src":"161:37:10","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"ERC1967Upgrade","contractDependencies":[],"contractKind":"contract","documentation":{"id":1138,"nodeType":"StructuredDocumentation","src":"200:236:10","text":" @dev This abstract contract provides getters and event emitting update functions for\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n _Available since v4.1._\n @custom:oz-upgrades-unsafe-allow delegatecall"},"fullyImplemented":true,"id":1481,"linearizedBaseContracts":[1481],"name":"ERC1967Upgrade","nameLocation":"455:14:10","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1141,"mutability":"constant","name":"_ROLLBACK_SLOT","nameLocation":"580:14:10","nodeType":"VariableDeclaration","scope":1481,"src":"555:108:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1139,"name":"bytes32","nodeType":"ElementaryTypeName","src":"555:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834393130666466613136666564333236306564306537313437663763633664613131613630323038623562393430366431326136333536313466666439313433","id":1140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"597:66:10","typeDescriptions":{"typeIdentifier":"t_rational_33048860383849004559742813297059419343339852917517107368639918720169455489347_by_1","typeString":"int_const 3304...(69 digits omitted)...9347"},"value":"0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143"},"visibility":"private"},{"constant":true,"documentation":{"id":1142,"nodeType":"StructuredDocumentation","src":"670:214:10","text":" @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n validated in the constructor."},"id":1145,"mutability":"constant","name":"_IMPLEMENTATION_SLOT","nameLocation":"915:20:10","nodeType":"VariableDeclaration","scope":1481,"src":"889:115:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1143,"name":"bytes32","nodeType":"ElementaryTypeName","src":"889:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263","id":1144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"938:66:10","typeDescriptions":{"typeIdentifier":"t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1","typeString":"int_const 2444...(69 digits omitted)...5612"},"value":"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"},"visibility":"internal"},{"anonymous":false,"documentation":{"id":1146,"nodeType":"StructuredDocumentation","src":"1011:68:10","text":" @dev Emitted when the implementation is upgraded."},"eventSelector":"bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b","id":1150,"name":"Upgraded","nameLocation":"1090:8:10","nodeType":"EventDefinition","parameters":{"id":1149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1148,"indexed":true,"mutability":"mutable","name":"implementation","nameLocation":"1115:14:10","nodeType":"VariableDeclaration","scope":1150,"src":"1099:30:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1147,"name":"address","nodeType":"ElementaryTypeName","src":"1099:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1098:32:10"},"src":"1084:47:10"},{"body":{"id":1162,"nodeType":"Block","src":"1271:78:10","statements":[{"expression":{"expression":{"arguments":[{"id":1158,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"1315:20:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1156,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"1288:11:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1891_$","typeString":"type(library StorageSlot)"}},"id":1157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1300:14:10","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1857,"src":"1288:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1837_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":1159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1288:48:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1837_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":1160,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1337:5:10","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1836,"src":"1288:54:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1155,"id":1161,"nodeType":"Return","src":"1281:61:10"}]},"documentation":{"id":1151,"nodeType":"StructuredDocumentation","src":"1137:67:10","text":" @dev Returns the current implementation address."},"id":1163,"implemented":true,"kind":"function","modifiers":[],"name":"_getImplementation","nameLocation":"1218:18:10","nodeType":"FunctionDefinition","parameters":{"id":1152,"nodeType":"ParameterList","parameters":[],"src":"1236:2:10"},"returnParameters":{"id":1155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1154,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1163,"src":"1262:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1153,"name":"address","nodeType":"ElementaryTypeName","src":"1262:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1261:9:10"},"scope":1481,"src":"1209:140:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1186,"nodeType":"Block","src":"1503:196:10","statements":[{"expression":{"arguments":[{"arguments":[{"id":1172,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"1540:17:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1170,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"1521:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$3398_$","typeString":"type(library Address)"}},"id":1171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1529:10:10","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3122,"src":"1521:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1521:37:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":1174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1560:47:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""},"value":"ERC1967: new implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""}],"id":1169,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1513:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1513:95:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1176,"nodeType":"ExpressionStatement","src":"1513:95:10"},{"expression":{"id":1184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":1180,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"1645:20:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1177,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"1618:11:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1891_$","typeString":"type(library StorageSlot)"}},"id":1179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1630:14:10","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1857,"src":"1618:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1837_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1618:48:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1837_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":1182,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1667:5:10","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1836,"src":"1618:54:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1183,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"1675:17:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1618:74:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1185,"nodeType":"ExpressionStatement","src":"1618:74:10"}]},"documentation":{"id":1164,"nodeType":"StructuredDocumentation","src":"1355:80:10","text":" @dev Stores a new address in the EIP1967 implementation slot."},"id":1187,"implemented":true,"kind":"function","modifiers":[],"name":"_setImplementation","nameLocation":"1449:18:10","nodeType":"FunctionDefinition","parameters":{"id":1167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1166,"mutability":"mutable","name":"newImplementation","nameLocation":"1476:17:10","nodeType":"VariableDeclaration","scope":1187,"src":"1468:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1165,"name":"address","nodeType":"ElementaryTypeName","src":"1468:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1467:27:10"},"returnParameters":{"id":1168,"nodeType":"ParameterList","parameters":[],"src":"1503:0:10"},"scope":1481,"src":"1440:259:10","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1201,"nodeType":"Block","src":"1861:96:10","statements":[{"expression":{"arguments":[{"id":1194,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"1890:17:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1193,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1187,"src":"1871:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1871:37:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1196,"nodeType":"ExpressionStatement","src":"1871:37:10"},{"eventCall":{"arguments":[{"id":1198,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"1932:17:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1197,"name":"Upgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"1923:8:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1923:27:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1200,"nodeType":"EmitStatement","src":"1918:32:10"}]},"documentation":{"id":1188,"nodeType":"StructuredDocumentation","src":"1705:95:10","text":" @dev Perform implementation upgrade\n Emits an {Upgraded} event."},"id":1202,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeTo","nameLocation":"1814:10:10","nodeType":"FunctionDefinition","parameters":{"id":1191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1190,"mutability":"mutable","name":"newImplementation","nameLocation":"1833:17:10","nodeType":"VariableDeclaration","scope":1202,"src":"1825:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1189,"name":"address","nodeType":"ElementaryTypeName","src":"1825:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1824:27:10"},"returnParameters":{"id":1192,"nodeType":"ParameterList","parameters":[],"src":"1861:0:10"},"scope":1481,"src":"1805:152:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1231,"nodeType":"Block","src":"2219:167:10","statements":[{"expression":{"arguments":[{"id":1213,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"2240:17:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1212,"name":"_upgradeTo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"2229:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2229:29:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1215,"nodeType":"ExpressionStatement","src":"2229:29:10"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1216,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"2272:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2277:6:10","memberName":"length","nodeType":"MemberAccess","src":"2272:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2286:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2272:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":1220,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"2291:9:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2272:28:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1230,"nodeType":"IfStatement","src":"2268:112:10","trueBody":{"id":1229,"nodeType":"Block","src":"2302:78:10","statements":[{"expression":{"arguments":[{"id":1225,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"2345:17:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1226,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"2364:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1222,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"2316:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$3398_$","typeString":"type(library Address)"}},"id":1224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2324:20:10","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":3332,"src":"2316:28:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":1227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2316:53:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1228,"nodeType":"ExpressionStatement","src":"2316:53:10"}]}}]},"documentation":{"id":1203,"nodeType":"StructuredDocumentation","src":"1963:123:10","text":" @dev Perform implementation upgrade with additional setup call.\n Emits an {Upgraded} event."},"id":1232,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCall","nameLocation":"2100:17:10","nodeType":"FunctionDefinition","parameters":{"id":1210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1205,"mutability":"mutable","name":"newImplementation","nameLocation":"2135:17:10","nodeType":"VariableDeclaration","scope":1232,"src":"2127:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1204,"name":"address","nodeType":"ElementaryTypeName","src":"2127:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1207,"mutability":"mutable","name":"data","nameLocation":"2175:4:10","nodeType":"VariableDeclaration","scope":1232,"src":"2162:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1206,"name":"bytes","nodeType":"ElementaryTypeName","src":"2162:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1209,"mutability":"mutable","name":"forceCall","nameLocation":"2194:9:10","nodeType":"VariableDeclaration","scope":1232,"src":"2189:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1208,"name":"bool","nodeType":"ElementaryTypeName","src":"2189:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2117:92:10"},"returnParameters":{"id":1211,"nodeType":"ParameterList","parameters":[],"src":"2219:0:10"},"scope":1481,"src":"2091:295:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1316,"nodeType":"Block","src":"2692:1098:10","statements":[{"assignments":[1243],"declarations":[{"constant":false,"id":1243,"mutability":"mutable","name":"oldImplementation","nameLocation":"2710:17:10","nodeType":"VariableDeclaration","scope":1316,"src":"2702:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1242,"name":"address","nodeType":"ElementaryTypeName","src":"2702:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1246,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1244,"name":"_getImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"2730:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2730:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2702:48:10"},{"expression":{"arguments":[{"id":1248,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1235,"src":"2822:17:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1247,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1187,"src":"2803:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2803:37:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1250,"nodeType":"ExpressionStatement","src":"2803:37:10"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1251,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"2854:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2859:6:10","memberName":"length","nodeType":"MemberAccess","src":"2854:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2868:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2854:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":1255,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"2873:9:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2854:28:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1265,"nodeType":"IfStatement","src":"2850:112:10","trueBody":{"id":1264,"nodeType":"Block","src":"2884:78:10","statements":[{"expression":{"arguments":[{"id":1260,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1235,"src":"2927:17:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1261,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"2946:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1257,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"2898:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$3398_$","typeString":"type(library Address)"}},"id":1259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2906:20:10","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":3332,"src":"2898:28:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":1262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2898:53:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1263,"nodeType":"ExpressionStatement","src":"2898:53:10"}]}},{"assignments":[1270],"declarations":[{"constant":false,"id":1270,"mutability":"mutable","name":"rollbackTesting","nameLocation":"3064:15:10","nodeType":"VariableDeclaration","scope":1316,"src":"3032:47:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1840_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":1269,"nodeType":"UserDefinedTypeName","pathNode":{"id":1268,"name":"StorageSlot.BooleanSlot","nameLocations":["3032:11:10","3044:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":1840,"src":"3032:23:10"},"referencedDeclaration":1840,"src":"3032:23:10","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1840_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"id":1275,"initialValue":{"arguments":[{"id":1273,"name":"_ROLLBACK_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"3109:14:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1271,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"3082:11:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1891_$","typeString":"type(library StorageSlot)"}},"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3094:14:10","memberName":"getBooleanSlot","nodeType":"MemberAccess","referencedDeclaration":1868,"src":"3082:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_BooleanSlot_$1840_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.BooleanSlot storage pointer)"}},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3082:42:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1840_storage_ptr","typeString":"struct StorageSlot.BooleanSlot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"3032:92:10"},{"condition":{"id":1278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3138:22:10","subExpression":{"expression":{"id":1276,"name":"rollbackTesting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"3139:15:10","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1840_storage_ptr","typeString":"struct StorageSlot.BooleanSlot storage pointer"}},"id":1277,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3155:5:10","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1839,"src":"3139:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1315,"nodeType":"IfStatement","src":"3134:650:10","trueBody":{"id":1314,"nodeType":"Block","src":"3162:622:10","statements":[{"expression":{"id":1283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1279,"name":"rollbackTesting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"3252:15:10","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1840_storage_ptr","typeString":"struct StorageSlot.BooleanSlot storage pointer"}},"id":1281,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3268:5:10","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1839,"src":"3252:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3276:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3252:28:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1284,"nodeType":"ExpressionStatement","src":"3252:28:10"},{"expression":{"arguments":[{"id":1288,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1235,"src":"3340:17:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"75706772616465546f286164647265737329","id":1291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3399:20:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_3659cfe672549963da205df855ebfb8672cda4801e0255183bd6a6f536855df7","typeString":"literal_string \"upgradeTo(address)\""},"value":"upgradeTo(address)"},{"id":1292,"name":"oldImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"3421:17:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3659cfe672549963da205df855ebfb8672cda4801e0255183bd6a6f536855df7","typeString":"literal_string \"upgradeTo(address)\""},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1289,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3375:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1290,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3379:19:10","memberName":"encodeWithSignature","nodeType":"MemberAccess","src":"3375:23:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (string memory) pure returns (bytes memory)"}},"id":1293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3375:64:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1285,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"3294:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$3398_$","typeString":"type(library Address)"}},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3302:20:10","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":3332,"src":"3294:28:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3294:159:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1295,"nodeType":"ExpressionStatement","src":"3294:159:10"},{"expression":{"id":1300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1296,"name":"rollbackTesting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"3467:15:10","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1840_storage_ptr","typeString":"struct StorageSlot.BooleanSlot storage pointer"}},"id":1298,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3483:5:10","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1839,"src":"3467:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3491:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3467:29:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1301,"nodeType":"ExpressionStatement","src":"3467:29:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1303,"name":"oldImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"3562:17:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1304,"name":"_getImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"3583:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3583:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3562:41:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524331393637557067726164653a207570677261646520627265616b732066757274686572207570677261646573","id":1307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3605:49:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_2425ea74e68e4bcd365d89824a06e1475543dcbb6a12bf699e5abf6b11b9b6ed","typeString":"literal_string \"ERC1967Upgrade: upgrade breaks further upgrades\""},"value":"ERC1967Upgrade: upgrade breaks further upgrades"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2425ea74e68e4bcd365d89824a06e1475543dcbb6a12bf699e5abf6b11b9b6ed","typeString":"literal_string \"ERC1967Upgrade: upgrade breaks further upgrades\""}],"id":1302,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3554:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3554:101:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1309,"nodeType":"ExpressionStatement","src":"3554:101:10"},{"expression":{"arguments":[{"id":1311,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1235,"src":"3755:17:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1310,"name":"_upgradeTo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"3744:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3744:29:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1313,"nodeType":"ExpressionStatement","src":"3744:29:10"}]}}]},"documentation":{"id":1233,"nodeType":"StructuredDocumentation","src":"2392:161:10","text":" @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n Emits an {Upgraded} event."},"id":1317,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCallSecure","nameLocation":"2567:23:10","nodeType":"FunctionDefinition","parameters":{"id":1240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1235,"mutability":"mutable","name":"newImplementation","nameLocation":"2608:17:10","nodeType":"VariableDeclaration","scope":1317,"src":"2600:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1234,"name":"address","nodeType":"ElementaryTypeName","src":"2600:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1237,"mutability":"mutable","name":"data","nameLocation":"2648:4:10","nodeType":"VariableDeclaration","scope":1317,"src":"2635:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1236,"name":"bytes","nodeType":"ElementaryTypeName","src":"2635:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1239,"mutability":"mutable","name":"forceCall","nameLocation":"2667:9:10","nodeType":"VariableDeclaration","scope":1317,"src":"2662:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1238,"name":"bool","nodeType":"ElementaryTypeName","src":"2662:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2590:92:10"},"returnParameters":{"id":1241,"nodeType":"ParameterList","parameters":[],"src":"2692:0:10"},"scope":1481,"src":"2558:1232:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":1318,"nodeType":"StructuredDocumentation","src":"3796:189:10","text":" @dev Storage slot with the admin of the contract.\n This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n validated in the constructor."},"id":1321,"mutability":"constant","name":"_ADMIN_SLOT","nameLocation":"4016:11:10","nodeType":"VariableDeclaration","scope":1481,"src":"3990:106:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1319,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3990:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307862353331323736383461353638623331373361653133623966386136303136653234336536336236653865653131373864366137313738353062356436313033","id":1320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4030:66:10","typeDescriptions":{"typeIdentifier":"t_rational_81955473079516046949633743016697847541294818689821282749996681496272635257091_by_1","typeString":"int_const 8195...(69 digits omitted)...7091"},"value":"0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"},"visibility":"internal"},{"anonymous":false,"documentation":{"id":1322,"nodeType":"StructuredDocumentation","src":"4103:67:10","text":" @dev Emitted when the admin account has changed."},"eventSelector":"7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f","id":1328,"name":"AdminChanged","nameLocation":"4181:12:10","nodeType":"EventDefinition","parameters":{"id":1327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1324,"indexed":false,"mutability":"mutable","name":"previousAdmin","nameLocation":"4202:13:10","nodeType":"VariableDeclaration","scope":1328,"src":"4194:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1323,"name":"address","nodeType":"ElementaryTypeName","src":"4194:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1326,"indexed":false,"mutability":"mutable","name":"newAdmin","nameLocation":"4225:8:10","nodeType":"VariableDeclaration","scope":1328,"src":"4217:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1325,"name":"address","nodeType":"ElementaryTypeName","src":"4217:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4193:41:10"},"src":"4175:60:10"},{"body":{"id":1340,"nodeType":"Block","src":"4349:69:10","statements":[{"expression":{"expression":{"arguments":[{"id":1336,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"4393:11:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1334,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"4366:11:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1891_$","typeString":"type(library StorageSlot)"}},"id":1335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4378:14:10","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1857,"src":"4366:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1837_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":1337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4366:39:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1837_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":1338,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4406:5:10","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1836,"src":"4366:45:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1333,"id":1339,"nodeType":"Return","src":"4359:52:10"}]},"documentation":{"id":1329,"nodeType":"StructuredDocumentation","src":"4241:50:10","text":" @dev Returns the current admin."},"id":1341,"implemented":true,"kind":"function","modifiers":[],"name":"_getAdmin","nameLocation":"4305:9:10","nodeType":"FunctionDefinition","parameters":{"id":1330,"nodeType":"ParameterList","parameters":[],"src":"4314:2:10"},"returnParameters":{"id":1333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1332,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1341,"src":"4340:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1331,"name":"address","nodeType":"ElementaryTypeName","src":"4340:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4339:9:10"},"scope":1481,"src":"4296:122:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1366,"nodeType":"Block","src":"4545:156:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1348,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1344,"src":"4563:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4583:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1350,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4575:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1349,"name":"address","nodeType":"ElementaryTypeName","src":"4575:7:10","typeDescriptions":{}}},"id":1352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4575:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4563:22:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e65772061646d696e20697320746865207a65726f2061646472657373","id":1354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4587:40:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""},"value":"ERC1967: new admin is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""}],"id":1347,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4555:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4555:73:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1356,"nodeType":"ExpressionStatement","src":"4555:73:10"},{"expression":{"id":1364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":1360,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"4665:11:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1357,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"4638:11:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1891_$","typeString":"type(library StorageSlot)"}},"id":1359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4650:14:10","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1857,"src":"4638:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1837_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":1361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4638:39:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1837_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":1362,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4678:5:10","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1836,"src":"4638:45:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1363,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1344,"src":"4686:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4638:56:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1365,"nodeType":"ExpressionStatement","src":"4638:56:10"}]},"documentation":{"id":1342,"nodeType":"StructuredDocumentation","src":"4424:71:10","text":" @dev Stores a new address in the EIP1967 admin slot."},"id":1367,"implemented":true,"kind":"function","modifiers":[],"name":"_setAdmin","nameLocation":"4509:9:10","nodeType":"FunctionDefinition","parameters":{"id":1345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1344,"mutability":"mutable","name":"newAdmin","nameLocation":"4527:8:10","nodeType":"VariableDeclaration","scope":1367,"src":"4519:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1343,"name":"address","nodeType":"ElementaryTypeName","src":"4519:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4518:18:10"},"returnParameters":{"id":1346,"nodeType":"ParameterList","parameters":[],"src":"4545:0:10"},"scope":1481,"src":"4500:201:10","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1383,"nodeType":"Block","src":"4861:86:10","statements":[{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1374,"name":"_getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1341,"src":"4889:9:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4889:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1376,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"4902:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1373,"name":"AdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"4876:12:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":1377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4876:35:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1378,"nodeType":"EmitStatement","src":"4871:40:10"},{"expression":{"arguments":[{"id":1380,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"4931:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1379,"name":"_setAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1367,"src":"4921:9:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4921:19:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1382,"nodeType":"ExpressionStatement","src":"4921:19:10"}]},"documentation":{"id":1368,"nodeType":"StructuredDocumentation","src":"4707:100:10","text":" @dev Changes the admin of the proxy.\n Emits an {AdminChanged} event."},"id":1384,"implemented":true,"kind":"function","modifiers":[],"name":"_changeAdmin","nameLocation":"4821:12:10","nodeType":"FunctionDefinition","parameters":{"id":1371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1370,"mutability":"mutable","name":"newAdmin","nameLocation":"4842:8:10","nodeType":"VariableDeclaration","scope":1384,"src":"4834:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1369,"name":"address","nodeType":"ElementaryTypeName","src":"4834:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4833:18:10"},"returnParameters":{"id":1372,"nodeType":"ParameterList","parameters":[],"src":"4861:0:10"},"scope":1481,"src":"4812:135:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":1385,"nodeType":"StructuredDocumentation","src":"4953:232:10","text":" @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"id":1388,"mutability":"constant","name":"_BEACON_SLOT","nameLocation":"5216:12:10","nodeType":"VariableDeclaration","scope":1481,"src":"5190:107:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1386,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5190:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307861336630616437346535343233616562666438306433656634333436353738333335613961373261656165653539666636636233353832623335313333643530","id":1387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5231:66:10","typeDescriptions":{"typeIdentifier":"t_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1","typeString":"int_const 7415...(69 digits omitted)...4704"},"value":"0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50"},"visibility":"internal"},{"anonymous":false,"documentation":{"id":1389,"nodeType":"StructuredDocumentation","src":"5304:60:10","text":" @dev Emitted when the beacon is upgraded."},"eventSelector":"1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e","id":1393,"name":"BeaconUpgraded","nameLocation":"5375:14:10","nodeType":"EventDefinition","parameters":{"id":1392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1391,"indexed":true,"mutability":"mutable","name":"beacon","nameLocation":"5406:6:10","nodeType":"VariableDeclaration","scope":1393,"src":"5390:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1390,"name":"address","nodeType":"ElementaryTypeName","src":"5390:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5389:24:10"},"src":"5369:45:10"},{"body":{"id":1405,"nodeType":"Block","src":"5530:70:10","statements":[{"expression":{"expression":{"arguments":[{"id":1401,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1388,"src":"5574:12:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1399,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"5547:11:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1891_$","typeString":"type(library StorageSlot)"}},"id":1400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5559:14:10","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1857,"src":"5547:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1837_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":1402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5547:40:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1837_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":1403,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5588:5:10","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1836,"src":"5547:46:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1398,"id":1404,"nodeType":"Return","src":"5540:53:10"}]},"documentation":{"id":1394,"nodeType":"StructuredDocumentation","src":"5420:51:10","text":" @dev Returns the current beacon."},"id":1406,"implemented":true,"kind":"function","modifiers":[],"name":"_getBeacon","nameLocation":"5485:10:10","nodeType":"FunctionDefinition","parameters":{"id":1395,"nodeType":"ParameterList","parameters":[],"src":"5495:2:10"},"returnParameters":{"id":1398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1397,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1406,"src":"5521:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1396,"name":"address","nodeType":"ElementaryTypeName","src":"5521:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5520:9:10"},"scope":1481,"src":"5476:124:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1441,"nodeType":"Block","src":"5729:324:10","statements":[{"expression":{"arguments":[{"arguments":[{"id":1415,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1409,"src":"5766:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1413,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"5747:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$3398_$","typeString":"type(library Address)"}},"id":1414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5755:10:10","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3122,"src":"5747:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5747:29:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720626561636f6e206973206e6f74206120636f6e7472616374","id":1417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5778:39:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""},"value":"ERC1967: new beacon is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""}],"id":1412,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5739:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5739:79:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1419,"nodeType":"ExpressionStatement","src":"5739:79:10"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1424,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1409,"src":"5876:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1423,"name":"IBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1543,"src":"5868:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeacon_$1543_$","typeString":"type(contract IBeacon)"}},"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5868:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeacon_$1543","typeString":"contract IBeacon"}},"id":1426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5887:14:10","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":1542,"src":"5868:33:10","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":1427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5868:35:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1421,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"5849:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$3398_$","typeString":"type(library Address)"}},"id":1422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5857:10:10","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3122,"src":"5849:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5849:55:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":1429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5918:50:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""},"value":"ERC1967: beacon implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""}],"id":1420,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5828:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5828:150:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1431,"nodeType":"ExpressionStatement","src":"5828:150:10"},{"expression":{"id":1439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":1435,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1388,"src":"6015:12:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1432,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"5988:11:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1891_$","typeString":"type(library StorageSlot)"}},"id":1434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6000:14:10","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":1857,"src":"5988:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$1837_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":1436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5988:40:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1837_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":1437,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6029:5:10","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1836,"src":"5988:46:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1438,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1409,"src":"6037:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5988:58:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1440,"nodeType":"ExpressionStatement","src":"5988:58:10"}]},"documentation":{"id":1407,"nodeType":"StructuredDocumentation","src":"5606:71:10","text":" @dev Stores a new beacon in the EIP1967 beacon slot."},"id":1442,"implemented":true,"kind":"function","modifiers":[],"name":"_setBeacon","nameLocation":"5691:10:10","nodeType":"FunctionDefinition","parameters":{"id":1410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1409,"mutability":"mutable","name":"newBeacon","nameLocation":"5710:9:10","nodeType":"VariableDeclaration","scope":1442,"src":"5702:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1408,"name":"address","nodeType":"ElementaryTypeName","src":"5702:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5701:19:10"},"returnParameters":{"id":1411,"nodeType":"ParameterList","parameters":[],"src":"5729:0:10"},"scope":1481,"src":"5682:371:10","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1479,"nodeType":"Block","src":"6482:217:10","statements":[{"expression":{"arguments":[{"id":1453,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"6503:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1452,"name":"_setBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"6492:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6492:21:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1455,"nodeType":"ExpressionStatement","src":"6492:21:10"},{"eventCall":{"arguments":[{"id":1457,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"6543:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1456,"name":"BeaconUpgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1393,"src":"6528:14:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6528:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1459,"nodeType":"EmitStatement","src":"6523:30:10"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1460,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"6567:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6572:6:10","memberName":"length","nodeType":"MemberAccess","src":"6567:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6581:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6567:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":1464,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1449,"src":"6586:9:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6567:28:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1478,"nodeType":"IfStatement","src":"6563:130:10","trueBody":{"id":1477,"nodeType":"Block","src":"6597:96:10","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1470,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"6648:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1469,"name":"IBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1543,"src":"6640:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeacon_$1543_$","typeString":"type(contract IBeacon)"}},"id":1471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6640:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeacon_$1543","typeString":"contract IBeacon"}},"id":1472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6659:14:10","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":1542,"src":"6640:33:10","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":1473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6640:35:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1474,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"6677:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1466,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"6611:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$3398_$","typeString":"type(library Address)"}},"id":1468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6619:20:10","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":3332,"src":"6611:28:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":1475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6611:71:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1476,"nodeType":"ExpressionStatement","src":"6611:71:10"}]}}]},"documentation":{"id":1443,"nodeType":"StructuredDocumentation","src":"6059:292:10","text":" @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n Emits a {BeaconUpgraded} event."},"id":1480,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeBeaconToAndCall","nameLocation":"6365:23:10","nodeType":"FunctionDefinition","parameters":{"id":1450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1445,"mutability":"mutable","name":"newBeacon","nameLocation":"6406:9:10","nodeType":"VariableDeclaration","scope":1480,"src":"6398:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1444,"name":"address","nodeType":"ElementaryTypeName","src":"6398:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1447,"mutability":"mutable","name":"data","nameLocation":"6438:4:10","nodeType":"VariableDeclaration","scope":1480,"src":"6425:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1446,"name":"bytes","nodeType":"ElementaryTypeName","src":"6425:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1449,"mutability":"mutable","name":"forceCall","nameLocation":"6457:9:10","nodeType":"VariableDeclaration","scope":1480,"src":"6452:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1448,"name":"bool","nodeType":"ElementaryTypeName","src":"6452:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6388:84:10"},"returnParameters":{"id":1451,"nodeType":"ParameterList","parameters":[],"src":"6482:0:10"},"scope":1481,"src":"6356:343:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1482,"src":"437:6264:10","usedErrors":[]}],"src":"33:6669:10"},"id":10},"@openzeppelin/contracts/proxy/Proxy.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/Proxy.sol","exportedSymbols":{"Proxy":[1533]},"id":1534,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1483,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:11"},{"abstract":true,"baseContracts":[],"canonicalName":"Proxy","contractDependencies":[],"contractKind":"contract","documentation":{"id":1484,"nodeType":"StructuredDocumentation","src":"58:598:11","text":" @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n be specified by overriding the virtual {_implementation} function.\n Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n different contract through the {_delegate} function.\n The success and return data of the delegated call will be returned back to the caller of the proxy."},"fullyImplemented":false,"id":1533,"linearizedBaseContracts":[1533],"name":"Proxy","nameLocation":"675:5:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":1491,"nodeType":"Block","src":"943:835:11","statements":[{"AST":{"nodeType":"YulBlock","src":"962:810:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1215:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1218:1:11","type":"","value":"0"},{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"1221:12:11"},"nodeType":"YulFunctionCall","src":"1221:14:11"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"1202:12:11"},"nodeType":"YulFunctionCall","src":"1202:34:11"},"nodeType":"YulExpressionStatement","src":"1202:34:11"},{"nodeType":"YulVariableDeclaration","src":"1363:74:11","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"1390:3:11"},"nodeType":"YulFunctionCall","src":"1390:5:11"},{"name":"implementation","nodeType":"YulIdentifier","src":"1397:14:11"},{"kind":"number","nodeType":"YulLiteral","src":"1413:1:11","type":"","value":"0"},{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"1416:12:11"},"nodeType":"YulFunctionCall","src":"1416:14:11"},{"kind":"number","nodeType":"YulLiteral","src":"1432:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1435:1:11","type":"","value":"0"}],"functionName":{"name":"delegatecall","nodeType":"YulIdentifier","src":"1377:12:11"},"nodeType":"YulFunctionCall","src":"1377:60:11"},"variables":[{"name":"result","nodeType":"YulTypedName","src":"1367:6:11","type":""}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1505:1:11","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1508:1:11","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"1511:14:11"},"nodeType":"YulFunctionCall","src":"1511:16:11"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"1490:14:11"},"nodeType":"YulFunctionCall","src":"1490:38:11"},"nodeType":"YulExpressionStatement","src":"1490:38:11"},{"cases":[{"body":{"nodeType":"YulBlock","src":"1623:59:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1648:1:11","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"1651:14:11"},"nodeType":"YulFunctionCall","src":"1651:16:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1641:6:11"},"nodeType":"YulFunctionCall","src":"1641:27:11"},"nodeType":"YulExpressionStatement","src":"1641:27:11"}]},"nodeType":"YulCase","src":"1616:66:11","value":{"kind":"number","nodeType":"YulLiteral","src":"1621:1:11","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"1703:59:11","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1728:1:11","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"1731:14:11"},"nodeType":"YulFunctionCall","src":"1731:16:11"}],"functionName":{"name":"return","nodeType":"YulIdentifier","src":"1721:6:11"},"nodeType":"YulFunctionCall","src":"1721:27:11"},"nodeType":"YulExpressionStatement","src":"1721:27:11"}]},"nodeType":"YulCase","src":"1695:67:11","value":"default"}],"expression":{"name":"result","nodeType":"YulIdentifier","src":"1549:6:11"},"nodeType":"YulSwitch","src":"1542:220:11"}]},"evmVersion":"paris","externalReferences":[{"declaration":1487,"isOffset":false,"isSlot":false,"src":"1397:14:11","valueSize":1}],"id":1490,"nodeType":"InlineAssembly","src":"953:819:11"}]},"documentation":{"id":1485,"nodeType":"StructuredDocumentation","src":"687:191:11","text":" @dev Delegates the current call to `implementation`.\n This function does not return to its internall call site, it will return directly to the external caller."},"id":1492,"implemented":true,"kind":"function","modifiers":[],"name":"_delegate","nameLocation":"892:9:11","nodeType":"FunctionDefinition","parameters":{"id":1488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1487,"mutability":"mutable","name":"implementation","nameLocation":"910:14:11","nodeType":"VariableDeclaration","scope":1492,"src":"902:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1486,"name":"address","nodeType":"ElementaryTypeName","src":"902:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"901:24:11"},"returnParameters":{"id":1489,"nodeType":"ParameterList","parameters":[],"src":"943:0:11"},"scope":1533,"src":"883:895:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"documentation":{"id":1493,"nodeType":"StructuredDocumentation","src":"1784:172:11","text":" @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n and {_fallback} should delegate."},"id":1498,"implemented":false,"kind":"function","modifiers":[],"name":"_implementation","nameLocation":"1970:15:11","nodeType":"FunctionDefinition","parameters":{"id":1494,"nodeType":"ParameterList","parameters":[],"src":"1985:2:11"},"returnParameters":{"id":1497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1496,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1498,"src":"2019:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1495,"name":"address","nodeType":"ElementaryTypeName","src":"2019:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2018:9:11"},"scope":1533,"src":"1961:67:11","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1510,"nodeType":"Block","src":"2295:72:11","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1502,"name":"_beforeFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"2305:15:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2305:17:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1504,"nodeType":"ExpressionStatement","src":"2305:17:11"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1506,"name":"_implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"2342:15:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2342:17:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1505,"name":"_delegate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"2332:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2332:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1509,"nodeType":"ExpressionStatement","src":"2332:28:11"}]},"documentation":{"id":1499,"nodeType":"StructuredDocumentation","src":"2034:218:11","text":" @dev Delegates the current call to the address returned by `_implementation()`.\n This function does not return to its internall call site, it will return directly to the external caller."},"id":1511,"implemented":true,"kind":"function","modifiers":[],"name":"_fallback","nameLocation":"2266:9:11","nodeType":"FunctionDefinition","parameters":{"id":1500,"nodeType":"ParameterList","parameters":[],"src":"2275:2:11"},"returnParameters":{"id":1501,"nodeType":"ParameterList","parameters":[],"src":"2295:0:11"},"scope":1533,"src":"2257:110:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1518,"nodeType":"Block","src":"2600:28:11","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1515,"name":"_fallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1511,"src":"2610:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2610:11:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1517,"nodeType":"ExpressionStatement","src":"2610:11:11"}]},"documentation":{"id":1512,"nodeType":"StructuredDocumentation","src":"2373:186:11","text":" @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n function in the contract matches the call data."},"id":1519,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1513,"nodeType":"ParameterList","parameters":[],"src":"2572:2:11"},"returnParameters":{"id":1514,"nodeType":"ParameterList","parameters":[],"src":"2600:0:11"},"scope":1533,"src":"2564:64:11","stateMutability":"payable","virtual":true,"visibility":"external"},{"body":{"id":1526,"nodeType":"Block","src":"2823:28:11","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1523,"name":"_fallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1511,"src":"2833:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2833:11:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1525,"nodeType":"ExpressionStatement","src":"2833:11:11"}]},"documentation":{"id":1520,"nodeType":"StructuredDocumentation","src":"2634:149:11","text":" @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n is empty."},"id":1527,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1521,"nodeType":"ParameterList","parameters":[],"src":"2795:2:11"},"returnParameters":{"id":1522,"nodeType":"ParameterList","parameters":[],"src":"2823:0:11"},"scope":1533,"src":"2788:63:11","stateMutability":"payable","virtual":true,"visibility":"external"},{"body":{"id":1531,"nodeType":"Block","src":"3176:2:11","statements":[]},"documentation":{"id":1528,"nodeType":"StructuredDocumentation","src":"2857:270:11","text":" @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n call, or as part of the Solidity `fallback` or `receive` functions.\n If overriden should call `super._beforeFallback()`."},"id":1532,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeFallback","nameLocation":"3141:15:11","nodeType":"FunctionDefinition","parameters":{"id":1529,"nodeType":"ParameterList","parameters":[],"src":"3156:2:11"},"returnParameters":{"id":1530,"nodeType":"ParameterList","parameters":[],"src":"3176:0:11"},"scope":1533,"src":"3132:46:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1534,"src":"657:2523:11","usedErrors":[]}],"src":"33:3148:11"},"id":11},"@openzeppelin/contracts/proxy/beacon/IBeacon.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/beacon/IBeacon.sol","exportedSymbols":{"IBeacon":[1543]},"id":1544,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1535,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"IBeacon","contractDependencies":[],"contractKind":"interface","documentation":{"id":1536,"nodeType":"StructuredDocumentation","src":"58:79:12","text":" @dev This is the interface that {BeaconProxy} expects of its beacon."},"fullyImplemented":false,"id":1543,"linearizedBaseContracts":[1543],"name":"IBeacon","nameLocation":"148:7:12","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1537,"nodeType":"StructuredDocumentation","src":"162:162:12","text":" @dev Must return an address that can be used as a delegate call target.\n {BeaconProxy} will check that this address is a contract."},"functionSelector":"5c60da1b","id":1542,"implemented":false,"kind":"function","modifiers":[],"name":"implementation","nameLocation":"338:14:12","nodeType":"FunctionDefinition","parameters":{"id":1538,"nodeType":"ParameterList","parameters":[],"src":"352:2:12"},"returnParameters":{"id":1541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1540,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1542,"src":"378:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1539,"name":"address","nodeType":"ElementaryTypeName","src":"378:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"377:9:12"},"scope":1543,"src":"329:58:12","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1544,"src":"138:251:12","usedErrors":[]}],"src":"33:357:12"},"id":12},"@openzeppelin/contracts/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/utils/Initializable.sol","exportedSymbols":{"Initializable":[1589]},"id":1590,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1545,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:13"},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1546,"nodeType":"StructuredDocumentation","src":"58:934:13","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity."},"fullyImplemented":true,"id":1589,"linearizedBaseContracts":[1589],"name":"Initializable","nameLocation":"1011:13:13","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":1547,"nodeType":"StructuredDocumentation","src":"1031:73:13","text":" @dev Indicates that the contract has been initialized."},"id":1549,"mutability":"mutable","name":"_initialized","nameLocation":"1122:12:13","nodeType":"VariableDeclaration","scope":1589,"src":"1109:25:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1548,"name":"bool","nodeType":"ElementaryTypeName","src":"1109:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"constant":false,"documentation":{"id":1550,"nodeType":"StructuredDocumentation","src":"1141:91:13","text":" @dev Indicates that the contract is in the process of being initialized."},"id":1552,"mutability":"mutable","name":"_initializing","nameLocation":"1250:13:13","nodeType":"VariableDeclaration","scope":1589,"src":"1237:26:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1551,"name":"bool","nodeType":"ElementaryTypeName","src":"1237:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"body":{"id":1587,"nodeType":"Block","src":"1391:348:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1556,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1552,"src":"1409:13:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":1558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1426:13:13","subExpression":{"id":1557,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1549,"src":"1427:12:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1409:30:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":1560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1441:48:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":1555,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1401:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1401:89:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1562,"nodeType":"ExpressionStatement","src":"1401:89:13"},{"assignments":[1564],"declarations":[{"constant":false,"id":1564,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"1506:14:13","nodeType":"VariableDeclaration","scope":1587,"src":"1501:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1563,"name":"bool","nodeType":"ElementaryTypeName","src":"1501:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1567,"initialValue":{"id":1566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1523:14:13","subExpression":{"id":1565,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1552,"src":"1524:13:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"1501:36:13"},{"condition":{"id":1568,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1564,"src":"1551:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1578,"nodeType":"IfStatement","src":"1547:98:13","trueBody":{"id":1577,"nodeType":"Block","src":"1567:78:13","statements":[{"expression":{"id":1571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1569,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1552,"src":"1581:13:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1597:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1581:20:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1572,"nodeType":"ExpressionStatement","src":"1581:20:13"},{"expression":{"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1573,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1549,"src":"1615:12:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1630:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1615:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1576,"nodeType":"ExpressionStatement","src":"1615:19:13"}]}},{"id":1579,"nodeType":"PlaceholderStatement","src":"1655:1:13"},{"condition":{"id":1580,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1564,"src":"1671:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1586,"nodeType":"IfStatement","src":"1667:66:13","trueBody":{"id":1585,"nodeType":"Block","src":"1687:46:13","statements":[{"expression":{"id":1583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1581,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1552,"src":"1701:13:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1717:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1701:21:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1584,"nodeType":"ExpressionStatement","src":"1701:21:13"}]}}]},"documentation":{"id":1553,"nodeType":"StructuredDocumentation","src":"1270:93:13","text":" @dev Modifier to protect an initializer function from being invoked twice."},"id":1588,"name":"initializer","nameLocation":"1377:11:13","nodeType":"ModifierDefinition","parameters":{"id":1554,"nodeType":"ParameterList","parameters":[],"src":"1388:2:13"},"src":"1368:371:13","virtual":false,"visibility":"internal"}],"scope":1590,"src":"993:748:13","usedErrors":[]}],"src":"33:1709:13"},"id":13},"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol","exportedSymbols":{"Address":[3398],"ERC1967Upgrade":[1481],"IBeacon":[1543],"StorageSlot":[1891],"UUPSUpgradeable":[1641]},"id":1642,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1591,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:14"},{"absolutePath":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol","file":"../ERC1967/ERC1967Upgrade.sol","id":1592,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1642,"sourceUnit":1482,"src":"58:39:14","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1594,"name":"ERC1967Upgrade","nameLocations":["785:14:14"],"nodeType":"IdentifierPath","referencedDeclaration":1481,"src":"785:14:14"},"id":1595,"nodeType":"InheritanceSpecifier","src":"785:14:14"}],"canonicalName":"UUPSUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1593,"nodeType":"StructuredDocumentation","src":"99:648:14","text":" @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n `UUPSUpgradeable` with a custom implementation of upgrades.\n The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n _Available since v4.1._"},"fullyImplemented":false,"id":1641,"linearizedBaseContracts":[1641,1481],"name":"UUPSUpgradeable","nameLocation":"766:15:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":1614,"nodeType":"Block","src":"1043:123:14","statements":[{"expression":{"arguments":[{"id":1602,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"1071:17:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1601,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1640,"src":"1053:17:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1053:36:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1604,"nodeType":"ExpressionStatement","src":"1053:36:14"},{"expression":{"arguments":[{"id":1606,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"1123:17:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"","id":1609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1148:2:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1608,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1142:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1607,"name":"bytes","nodeType":"ElementaryTypeName","src":"1142:5:14","typeDescriptions":{}}},"id":1610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1142:9:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":1611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1153:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1605,"name":"_upgradeToAndCallSecure","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1317,"src":"1099:23:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":1612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1099:60:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1613,"nodeType":"ExpressionStatement","src":"1099:60:14"}]},"documentation":{"id":1596,"nodeType":"StructuredDocumentation","src":"806:169:14","text":" @dev Upgrade the implementation of the proxy to `newImplementation`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event."},"functionSelector":"3659cfe6","id":1615,"implemented":true,"kind":"function","modifiers":[],"name":"upgradeTo","nameLocation":"989:9:14","nodeType":"FunctionDefinition","parameters":{"id":1599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1598,"mutability":"mutable","name":"newImplementation","nameLocation":"1007:17:14","nodeType":"VariableDeclaration","scope":1615,"src":"999:25:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1597,"name":"address","nodeType":"ElementaryTypeName","src":"999:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"998:27:14"},"returnParameters":{"id":1600,"nodeType":"ParameterList","parameters":[],"src":"1043:0:14"},"scope":1641,"src":"980:186:14","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":1633,"nodeType":"Block","src":"1512:117:14","statements":[{"expression":{"arguments":[{"id":1624,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"1540:17:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1623,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1640,"src":"1522:17:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1522:36:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1626,"nodeType":"ExpressionStatement","src":"1522:36:14"},{"expression":{"arguments":[{"id":1628,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"1592:17:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1629,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1620,"src":"1611:4:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"74727565","id":1630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1617:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1627,"name":"_upgradeToAndCallSecure","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1317,"src":"1568:23:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":1631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1568:54:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1632,"nodeType":"ExpressionStatement","src":"1568:54:14"}]},"documentation":{"id":1616,"nodeType":"StructuredDocumentation","src":"1172:238:14","text":" @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n encoded in `data`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event."},"functionSelector":"4f1ef286","id":1634,"implemented":true,"kind":"function","modifiers":[],"name":"upgradeToAndCall","nameLocation":"1424:16:14","nodeType":"FunctionDefinition","parameters":{"id":1621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1618,"mutability":"mutable","name":"newImplementation","nameLocation":"1449:17:14","nodeType":"VariableDeclaration","scope":1634,"src":"1441:25:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1617,"name":"address","nodeType":"ElementaryTypeName","src":"1441:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1620,"mutability":"mutable","name":"data","nameLocation":"1481:4:14","nodeType":"VariableDeclaration","scope":1634,"src":"1468:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1619,"name":"bytes","nodeType":"ElementaryTypeName","src":"1468:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1440:46:14"},"returnParameters":{"id":1622,"nodeType":"ParameterList","parameters":[],"src":"1512:0:14"},"scope":1641,"src":"1415:214:14","stateMutability":"payable","virtual":true,"visibility":"external"},{"documentation":{"id":1635,"nodeType":"StructuredDocumentation","src":"1635:397:14","text":" @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n {upgradeTo} and {upgradeToAndCall}.\n Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n ```solidity\n function _authorizeUpgrade(address) internal override onlyOwner {}\n ```"},"id":1640,"implemented":false,"kind":"function","modifiers":[],"name":"_authorizeUpgrade","nameLocation":"2046:17:14","nodeType":"FunctionDefinition","parameters":{"id":1638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1637,"mutability":"mutable","name":"newImplementation","nameLocation":"2072:17:14","nodeType":"VariableDeclaration","scope":1640,"src":"2064:25:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1636,"name":"address","nodeType":"ElementaryTypeName","src":"2064:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2063:27:14"},"returnParameters":{"id":1639,"nodeType":"ParameterList","parameters":[],"src":"2107:0:14"},"scope":1641,"src":"2037:71:14","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1642,"src":"748:1362:14","usedErrors":[]}],"src":"33:2078:14"},"id":14},"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol","exportedSymbols":{"IERC1155Receiver":[1682],"IERC165":[2086]},"id":1683,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1643,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:15"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1644,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1683,"sourceUnit":2087,"src":"58:47:15","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1646,"name":"IERC165","nameLocations":["177:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":2086,"src":"177:7:15"},"id":1647,"nodeType":"InheritanceSpecifier","src":"177:7:15"}],"canonicalName":"IERC1155Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1645,"nodeType":"StructuredDocumentation","src":"107:39:15","text":" @dev _Available since v3.1._"},"fullyImplemented":false,"id":1682,"linearizedBaseContracts":[1682,2086],"name":"IERC1155Receiver","nameLocation":"157:16:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1648,"nodeType":"StructuredDocumentation","src":"191:816:15","text":"@dev Handles the receipt of a single ERC1155 token type. This function is\ncalled at the end of a `safeTransferFrom` after the balance has been updated.\nTo accept the transfer, this must return\n`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n(i.e. 0xf23a6e61, or its own function selector).\n@param operator The address which initiated the transfer (i.e. msg.sender)\n@param from The address which previously owned the token\n@param id The ID of the token being transferred\n@param value The amount of tokens being transferred\n@param data Additional data with no specified format\n@return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"},"functionSelector":"f23a6e61","id":1663,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"1021:17:15","nodeType":"FunctionDefinition","parameters":{"id":1659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1650,"mutability":"mutable","name":"operator","nameLocation":"1056:8:15","nodeType":"VariableDeclaration","scope":1663,"src":"1048:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1649,"name":"address","nodeType":"ElementaryTypeName","src":"1048:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1652,"mutability":"mutable","name":"from","nameLocation":"1082:4:15","nodeType":"VariableDeclaration","scope":1663,"src":"1074:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1651,"name":"address","nodeType":"ElementaryTypeName","src":"1074:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1654,"mutability":"mutable","name":"id","nameLocation":"1104:2:15","nodeType":"VariableDeclaration","scope":1663,"src":"1096:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1653,"name":"uint256","nodeType":"ElementaryTypeName","src":"1096:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1656,"mutability":"mutable","name":"value","nameLocation":"1124:5:15","nodeType":"VariableDeclaration","scope":1663,"src":"1116:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1655,"name":"uint256","nodeType":"ElementaryTypeName","src":"1116:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1658,"mutability":"mutable","name":"data","nameLocation":"1154:4:15","nodeType":"VariableDeclaration","scope":1663,"src":"1139:19:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1657,"name":"bytes","nodeType":"ElementaryTypeName","src":"1139:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1038:126:15"},"returnParameters":{"id":1662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1661,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1663,"src":"1183:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1660,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1183:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1182:8:15"},"scope":1682,"src":"1012:179:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1664,"nodeType":"StructuredDocumentation","src":"1197:977:15","text":"@dev Handles the receipt of a multiple ERC1155 token types. This function\nis called at the end of a `safeBatchTransferFrom` after the balances have\nbeen updated. To accept the transfer(s), this must return\n`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n(i.e. 0xbc197c81, or its own function selector).\n@param operator The address which initiated the batch transfer (i.e. msg.sender)\n@param from The address which previously owned the token\n@param ids An array containing ids of each token being transferred (order and length must match values array)\n@param values An array containing amounts of each token being transferred (order and length must match ids array)\n@param data Additional data with no specified format\n@return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"},"functionSelector":"bc197c81","id":1681,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"2188:22:15","nodeType":"FunctionDefinition","parameters":{"id":1677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1666,"mutability":"mutable","name":"operator","nameLocation":"2228:8:15","nodeType":"VariableDeclaration","scope":1681,"src":"2220:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1665,"name":"address","nodeType":"ElementaryTypeName","src":"2220:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1668,"mutability":"mutable","name":"from","nameLocation":"2254:4:15","nodeType":"VariableDeclaration","scope":1681,"src":"2246:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1667,"name":"address","nodeType":"ElementaryTypeName","src":"2246:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1671,"mutability":"mutable","name":"ids","nameLocation":"2287:3:15","nodeType":"VariableDeclaration","scope":1681,"src":"2268:22:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1669,"name":"uint256","nodeType":"ElementaryTypeName","src":"2268:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1670,"nodeType":"ArrayTypeName","src":"2268:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1674,"mutability":"mutable","name":"values","nameLocation":"2319:6:15","nodeType":"VariableDeclaration","scope":1681,"src":"2300:25:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1672,"name":"uint256","nodeType":"ElementaryTypeName","src":"2300:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1673,"nodeType":"ArrayTypeName","src":"2300:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1676,"mutability":"mutable","name":"data","nameLocation":"2350:4:15","nodeType":"VariableDeclaration","scope":1681,"src":"2335:19:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1675,"name":"bytes","nodeType":"ElementaryTypeName","src":"2335:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2210:150:15"},"returnParameters":{"id":1680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1679,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1681,"src":"2379:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1678,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2379:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2378:8:15"},"scope":1682,"src":"2179:208:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1683,"src":"147:2242:15","usedErrors":[]}],"src":"33:2357:15"},"id":15},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[1700]},"id":1701,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1684,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1685,"nodeType":"StructuredDocumentation","src":"58:152:16","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":1700,"linearizedBaseContracts":[1700],"name":"IERC721Receiver","nameLocation":"221:15:16","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1686,"nodeType":"StructuredDocumentation","src":"243:485:16","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`."},"functionSelector":"150b7a02","id":1699,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"742:16:16","nodeType":"FunctionDefinition","parameters":{"id":1695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1688,"mutability":"mutable","name":"operator","nameLocation":"776:8:16","nodeType":"VariableDeclaration","scope":1699,"src":"768:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1687,"name":"address","nodeType":"ElementaryTypeName","src":"768:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1690,"mutability":"mutable","name":"from","nameLocation":"802:4:16","nodeType":"VariableDeclaration","scope":1699,"src":"794:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1689,"name":"address","nodeType":"ElementaryTypeName","src":"794:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1692,"mutability":"mutable","name":"tokenId","nameLocation":"824:7:16","nodeType":"VariableDeclaration","scope":1699,"src":"816:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1691,"name":"uint256","nodeType":"ElementaryTypeName","src":"816:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1694,"mutability":"mutable","name":"data","nameLocation":"856:4:16","nodeType":"VariableDeclaration","scope":1699,"src":"841:19:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1693,"name":"bytes","nodeType":"ElementaryTypeName","src":"841:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"758:108:16"},"returnParameters":{"id":1698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1697,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1699,"src":"885:6:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1696,"name":"bytes4","nodeType":"ElementaryTypeName","src":"885:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"884:8:16"},"scope":1700,"src":"733:160:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1701,"src":"211:684:16","usedErrors":[]}],"src":"33:863:16"},"id":16},"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol","exportedSymbols":{"IERC777Recipient":[1720]},"id":1721,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1702,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:17"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC777Recipient","contractDependencies":[],"contractKind":"interface","documentation":{"id":1703,"nodeType":"StructuredDocumentation","src":"58:406:17","text":" @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\n Accounts can be notified of {IERC777} tokens being sent to them by having a\n contract implement this interface (contract holders can be their own\n implementer) and registering it on the\n https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n See {IERC1820Registry} and {ERC1820Implementer}."},"fullyImplemented":false,"id":1720,"linearizedBaseContracts":[1720],"name":"IERC777Recipient","nameLocation":"475:16:17","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1704,"nodeType":"StructuredDocumentation","src":"498:474:17","text":" @dev Called by an {IERC777} token contract whenever tokens are being\n moved or created into a registered account (`to`). The type of operation\n is conveyed by `from` being the zero address or not.\n This call occurs _after_ the token contract's state is updated, so\n {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n This function may revert to prevent the operation from being executed."},"functionSelector":"0023de29","id":1719,"implemented":false,"kind":"function","modifiers":[],"name":"tokensReceived","nameLocation":"986:14:17","nodeType":"FunctionDefinition","parameters":{"id":1717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1706,"mutability":"mutable","name":"operator","nameLocation":"1018:8:17","nodeType":"VariableDeclaration","scope":1719,"src":"1010:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1705,"name":"address","nodeType":"ElementaryTypeName","src":"1010:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1708,"mutability":"mutable","name":"from","nameLocation":"1044:4:17","nodeType":"VariableDeclaration","scope":1719,"src":"1036:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1707,"name":"address","nodeType":"ElementaryTypeName","src":"1036:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1710,"mutability":"mutable","name":"to","nameLocation":"1066:2:17","nodeType":"VariableDeclaration","scope":1719,"src":"1058:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1709,"name":"address","nodeType":"ElementaryTypeName","src":"1058:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1712,"mutability":"mutable","name":"amount","nameLocation":"1086:6:17","nodeType":"VariableDeclaration","scope":1719,"src":"1078:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1711,"name":"uint256","nodeType":"ElementaryTypeName","src":"1078:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1714,"mutability":"mutable","name":"userData","nameLocation":"1117:8:17","nodeType":"VariableDeclaration","scope":1719,"src":"1102:23:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1713,"name":"bytes","nodeType":"ElementaryTypeName","src":"1102:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1716,"mutability":"mutable","name":"operatorData","nameLocation":"1150:12:17","nodeType":"VariableDeclaration","scope":1719,"src":"1135:27:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1715,"name":"bytes","nodeType":"ElementaryTypeName","src":"1135:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1000:168:17"},"returnParameters":{"id":1718,"nodeType":"ParameterList","parameters":[],"src":"1177:0:17"},"scope":1720,"src":"977:201:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1721,"src":"465:715:17","usedErrors":[]}],"src":"33:1148:17"},"id":17},"@openzeppelin/contracts/utils/Create2.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Create2.sol","exportedSymbols":{"Create2":[1831]},"id":1832,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1722,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:18"},{"abstract":false,"baseContracts":[],"canonicalName":"Create2","contractDependencies":[],"contractKind":"library","documentation":{"id":1723,"nodeType":"StructuredDocumentation","src":"58:367:18","text":" @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n `CREATE2` can be used to compute in advance the address where a smart\n contract will be deployed, which allows for interesting new mechanisms known\n as 'counterfactual interactions'.\n See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n information."},"fullyImplemented":true,"id":1831,"linearizedBaseContracts":[1831],"name":"Create2","nameLocation":"434:7:18","nodeType":"ContractDefinition","nodes":[{"body":{"id":1770,"nodeType":"Block","src":"1139:383:18","statements":[{"assignments":[1736],"declarations":[{"constant":false,"id":1736,"mutability":"mutable","name":"addr","nameLocation":"1157:4:18","nodeType":"VariableDeclaration","scope":1770,"src":"1149:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1735,"name":"address","nodeType":"ElementaryTypeName","src":"1149:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1737,"nodeType":"VariableDeclarationStatement","src":"1149:12:18"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1741,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1187:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_Create2_$1831","typeString":"library Create2"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Create2_$1831","typeString":"library Create2"}],"id":1740,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1179:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1739,"name":"address","nodeType":"ElementaryTypeName","src":"1179:7:18","typeDescriptions":{}}},"id":1742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1179:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1193:7:18","memberName":"balance","nodeType":"MemberAccess","src":"1179:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1744,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1726,"src":"1204:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1179:31:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"437265617465323a20696e73756666696369656e742062616c616e6365","id":1746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1212:31:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_f94f9c62541b73155a9def26a7988ac5579c2c6b698df8f608ced5572b7d72ca","typeString":"literal_string \"Create2: insufficient balance\""},"value":"Create2: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f94f9c62541b73155a9def26a7988ac5579c2c6b698df8f608ced5572b7d72ca","typeString":"literal_string \"Create2: insufficient balance\""}],"id":1738,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1171:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1171:73:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1748,"nodeType":"ExpressionStatement","src":"1171:73:18"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1750,"name":"bytecode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1730,"src":"1262:8:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1271:6:18","memberName":"length","nodeType":"MemberAccess","src":"1262:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1281:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1262:20:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"437265617465323a2062797465636f6465206c656e677468206973207a65726f","id":1754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1284:34:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_124767115c09b0dd37c31c42ddb030d84459c933a30879cc32c4c922ae5928f0","typeString":"literal_string \"Create2: bytecode length is zero\""},"value":"Create2: bytecode length is zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_124767115c09b0dd37c31c42ddb030d84459c933a30879cc32c4c922ae5928f0","typeString":"literal_string \"Create2: bytecode length is zero\""}],"id":1749,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1254:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1254:65:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1756,"nodeType":"ExpressionStatement","src":"1254:65:18"},{"AST":{"nodeType":"YulBlock","src":"1338:91:18","statements":[{"nodeType":"YulAssignment","src":"1352:67:18","value":{"arguments":[{"name":"amount","nodeType":"YulIdentifier","src":"1368:6:18"},{"arguments":[{"name":"bytecode","nodeType":"YulIdentifier","src":"1380:8:18"},{"kind":"number","nodeType":"YulLiteral","src":"1390:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1376:3:18"},"nodeType":"YulFunctionCall","src":"1376:19:18"},{"arguments":[{"name":"bytecode","nodeType":"YulIdentifier","src":"1403:8:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1397:5:18"},"nodeType":"YulFunctionCall","src":"1397:15:18"},{"name":"salt","nodeType":"YulIdentifier","src":"1414:4:18"}],"functionName":{"name":"create2","nodeType":"YulIdentifier","src":"1360:7:18"},"nodeType":"YulFunctionCall","src":"1360:59:18"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"1352:4:18"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1736,"isOffset":false,"isSlot":false,"src":"1352:4:18","valueSize":1},{"declaration":1726,"isOffset":false,"isSlot":false,"src":"1368:6:18","valueSize":1},{"declaration":1730,"isOffset":false,"isSlot":false,"src":"1380:8:18","valueSize":1},{"declaration":1730,"isOffset":false,"isSlot":false,"src":"1403:8:18","valueSize":1},{"declaration":1728,"isOffset":false,"isSlot":false,"src":"1414:4:18","valueSize":1}],"id":1757,"nodeType":"InlineAssembly","src":"1329:100:18"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1759,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"1446:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1462:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1761,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1454:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1760,"name":"address","nodeType":"ElementaryTypeName","src":"1454:7:18","typeDescriptions":{}}},"id":1763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1454:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1446:18:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"437265617465323a204661696c6564206f6e206465706c6f79","id":1765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1466:27:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_87142438d464a3cd804331cca8480b31569380ef25d1f39b80404975699f0676","typeString":"literal_string \"Create2: Failed on deploy\""},"value":"Create2: Failed on deploy"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_87142438d464a3cd804331cca8480b31569380ef25d1f39b80404975699f0676","typeString":"literal_string \"Create2: Failed on deploy\""}],"id":1758,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1438:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1438:56:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1767,"nodeType":"ExpressionStatement","src":"1438:56:18"},{"expression":{"id":1768,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"1511:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1734,"id":1769,"nodeType":"Return","src":"1504:11:18"}]},"documentation":{"id":1724,"nodeType":"StructuredDocumentation","src":"448:560:18","text":" @dev Deploys a contract using `CREATE2`. The address where the contract\n will be deployed can be known in advance via {computeAddress}.\n The bytecode for a contract can be obtained from Solidity with\n `type(contractName).creationCode`.\n Requirements:\n - `bytecode` must not be empty.\n - `salt` must have not been used for `bytecode` already.\n - the factory must have a balance of at least `amount`.\n - if `amount` is non-zero, `bytecode` must have a `payable` constructor."},"id":1771,"implemented":true,"kind":"function","modifiers":[],"name":"deploy","nameLocation":"1022:6:18","nodeType":"FunctionDefinition","parameters":{"id":1731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1726,"mutability":"mutable","name":"amount","nameLocation":"1046:6:18","nodeType":"VariableDeclaration","scope":1771,"src":"1038:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1725,"name":"uint256","nodeType":"ElementaryTypeName","src":"1038:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1728,"mutability":"mutable","name":"salt","nameLocation":"1070:4:18","nodeType":"VariableDeclaration","scope":1771,"src":"1062:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1727,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1062:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1730,"mutability":"mutable","name":"bytecode","nameLocation":"1097:8:18","nodeType":"VariableDeclaration","scope":1771,"src":"1084:21:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1729,"name":"bytes","nodeType":"ElementaryTypeName","src":"1084:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1028:83:18"},"returnParameters":{"id":1734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1733,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1771,"src":"1130:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1732,"name":"address","nodeType":"ElementaryTypeName","src":"1130:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1129:9:18"},"scope":1831,"src":"1013:509:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1790,"nodeType":"Block","src":"1818:73:18","statements":[{"expression":{"arguments":[{"id":1782,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"1850:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1783,"name":"bytecodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1776,"src":"1856:12:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":1786,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1878:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_Create2_$1831","typeString":"library Create2"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Create2_$1831","typeString":"library Create2"}],"id":1785,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1870:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1784,"name":"address","nodeType":"ElementaryTypeName","src":"1870:7:18","typeDescriptions":{}}},"id":1787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1870:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1781,"name":"computeAddress","nodeType":"Identifier","overloadedDeclarations":[1791,1830],"referencedDeclaration":1830,"src":"1835:14:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_address_$returns$_t_address_$","typeString":"function (bytes32,bytes32,address) pure returns (address)"}},"id":1788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1835:49:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1780,"id":1789,"nodeType":"Return","src":"1828:56:18"}]},"documentation":{"id":1772,"nodeType":"StructuredDocumentation","src":"1528:193:18","text":" @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n `bytecodeHash` or `salt` will result in a new destination address."},"id":1791,"implemented":true,"kind":"function","modifiers":[],"name":"computeAddress","nameLocation":"1735:14:18","nodeType":"FunctionDefinition","parameters":{"id":1777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1774,"mutability":"mutable","name":"salt","nameLocation":"1758:4:18","nodeType":"VariableDeclaration","scope":1791,"src":"1750:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1773,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1750:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1776,"mutability":"mutable","name":"bytecodeHash","nameLocation":"1772:12:18","nodeType":"VariableDeclaration","scope":1791,"src":"1764:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1775,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1764:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1749:36:18"},"returnParameters":{"id":1780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1779,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1791,"src":"1809:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1778,"name":"address","nodeType":"ElementaryTypeName","src":"1809:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1808:9:18"},"scope":1831,"src":"1726:165:18","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1829,"nodeType":"Block","src":"2274:153:18","statements":[{"assignments":[1804],"declarations":[{"constant":false,"id":1804,"mutability":"mutable","name":"_data","nameLocation":"2292:5:18","nodeType":"VariableDeclaration","scope":1829,"src":"2284:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1803,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2284:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1817,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30786666","id":1810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2334:4:18","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"}],"id":1809,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2327:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":1808,"name":"bytes1","nodeType":"ElementaryTypeName","src":"2327:6:18","typeDescriptions":{}}},"id":1811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2327:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},{"id":1812,"name":"deployer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1798,"src":"2341:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1813,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1794,"src":"2351:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1814,"name":"bytecodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1796,"src":"2357:12:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1806,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2310:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1807,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2314:12:18","memberName":"encodePacked","nodeType":"MemberAccess","src":"2310:16:18","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2310:60:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1805,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2300:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1816,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2300:71:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2284:87:18"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1824,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1804,"src":"2412:5:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1823,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2404:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1822,"name":"uint256","nodeType":"ElementaryTypeName","src":"2404:7:18","typeDescriptions":{}}},"id":1825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2404:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1821,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2396:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1820,"name":"uint160","nodeType":"ElementaryTypeName","src":"2396:7:18","typeDescriptions":{}}},"id":1826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2396:23:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1819,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2388:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1818,"name":"address","nodeType":"ElementaryTypeName","src":"2388:7:18","typeDescriptions":{}}},"id":1827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2388:32:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1802,"id":1828,"nodeType":"Return","src":"2381:39:18"}]},"documentation":{"id":1792,"nodeType":"StructuredDocumentation","src":"1897:232:18","text":" @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}."},"id":1830,"implemented":true,"kind":"function","modifiers":[],"name":"computeAddress","nameLocation":"2143:14:18","nodeType":"FunctionDefinition","parameters":{"id":1799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1794,"mutability":"mutable","name":"salt","nameLocation":"2175:4:18","nodeType":"VariableDeclaration","scope":1830,"src":"2167:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1793,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2167:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1796,"mutability":"mutable","name":"bytecodeHash","nameLocation":"2197:12:18","nodeType":"VariableDeclaration","scope":1830,"src":"2189:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1795,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2189:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1798,"mutability":"mutable","name":"deployer","nameLocation":"2227:8:18","nodeType":"VariableDeclaration","scope":1830,"src":"2219:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1797,"name":"address","nodeType":"ElementaryTypeName","src":"2219:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2157:84:18"},"returnParameters":{"id":1802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1801,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1830,"src":"2265:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1800,"name":"address","nodeType":"ElementaryTypeName","src":"2265:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2264:9:18"},"scope":1831,"src":"2134:293:18","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1832,"src":"426:2003:18","usedErrors":[]}],"src":"33:2397:18"},"id":18},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[1891]},"id":1892,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1833,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:19"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":1834,"nodeType":"StructuredDocumentation","src":"58:1148:19","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._"},"fullyImplemented":true,"id":1891,"linearizedBaseContracts":[1891],"name":"StorageSlot","nameLocation":"1215:11:19","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":1837,"members":[{"constant":false,"id":1836,"mutability":"mutable","name":"value","nameLocation":"1270:5:19","nodeType":"VariableDeclaration","scope":1837,"src":"1262:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1835,"name":"address","nodeType":"ElementaryTypeName","src":"1262:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1240:11:19","nodeType":"StructDefinition","scope":1891,"src":"1233:49:19","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":1840,"members":[{"constant":false,"id":1839,"mutability":"mutable","name":"value","nameLocation":"1322:5:19","nodeType":"VariableDeclaration","scope":1840,"src":"1317:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1838,"name":"bool","nodeType":"ElementaryTypeName","src":"1317:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1295:11:19","nodeType":"StructDefinition","scope":1891,"src":"1288:46:19","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":1843,"members":[{"constant":false,"id":1842,"mutability":"mutable","name":"value","nameLocation":"1377:5:19","nodeType":"VariableDeclaration","scope":1843,"src":"1369:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1841,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1369:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1347:11:19","nodeType":"StructDefinition","scope":1891,"src":"1340:49:19","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":1846,"members":[{"constant":false,"id":1845,"mutability":"mutable","name":"value","nameLocation":"1432:5:19","nodeType":"VariableDeclaration","scope":1846,"src":"1424:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1844,"name":"uint256","nodeType":"ElementaryTypeName","src":"1424:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1402:11:19","nodeType":"StructDefinition","scope":1891,"src":"1395:49:19","visibility":"public"},{"body":{"id":1856,"nodeType":"Block","src":"1626:63:19","statements":[{"AST":{"nodeType":"YulBlock","src":"1645:38:19","statements":[{"nodeType":"YulAssignment","src":"1659:14:19","value":{"name":"slot","nodeType":"YulIdentifier","src":"1669:4:19"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"1659:6:19"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1853,"isOffset":false,"isSlot":true,"src":"1659:6:19","suffix":"slot","valueSize":1},{"declaration":1849,"isOffset":false,"isSlot":false,"src":"1669:4:19","valueSize":1}],"id":1855,"nodeType":"InlineAssembly","src":"1636:47:19"}]},"documentation":{"id":1847,"nodeType":"StructuredDocumentation","src":"1450:87:19","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":1857,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1551:14:19","nodeType":"FunctionDefinition","parameters":{"id":1850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1849,"mutability":"mutable","name":"slot","nameLocation":"1574:4:19","nodeType":"VariableDeclaration","scope":1857,"src":"1566:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1848,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1566:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1565:14:19"},"returnParameters":{"id":1854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1853,"mutability":"mutable","name":"r","nameLocation":"1623:1:19","nodeType":"VariableDeclaration","scope":1857,"src":"1603:21:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1837_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":1852,"nodeType":"UserDefinedTypeName","pathNode":{"id":1851,"name":"AddressSlot","nameLocations":["1603:11:19"],"nodeType":"IdentifierPath","referencedDeclaration":1837,"src":"1603:11:19"},"referencedDeclaration":1837,"src":"1603:11:19","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1837_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1602:23:19"},"scope":1891,"src":"1542:147:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1867,"nodeType":"Block","src":"1871:63:19","statements":[{"AST":{"nodeType":"YulBlock","src":"1890:38:19","statements":[{"nodeType":"YulAssignment","src":"1904:14:19","value":{"name":"slot","nodeType":"YulIdentifier","src":"1914:4:19"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"1904:6:19"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1864,"isOffset":false,"isSlot":true,"src":"1904:6:19","suffix":"slot","valueSize":1},{"declaration":1860,"isOffset":false,"isSlot":false,"src":"1914:4:19","valueSize":1}],"id":1866,"nodeType":"InlineAssembly","src":"1881:47:19"}]},"documentation":{"id":1858,"nodeType":"StructuredDocumentation","src":"1695:87:19","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":1868,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"1796:14:19","nodeType":"FunctionDefinition","parameters":{"id":1861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1860,"mutability":"mutable","name":"slot","nameLocation":"1819:4:19","nodeType":"VariableDeclaration","scope":1868,"src":"1811:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1859,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1811:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1810:14:19"},"returnParameters":{"id":1865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1864,"mutability":"mutable","name":"r","nameLocation":"1868:1:19","nodeType":"VariableDeclaration","scope":1868,"src":"1848:21:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1840_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":1863,"nodeType":"UserDefinedTypeName","pathNode":{"id":1862,"name":"BooleanSlot","nameLocations":["1848:11:19"],"nodeType":"IdentifierPath","referencedDeclaration":1840,"src":"1848:11:19"},"referencedDeclaration":1840,"src":"1848:11:19","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1840_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"1847:23:19"},"scope":1891,"src":"1787:147:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1878,"nodeType":"Block","src":"2116:63:19","statements":[{"AST":{"nodeType":"YulBlock","src":"2135:38:19","statements":[{"nodeType":"YulAssignment","src":"2149:14:19","value":{"name":"slot","nodeType":"YulIdentifier","src":"2159:4:19"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2149:6:19"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1875,"isOffset":false,"isSlot":true,"src":"2149:6:19","suffix":"slot","valueSize":1},{"declaration":1871,"isOffset":false,"isSlot":false,"src":"2159:4:19","valueSize":1}],"id":1877,"nodeType":"InlineAssembly","src":"2126:47:19"}]},"documentation":{"id":1869,"nodeType":"StructuredDocumentation","src":"1940:87:19","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":1879,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2041:14:19","nodeType":"FunctionDefinition","parameters":{"id":1872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1871,"mutability":"mutable","name":"slot","nameLocation":"2064:4:19","nodeType":"VariableDeclaration","scope":1879,"src":"2056:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1870,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2056:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2055:14:19"},"returnParameters":{"id":1876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1875,"mutability":"mutable","name":"r","nameLocation":"2113:1:19","nodeType":"VariableDeclaration","scope":1879,"src":"2093:21:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1843_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":1874,"nodeType":"UserDefinedTypeName","pathNode":{"id":1873,"name":"Bytes32Slot","nameLocations":["2093:11:19"],"nodeType":"IdentifierPath","referencedDeclaration":1843,"src":"2093:11:19"},"referencedDeclaration":1843,"src":"2093:11:19","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1843_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2092:23:19"},"scope":1891,"src":"2032:147:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1889,"nodeType":"Block","src":"2361:63:19","statements":[{"AST":{"nodeType":"YulBlock","src":"2380:38:19","statements":[{"nodeType":"YulAssignment","src":"2394:14:19","value":{"name":"slot","nodeType":"YulIdentifier","src":"2404:4:19"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2394:6:19"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1886,"isOffset":false,"isSlot":true,"src":"2394:6:19","suffix":"slot","valueSize":1},{"declaration":1882,"isOffset":false,"isSlot":false,"src":"2404:4:19","valueSize":1}],"id":1888,"nodeType":"InlineAssembly","src":"2371:47:19"}]},"documentation":{"id":1880,"nodeType":"StructuredDocumentation","src":"2185:87:19","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":1890,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2286:14:19","nodeType":"FunctionDefinition","parameters":{"id":1883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1882,"mutability":"mutable","name":"slot","nameLocation":"2309:4:19","nodeType":"VariableDeclaration","scope":1890,"src":"2301:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1881,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2301:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2300:14:19"},"returnParameters":{"id":1887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1886,"mutability":"mutable","name":"r","nameLocation":"2358:1:19","nodeType":"VariableDeclaration","scope":1890,"src":"2338:21:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1846_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":1885,"nodeType":"UserDefinedTypeName","pathNode":{"id":1884,"name":"Uint256Slot","nameLocations":["2338:11:19"],"nodeType":"IdentifierPath","referencedDeclaration":1846,"src":"2338:11:19"},"referencedDeclaration":1846,"src":"2338:11:19","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1846_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2337:23:19"},"scope":1891,"src":"2277:147:19","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1892,"src":"1207:1219:19","usedErrors":[]}],"src":"33:2394:19"},"id":19},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[2074]},"id":2075,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1893,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:20"},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":1894,"nodeType":"StructuredDocumentation","src":"58:205:20","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":2074,"linearizedBaseContracts":[2074],"name":"ECDSA","nameLocation":"272:5:20","nodeType":"ContractDefinition","nodes":[{"body":{"id":1951,"nodeType":"Block","src":"1375:1154:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1904,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1899,"src":"1582:9:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1592:6:20","memberName":"length","nodeType":"MemberAccess","src":"1582:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":1906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1602:2:20","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"1582:22:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1926,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1899,"src":"2061:9:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2071:6:20","memberName":"length","nodeType":"MemberAccess","src":"2061:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3634","id":1928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2081:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"2061:22:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1948,"nodeType":"Block","src":"2457:66:20","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":1945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2478:33:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":1944,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"2471:6:20","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2471:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1947,"nodeType":"ExpressionStatement","src":"2471:41:20"}]},"id":1949,"nodeType":"IfStatement","src":"2057:466:20","trueBody":{"id":1943,"nodeType":"Block","src":"2085:366:20","statements":[{"assignments":[1931],"declarations":[{"constant":false,"id":1931,"mutability":"mutable","name":"r","nameLocation":"2107:1:20","nodeType":"VariableDeclaration","scope":1943,"src":"2099:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1930,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2099:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1932,"nodeType":"VariableDeclarationStatement","src":"2099:9:20"},{"assignments":[1934],"declarations":[{"constant":false,"id":1934,"mutability":"mutable","name":"vs","nameLocation":"2130:2:20","nodeType":"VariableDeclaration","scope":1943,"src":"2122:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1933,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2122:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1935,"nodeType":"VariableDeclarationStatement","src":"2122:10:20"},{"AST":{"nodeType":"YulBlock","src":"2286:114:20","statements":[{"nodeType":"YulAssignment","src":"2304:32:20","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2319:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"2330:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2315:3:20"},"nodeType":"YulFunctionCall","src":"2315:20:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2309:5:20"},"nodeType":"YulFunctionCall","src":"2309:27:20"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2304:1:20"}]},{"nodeType":"YulAssignment","src":"2353:33:20","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2369:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"2380:4:20","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2365:3:20"},"nodeType":"YulFunctionCall","src":"2365:20:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2359:5:20"},"nodeType":"YulFunctionCall","src":"2359:27:20"},"variableNames":[{"name":"vs","nodeType":"YulIdentifier","src":"2353:2:20"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1931,"isOffset":false,"isSlot":false,"src":"2304:1:20","valueSize":1},{"declaration":1899,"isOffset":false,"isSlot":false,"src":"2319:9:20","valueSize":1},{"declaration":1899,"isOffset":false,"isSlot":false,"src":"2369:9:20","valueSize":1},{"declaration":1934,"isOffset":false,"isSlot":false,"src":"2353:2:20","valueSize":1}],"id":1936,"nodeType":"InlineAssembly","src":"2277:123:20"},{"expression":{"arguments":[{"id":1938,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1897,"src":"2428:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1939,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1931,"src":"2434:1:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1940,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1934,"src":"2437:2:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1937,"name":"recover","nodeType":"Identifier","overloadedDeclarations":[1952,1979,2036],"referencedDeclaration":1979,"src":"2420:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address)"}},"id":1941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2420:20:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1903,"id":1942,"nodeType":"Return","src":"2413:27:20"}]}},"id":1950,"nodeType":"IfStatement","src":"1578:945:20","trueBody":{"id":1925,"nodeType":"Block","src":"1606:445:20","statements":[{"assignments":[1909],"declarations":[{"constant":false,"id":1909,"mutability":"mutable","name":"r","nameLocation":"1628:1:20","nodeType":"VariableDeclaration","scope":1925,"src":"1620:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1908,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1620:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1910,"nodeType":"VariableDeclarationStatement","src":"1620:9:20"},{"assignments":[1912],"declarations":[{"constant":false,"id":1912,"mutability":"mutable","name":"s","nameLocation":"1651:1:20","nodeType":"VariableDeclaration","scope":1925,"src":"1643:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1911,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1643:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1913,"nodeType":"VariableDeclarationStatement","src":"1643:9:20"},{"assignments":[1915],"declarations":[{"constant":false,"id":1915,"mutability":"mutable","name":"v","nameLocation":"1672:1:20","nodeType":"VariableDeclaration","scope":1925,"src":"1666:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1914,"name":"uint8","nodeType":"ElementaryTypeName","src":"1666:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1916,"nodeType":"VariableDeclarationStatement","src":"1666:7:20"},{"AST":{"nodeType":"YulBlock","src":"1827:171:20","statements":[{"nodeType":"YulAssignment","src":"1845:32:20","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"1860:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"1871:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1856:3:20"},"nodeType":"YulFunctionCall","src":"1856:20:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1850:5:20"},"nodeType":"YulFunctionCall","src":"1850:27:20"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"1845:1:20"}]},{"nodeType":"YulAssignment","src":"1894:32:20","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"1909:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"1920:4:20","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1905:3:20"},"nodeType":"YulFunctionCall","src":"1905:20:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1899:5:20"},"nodeType":"YulFunctionCall","src":"1899:27:20"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"1894:1:20"}]},{"nodeType":"YulAssignment","src":"1943:41:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1953:1:20","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"1966:9:20"},{"kind":"number","nodeType":"YulLiteral","src":"1977:4:20","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1962:3:20"},"nodeType":"YulFunctionCall","src":"1962:20:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1956:5:20"},"nodeType":"YulFunctionCall","src":"1956:27:20"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1948:4:20"},"nodeType":"YulFunctionCall","src":"1948:36:20"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"1943:1:20"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1909,"isOffset":false,"isSlot":false,"src":"1845:1:20","valueSize":1},{"declaration":1912,"isOffset":false,"isSlot":false,"src":"1894:1:20","valueSize":1},{"declaration":1899,"isOffset":false,"isSlot":false,"src":"1860:9:20","valueSize":1},{"declaration":1899,"isOffset":false,"isSlot":false,"src":"1909:9:20","valueSize":1},{"declaration":1899,"isOffset":false,"isSlot":false,"src":"1966:9:20","valueSize":1},{"declaration":1915,"isOffset":false,"isSlot":false,"src":"1943:1:20","valueSize":1}],"id":1917,"nodeType":"InlineAssembly","src":"1818:180:20"},{"expression":{"arguments":[{"id":1919,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1897,"src":"2026:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1920,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"2032:1:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1921,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1909,"src":"2035:1:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1922,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"2038:1:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1918,"name":"recover","nodeType":"Identifier","overloadedDeclarations":[1952,1979,2036],"referencedDeclaration":2036,"src":"2018:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2018:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1903,"id":1924,"nodeType":"Return","src":"2011:29:20"}]}}]},"documentation":{"id":1895,"nodeType":"StructuredDocumentation","src":"284:999:20","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]"},"id":1952,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"1297:7:20","nodeType":"FunctionDefinition","parameters":{"id":1900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1897,"mutability":"mutable","name":"hash","nameLocation":"1313:4:20","nodeType":"VariableDeclaration","scope":1952,"src":"1305:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1896,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1305:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1899,"mutability":"mutable","name":"signature","nameLocation":"1332:9:20","nodeType":"VariableDeclaration","scope":1952,"src":"1319:22:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1898,"name":"bytes","nodeType":"ElementaryTypeName","src":"1319:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1304:38:20"},"returnParameters":{"id":1903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1902,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1952,"src":"1366:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1901,"name":"address","nodeType":"ElementaryTypeName","src":"1366:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1365:9:20"},"scope":2074,"src":"1288:1241:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1978,"nodeType":"Block","src":"2896:243:20","statements":[{"assignments":[1965],"declarations":[{"constant":false,"id":1965,"mutability":"mutable","name":"s","nameLocation":"2914:1:20","nodeType":"VariableDeclaration","scope":1978,"src":"2906:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1964,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2906:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1966,"nodeType":"VariableDeclarationStatement","src":"2906:9:20"},{"assignments":[1968],"declarations":[{"constant":false,"id":1968,"mutability":"mutable","name":"v","nameLocation":"2931:1:20","nodeType":"VariableDeclaration","scope":1978,"src":"2925:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1967,"name":"uint8","nodeType":"ElementaryTypeName","src":"2925:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1969,"nodeType":"VariableDeclarationStatement","src":"2925:7:20"},{"AST":{"nodeType":"YulBlock","src":"2951:143:20","statements":[{"nodeType":"YulAssignment","src":"2965:80:20","value":{"arguments":[{"name":"vs","nodeType":"YulIdentifier","src":"2974:2:20"},{"kind":"number","nodeType":"YulLiteral","src":"2978:66:20","type":"","value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2970:3:20"},"nodeType":"YulFunctionCall","src":"2970:75:20"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2965:1:20"}]},{"nodeType":"YulAssignment","src":"3058:26:20","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3071:3:20","type":"","value":"255"},{"name":"vs","nodeType":"YulIdentifier","src":"3076:2:20"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3067:3:20"},"nodeType":"YulFunctionCall","src":"3067:12:20"},{"kind":"number","nodeType":"YulLiteral","src":"3081:2:20","type":"","value":"27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3063:3:20"},"nodeType":"YulFunctionCall","src":"3063:21:20"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"3058:1:20"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1965,"isOffset":false,"isSlot":false,"src":"2965:1:20","valueSize":1},{"declaration":1968,"isOffset":false,"isSlot":false,"src":"3058:1:20","valueSize":1},{"declaration":1959,"isOffset":false,"isSlot":false,"src":"2974:2:20","valueSize":1},{"declaration":1959,"isOffset":false,"isSlot":false,"src":"3076:2:20","valueSize":1}],"id":1970,"nodeType":"InlineAssembly","src":"2942:152:20"},{"expression":{"arguments":[{"id":1972,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"3118:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1973,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1968,"src":"3124:1:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1974,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"3127:1:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1975,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"3130:1:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1971,"name":"recover","nodeType":"Identifier","overloadedDeclarations":[1952,1979,2036],"referencedDeclaration":2036,"src":"3110:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3110:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1963,"id":1977,"nodeType":"Return","src":"3103:29:20"}]},"documentation":{"id":1953,"nodeType":"StructuredDocumentation","src":"2535:240:20","text":" @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.2._"},"id":1979,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"2789:7:20","nodeType":"FunctionDefinition","parameters":{"id":1960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1955,"mutability":"mutable","name":"hash","nameLocation":"2814:4:20","nodeType":"VariableDeclaration","scope":1979,"src":"2806:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1954,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2806:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1957,"mutability":"mutable","name":"r","nameLocation":"2836:1:20","nodeType":"VariableDeclaration","scope":1979,"src":"2828:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1956,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2828:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1959,"mutability":"mutable","name":"vs","nameLocation":"2855:2:20","nodeType":"VariableDeclaration","scope":1979,"src":"2847:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1958,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2847:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2796:67:20"},"returnParameters":{"id":1963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1962,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1979,"src":"2887:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1961,"name":"address","nodeType":"ElementaryTypeName","src":"2887:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2886:9:20"},"scope":2074,"src":"2780:359:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2035,"nodeType":"Block","src":"3397:1354:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1996,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"4310:1:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1995,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4302:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1994,"name":"uint256","nodeType":"ElementaryTypeName","src":"4302:7:20","typeDescriptions":{}}},"id":1997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4302:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":1998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4316:66:20","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"4302:80:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":2000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4396:36:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":1993,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4281:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4281:161:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2002,"nodeType":"ExpressionStatement","src":"4281:161:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2004,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1984,"src":"4460:1:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3237","id":2005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4465:2:20","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4460:7:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2007,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1984,"src":"4471:1:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3238","id":2008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4476:2:20","typeDescriptions":{"typeIdentifier":"t_rational_28_by_1","typeString":"int_const 28"},"value":"28"},"src":"4471:7:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4460:18:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202776272076616c7565","id":2011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4480:36:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4","typeString":"literal_string \"ECDSA: invalid signature 'v' value\""},"value":"ECDSA: invalid signature 'v' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4","typeString":"literal_string \"ECDSA: invalid signature 'v' value\""}],"id":2003,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4452:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4452:65:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2013,"nodeType":"ExpressionStatement","src":"4452:65:20"},{"assignments":[2015],"declarations":[{"constant":false,"id":2015,"mutability":"mutable","name":"signer","nameLocation":"4620:6:20","nodeType":"VariableDeclaration","scope":2035,"src":"4612:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2014,"name":"address","nodeType":"ElementaryTypeName","src":"4612:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2022,"initialValue":{"arguments":[{"id":2017,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1982,"src":"4639:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2018,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1984,"src":"4645:1:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2019,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1986,"src":"4648:1:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2020,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"4651:1:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2016,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"4629:9:20","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":2021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4629:24:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4612:41:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2024,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2015,"src":"4671:6:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4689:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2026,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4681:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2025,"name":"address","nodeType":"ElementaryTypeName","src":"4681:7:20","typeDescriptions":{}}},"id":2028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4681:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4671:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":2030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4693:26:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":2023,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4663:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4663:57:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2032,"nodeType":"ExpressionStatement","src":"4663:57:20"},{"expression":{"id":2033,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2015,"src":"4738:6:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1992,"id":2034,"nodeType":"Return","src":"4731:13:20"}]},"documentation":{"id":1980,"nodeType":"StructuredDocumentation","src":"3145:115:20","text":" @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately."},"id":2036,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3274:7:20","nodeType":"FunctionDefinition","parameters":{"id":1989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1982,"mutability":"mutable","name":"hash","nameLocation":"3299:4:20","nodeType":"VariableDeclaration","scope":2036,"src":"3291:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1981,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3291:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1984,"mutability":"mutable","name":"v","nameLocation":"3319:1:20","nodeType":"VariableDeclaration","scope":2036,"src":"3313:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1983,"name":"uint8","nodeType":"ElementaryTypeName","src":"3313:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1986,"mutability":"mutable","name":"r","nameLocation":"3338:1:20","nodeType":"VariableDeclaration","scope":2036,"src":"3330:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1985,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3330:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1988,"mutability":"mutable","name":"s","nameLocation":"3357:1:20","nodeType":"VariableDeclaration","scope":2036,"src":"3349:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1987,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3349:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3281:83:20"},"returnParameters":{"id":1992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1991,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2036,"src":"3388:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1990,"name":"address","nodeType":"ElementaryTypeName","src":"3388:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3387:9:20"},"scope":2074,"src":"3265:1486:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2052,"nodeType":"Block","src":"5119:187:20","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","id":2047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5257:34:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},"value":"\u0019Ethereum Signed Message:\n32"},{"id":2048,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2039,"src":"5293:4:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2045,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5240:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2046,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5244:12:20","memberName":"encodePacked","nodeType":"MemberAccess","src":"5240:16:20","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5240:58:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2044,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5230:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5230:69:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2043,"id":2051,"nodeType":"Return","src":"5223:76:20"}]},"documentation":{"id":2037,"nodeType":"StructuredDocumentation","src":"4757:279:20","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":2053,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"5050:22:20","nodeType":"FunctionDefinition","parameters":{"id":2040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2039,"mutability":"mutable","name":"hash","nameLocation":"5081:4:20","nodeType":"VariableDeclaration","scope":2053,"src":"5073:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2038,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5073:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5072:14:20"},"returnParameters":{"id":2043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2042,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2053,"src":"5110:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2041,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5110:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5109:9:20"},"scope":2074,"src":"5041:265:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2072,"nodeType":"Block","src":"5747:92:20","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1901","id":2066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5791:10:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},"value":"\u0019\u0001"},{"id":2067,"name":"domainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2056,"src":"5803:15:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2068,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"5820:10:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2064,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5774:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2065,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5778:12:20","memberName":"encodePacked","nodeType":"MemberAccess","src":"5774:16:20","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5774:57:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2063,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5764:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5764:68:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2062,"id":2071,"nodeType":"Return","src":"5757:75:20"}]},"documentation":{"id":2054,"nodeType":"StructuredDocumentation","src":"5312:328:20","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":2073,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"5654:15:20","nodeType":"FunctionDefinition","parameters":{"id":2059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2056,"mutability":"mutable","name":"domainSeparator","nameLocation":"5678:15:20","nodeType":"VariableDeclaration","scope":2073,"src":"5670:23:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2055,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5670:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2058,"mutability":"mutable","name":"structHash","nameLocation":"5703:10:20","nodeType":"VariableDeclaration","scope":2073,"src":"5695:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2057,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5695:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5669:45:20"},"returnParameters":{"id":2062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2061,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2073,"src":"5738:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2060,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5738:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5737:9:20"},"scope":2074,"src":"5645:194:20","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2075,"src":"264:5577:20","usedErrors":[]}],"src":"33:5809:20"},"id":20},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[2086]},"id":2087,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2076,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:21"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":2077,"nodeType":"StructuredDocumentation","src":"58:279:21","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":2086,"linearizedBaseContracts":[2086],"name":"IERC165","nameLocation":"348:7:21","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2078,"nodeType":"StructuredDocumentation","src":"362:340:21","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":2085,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"716:17:21","nodeType":"FunctionDefinition","parameters":{"id":2081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2080,"mutability":"mutable","name":"interfaceId","nameLocation":"741:11:21","nodeType":"VariableDeclaration","scope":2085,"src":"734:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2079,"name":"bytes4","nodeType":"ElementaryTypeName","src":"734:6:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"733:20:21"},"returnParameters":{"id":2084,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2083,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2085,"src":"777:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2082,"name":"bool","nodeType":"ElementaryTypeName","src":"777:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"776:6:21"},"scope":2086,"src":"707:76:21","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2087,"src":"338:447:21","usedErrors":[]}],"src":"33:753:21"},"id":21},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","exportedSymbols":{"EnumerableSet":[2595]},"id":2596,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2088,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:22"},{"abstract":false,"baseContracts":[],"canonicalName":"EnumerableSet","contractDependencies":[],"contractKind":"library","documentation":{"id":2089,"nodeType":"StructuredDocumentation","src":"58:686:22","text":" @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported."},"fullyImplemented":true,"id":2595,"linearizedBaseContracts":[2595],"name":"EnumerableSet","nameLocation":"753:13:22","nodeType":"ContractDefinition","nodes":[{"canonicalName":"EnumerableSet.Set","id":2097,"members":[{"constant":false,"id":2092,"mutability":"mutable","name":"_values","nameLocation":"1277:7:22","nodeType":"VariableDeclaration","scope":2097,"src":"1267:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2090,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1267:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2091,"nodeType":"ArrayTypeName","src":"1267:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2096,"mutability":"mutable","name":"_indexes","nameLocation":"1445:8:22","nodeType":"VariableDeclaration","scope":2097,"src":"1417:36:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":2095,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2093,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1425:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1417:27:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2094,"name":"uint256","nodeType":"ElementaryTypeName","src":"1436:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"Set","nameLocation":"1220:3:22","nodeType":"StructDefinition","scope":2595,"src":"1213:247:22","visibility":"public"},{"body":{"id":2138,"nodeType":"Block","src":"1699:335:22","statements":[{"condition":{"id":2112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1713:22:22","subExpression":{"arguments":[{"id":2109,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"1724:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},{"id":2110,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"1729:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2108,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2242,"src":"1714:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2097_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":2111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1714:21:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2136,"nodeType":"Block","src":"1991:37:22","statements":[{"expression":{"hexValue":"66616c7365","id":2134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2012:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":2107,"id":2135,"nodeType":"Return","src":"2005:12:22"}]},"id":2137,"nodeType":"IfStatement","src":"1709:319:22","trueBody":{"id":2133,"nodeType":"Block","src":"1737:248:22","statements":[{"expression":{"arguments":[{"id":2118,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"1768:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"expression":{"id":2113,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"1751:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2116,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1755:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2092,"src":"1751:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1763:4:22","memberName":"push","nodeType":"MemberAccess","src":"1751:16:22","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer,bytes32)"}},"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1751:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2120,"nodeType":"ExpressionStatement","src":"1751:23:22"},{"expression":{"id":2129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2121,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"1909:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2124,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1913:8:22","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":2096,"src":"1909:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2125,"indexExpression":{"id":2123,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"1922:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1909:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":2126,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"1931:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2127,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1935:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2092,"src":"1931:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1943:6:22","memberName":"length","nodeType":"MemberAccess","src":"1931:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1909:40:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2130,"nodeType":"ExpressionStatement","src":"1909:40:22"},{"expression":{"hexValue":"74727565","id":2131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1970:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2107,"id":2132,"nodeType":"Return","src":"1963:11:22"}]}}]},"documentation":{"id":2098,"nodeType":"StructuredDocumentation","src":"1466:159:22","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":2139,"implemented":true,"kind":"function","modifiers":[],"name":"_add","nameLocation":"1639:4:22","nodeType":"FunctionDefinition","parameters":{"id":2104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2101,"mutability":"mutable","name":"set","nameLocation":"1656:3:22","nodeType":"VariableDeclaration","scope":2139,"src":"1644:15:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":2100,"nodeType":"UserDefinedTypeName","pathNode":{"id":2099,"name":"Set","nameLocations":["1644:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":2097,"src":"1644:3:22"},"referencedDeclaration":2097,"src":"1644:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":2103,"mutability":"mutable","name":"value","nameLocation":"1669:5:22","nodeType":"VariableDeclaration","scope":2139,"src":"1661:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2102,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1661:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1643:32:22"},"returnParameters":{"id":2107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2106,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2139,"src":"1693:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2105,"name":"bool","nodeType":"ElementaryTypeName","src":"1693:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1692:6:22"},"scope":2595,"src":"1630:404:22","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2222,"nodeType":"Block","src":"2274:1316:22","statements":[{"assignments":[2151],"declarations":[{"constant":false,"id":2151,"mutability":"mutable","name":"valueIndex","nameLocation":"2392:10:22","nodeType":"VariableDeclaration","scope":2222,"src":"2384:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2150,"name":"uint256","nodeType":"ElementaryTypeName","src":"2384:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2156,"initialValue":{"baseExpression":{"expression":{"id":2152,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2143,"src":"2405:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2153,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2409:8:22","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":2096,"src":"2405:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2155,"indexExpression":{"id":2154,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2145,"src":"2418:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2405:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2384:40:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2157,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"2439:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2453:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2439:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2220,"nodeType":"Block","src":"3547:37:22","statements":[{"expression":{"hexValue":"66616c7365","id":2218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3568:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":2149,"id":2219,"nodeType":"Return","src":"3561:12:22"}]},"id":2221,"nodeType":"IfStatement","src":"2435:1149:22","trueBody":{"id":2217,"nodeType":"Block","src":"2456:1085:22","statements":[{"assignments":[2161],"declarations":[{"constant":false,"id":2161,"mutability":"mutable","name":"toDeleteIndex","nameLocation":"2816:13:22","nodeType":"VariableDeclaration","scope":2217,"src":"2808:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2160,"name":"uint256","nodeType":"ElementaryTypeName","src":"2808:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2165,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2162,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"2832:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2845:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2832:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2808:38:22"},{"assignments":[2167],"declarations":[{"constant":false,"id":2167,"mutability":"mutable","name":"lastIndex","nameLocation":"2868:9:22","nodeType":"VariableDeclaration","scope":2217,"src":"2860:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2166,"name":"uint256","nodeType":"ElementaryTypeName","src":"2860:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2173,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2168,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2143,"src":"2880:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2169,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2884:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2092,"src":"2880:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2892:6:22","memberName":"length","nodeType":"MemberAccess","src":"2880:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2901:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2880:22:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2860:42:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2174,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"2921:9:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2175,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2161,"src":"2934:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2921:26:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2201,"nodeType":"IfStatement","src":"2917:398:22","trueBody":{"id":2200,"nodeType":"Block","src":"2949:366:22","statements":[{"assignments":[2178],"declarations":[{"constant":false,"id":2178,"mutability":"mutable","name":"lastvalue","nameLocation":"2975:9:22","nodeType":"VariableDeclaration","scope":2200,"src":"2967:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2177,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2967:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2183,"initialValue":{"baseExpression":{"expression":{"id":2179,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2143,"src":"2987:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2180,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2991:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2092,"src":"2987:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2182,"indexExpression":{"id":2181,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"2999:9:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2987:22:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2967:42:22"},{"expression":{"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2184,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2143,"src":"3109:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2187,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3113:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2092,"src":"3109:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2188,"indexExpression":{"id":2186,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2161,"src":"3121:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3109:26:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2189,"name":"lastvalue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2178,"src":"3138:9:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3109:38:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2191,"nodeType":"ExpressionStatement","src":"3109:38:22"},{"expression":{"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2192,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2143,"src":"3221:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2195,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3225:8:22","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":2096,"src":"3221:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2196,"indexExpression":{"id":2194,"name":"lastvalue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2178,"src":"3234:9:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3221:23:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2197,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"3247:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3221:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2199,"nodeType":"ExpressionStatement","src":"3221:36:22"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":2202,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2143,"src":"3393:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2205,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3397:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2092,"src":"3393:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3405:3:22","memberName":"pop","nodeType":"MemberAccess","src":"3393:15:22","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer)"}},"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3393:17:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2208,"nodeType":"ExpressionStatement","src":"3393:17:22"},{"expression":{"id":2213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"3478:26:22","subExpression":{"baseExpression":{"expression":{"id":2209,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2143,"src":"3485:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2210,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3489:8:22","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":2096,"src":"3485:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2212,"indexExpression":{"id":2211,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2145,"src":"3498:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3485:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2214,"nodeType":"ExpressionStatement","src":"3478:26:22"},{"expression":{"hexValue":"74727565","id":2215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3526:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2149,"id":2216,"nodeType":"Return","src":"3519:11:22"}]}}]},"documentation":{"id":2140,"nodeType":"StructuredDocumentation","src":"2040:157:22","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":2223,"implemented":true,"kind":"function","modifiers":[],"name":"_remove","nameLocation":"2211:7:22","nodeType":"FunctionDefinition","parameters":{"id":2146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2143,"mutability":"mutable","name":"set","nameLocation":"2231:3:22","nodeType":"VariableDeclaration","scope":2223,"src":"2219:15:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":2142,"nodeType":"UserDefinedTypeName","pathNode":{"id":2141,"name":"Set","nameLocations":["2219:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":2097,"src":"2219:3:22"},"referencedDeclaration":2097,"src":"2219:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":2145,"mutability":"mutable","name":"value","nameLocation":"2244:5:22","nodeType":"VariableDeclaration","scope":2223,"src":"2236:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2144,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2236:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2218:32:22"},"returnParameters":{"id":2149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2148,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2223,"src":"2268:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2147,"name":"bool","nodeType":"ElementaryTypeName","src":"2268:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2267:6:22"},"scope":2595,"src":"2202:1388:22","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2241,"nodeType":"Block","src":"3750:48:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":2234,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"3767:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2235,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3771:8:22","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":2096,"src":"3767:12:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2237,"indexExpression":{"id":2236,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"3780:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3767:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3790:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3767:24:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2233,"id":2240,"nodeType":"Return","src":"3760:31:22"}]},"documentation":{"id":2224,"nodeType":"StructuredDocumentation","src":"3596:70:22","text":" @dev Returns true if the value is in the set. O(1)."},"id":2242,"implemented":true,"kind":"function","modifiers":[],"name":"_contains","nameLocation":"3680:9:22","nodeType":"FunctionDefinition","parameters":{"id":2230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2227,"mutability":"mutable","name":"set","nameLocation":"3702:3:22","nodeType":"VariableDeclaration","scope":2242,"src":"3690:15:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":2226,"nodeType":"UserDefinedTypeName","pathNode":{"id":2225,"name":"Set","nameLocations":["3690:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":2097,"src":"3690:3:22"},"referencedDeclaration":2097,"src":"3690:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":2229,"mutability":"mutable","name":"value","nameLocation":"3715:5:22","nodeType":"VariableDeclaration","scope":2242,"src":"3707:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2228,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3707:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3689:32:22"},"returnParameters":{"id":2233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2232,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2242,"src":"3744:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2231,"name":"bool","nodeType":"ElementaryTypeName","src":"3744:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3743:6:22"},"scope":2595,"src":"3671:127:22","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":2255,"nodeType":"Block","src":"3944:42:22","statements":[{"expression":{"expression":{"expression":{"id":2251,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"3961:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2252,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3965:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2092,"src":"3961:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3973:6:22","memberName":"length","nodeType":"MemberAccess","src":"3961:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2250,"id":2254,"nodeType":"Return","src":"3954:25:22"}]},"documentation":{"id":2243,"nodeType":"StructuredDocumentation","src":"3804:70:22","text":" @dev Returns the number of values on the set. O(1)."},"id":2256,"implemented":true,"kind":"function","modifiers":[],"name":"_length","nameLocation":"3888:7:22","nodeType":"FunctionDefinition","parameters":{"id":2247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2246,"mutability":"mutable","name":"set","nameLocation":"3908:3:22","nodeType":"VariableDeclaration","scope":2256,"src":"3896:15:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":2245,"nodeType":"UserDefinedTypeName","pathNode":{"id":2244,"name":"Set","nameLocations":["3896:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":2097,"src":"3896:3:22"},"referencedDeclaration":2097,"src":"3896:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"3895:17:22"},"returnParameters":{"id":2250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2249,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2256,"src":"3935:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2248,"name":"uint256","nodeType":"ElementaryTypeName","src":"3935:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3934:9:22"},"scope":2595,"src":"3879:107:22","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":2272,"nodeType":"Block","src":"4404:42:22","statements":[{"expression":{"baseExpression":{"expression":{"id":2267,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"4421:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2268,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4425:7:22","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2092,"src":"4421:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2270,"indexExpression":{"id":2269,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2262,"src":"4433:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4421:18:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2266,"id":2271,"nodeType":"Return","src":"4414:25:22"}]},"documentation":{"id":2257,"nodeType":"StructuredDocumentation","src":"3992:331:22","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":2273,"implemented":true,"kind":"function","modifiers":[],"name":"_at","nameLocation":"4337:3:22","nodeType":"FunctionDefinition","parameters":{"id":2263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2260,"mutability":"mutable","name":"set","nameLocation":"4353:3:22","nodeType":"VariableDeclaration","scope":2273,"src":"4341:15:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":2259,"nodeType":"UserDefinedTypeName","pathNode":{"id":2258,"name":"Set","nameLocations":["4341:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":2097,"src":"4341:3:22"},"referencedDeclaration":2097,"src":"4341:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":2262,"mutability":"mutable","name":"index","nameLocation":"4366:5:22","nodeType":"VariableDeclaration","scope":2273,"src":"4358:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2261,"name":"uint256","nodeType":"ElementaryTypeName","src":"4358:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4340:32:22"},"returnParameters":{"id":2266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2265,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2273,"src":"4395:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2264,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4395:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4394:9:22"},"scope":2595,"src":"4328:118:22","stateMutability":"view","virtual":false,"visibility":"private"},{"canonicalName":"EnumerableSet.Bytes32Set","id":2277,"members":[{"constant":false,"id":2276,"mutability":"mutable","name":"_inner","nameLocation":"4503:6:22","nodeType":"VariableDeclaration","scope":2277,"src":"4499:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":2275,"nodeType":"UserDefinedTypeName","pathNode":{"id":2274,"name":"Set","nameLocations":["4499:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":2097,"src":"4499:3:22"},"referencedDeclaration":2097,"src":"4499:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"Bytes32Set","nameLocation":"4478:10:22","nodeType":"StructDefinition","scope":2595,"src":"4471:45:22","visibility":"public"},{"body":{"id":2294,"nodeType":"Block","src":"4762:47:22","statements":[{"expression":{"arguments":[{"expression":{"id":2289,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"4784:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2277_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":2290,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4788:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2276,"src":"4784:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":2291,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2283,"src":"4796:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2288,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"4779:4:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2097_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4779:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2287,"id":2293,"nodeType":"Return","src":"4772:30:22"}]},"documentation":{"id":2278,"nodeType":"StructuredDocumentation","src":"4522:159:22","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":2295,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"4695:3:22","nodeType":"FunctionDefinition","parameters":{"id":2284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2281,"mutability":"mutable","name":"set","nameLocation":"4718:3:22","nodeType":"VariableDeclaration","scope":2295,"src":"4699:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2277_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":2280,"nodeType":"UserDefinedTypeName","pathNode":{"id":2279,"name":"Bytes32Set","nameLocations":["4699:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":2277,"src":"4699:10:22"},"referencedDeclaration":2277,"src":"4699:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2277_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":2283,"mutability":"mutable","name":"value","nameLocation":"4731:5:22","nodeType":"VariableDeclaration","scope":2295,"src":"4723:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2282,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4723:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4698:39:22"},"returnParameters":{"id":2287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2286,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2295,"src":"4756:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2285,"name":"bool","nodeType":"ElementaryTypeName","src":"4756:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4755:6:22"},"scope":2595,"src":"4686:123:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2312,"nodeType":"Block","src":"5056:50:22","statements":[{"expression":{"arguments":[{"expression":{"id":2307,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"5081:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2277_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":2308,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5085:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2276,"src":"5081:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":2309,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2301,"src":"5093:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2306,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"5073:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2097_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5073:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2305,"id":2311,"nodeType":"Return","src":"5066:33:22"}]},"documentation":{"id":2296,"nodeType":"StructuredDocumentation","src":"4815:157:22","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":2313,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"4986:6:22","nodeType":"FunctionDefinition","parameters":{"id":2302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2299,"mutability":"mutable","name":"set","nameLocation":"5012:3:22","nodeType":"VariableDeclaration","scope":2313,"src":"4993:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2277_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":2298,"nodeType":"UserDefinedTypeName","pathNode":{"id":2297,"name":"Bytes32Set","nameLocations":["4993:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":2277,"src":"4993:10:22"},"referencedDeclaration":2277,"src":"4993:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2277_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":2301,"mutability":"mutable","name":"value","nameLocation":"5025:5:22","nodeType":"VariableDeclaration","scope":2313,"src":"5017:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2300,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5017:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4992:39:22"},"returnParameters":{"id":2305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2304,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2313,"src":"5050:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2303,"name":"bool","nodeType":"ElementaryTypeName","src":"5050:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5049:6:22"},"scope":2595,"src":"4977:129:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2330,"nodeType":"Block","src":"5273:52:22","statements":[{"expression":{"arguments":[{"expression":{"id":2325,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2317,"src":"5300:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2277_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":2326,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5304:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2276,"src":"5300:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":2327,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2319,"src":"5312:5:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2324,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2242,"src":"5290:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2097_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":2328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5290:28:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2323,"id":2329,"nodeType":"Return","src":"5283:35:22"}]},"documentation":{"id":2314,"nodeType":"StructuredDocumentation","src":"5112:70:22","text":" @dev Returns true if the value is in the set. O(1)."},"id":2331,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"5196:8:22","nodeType":"FunctionDefinition","parameters":{"id":2320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2317,"mutability":"mutable","name":"set","nameLocation":"5224:3:22","nodeType":"VariableDeclaration","scope":2331,"src":"5205:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2277_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":2316,"nodeType":"UserDefinedTypeName","pathNode":{"id":2315,"name":"Bytes32Set","nameLocations":["5205:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":2277,"src":"5205:10:22"},"referencedDeclaration":2277,"src":"5205:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2277_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":2319,"mutability":"mutable","name":"value","nameLocation":"5237:5:22","nodeType":"VariableDeclaration","scope":2331,"src":"5229:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2318,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5229:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5204:39:22"},"returnParameters":{"id":2323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2322,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2331,"src":"5267:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2321,"name":"bool","nodeType":"ElementaryTypeName","src":"5267:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5266:6:22"},"scope":2595,"src":"5187:138:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2345,"nodeType":"Block","src":"5478:43:22","statements":[{"expression":{"arguments":[{"expression":{"id":2341,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"5503:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2277_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":2342,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5507:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2276,"src":"5503:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":2340,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"5495:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2097_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":2343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5495:19:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2339,"id":2344,"nodeType":"Return","src":"5488:26:22"}]},"documentation":{"id":2332,"nodeType":"StructuredDocumentation","src":"5331:70:22","text":" @dev Returns the number of values in the set. O(1)."},"id":2346,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"5415:6:22","nodeType":"FunctionDefinition","parameters":{"id":2336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2335,"mutability":"mutable","name":"set","nameLocation":"5441:3:22","nodeType":"VariableDeclaration","scope":2346,"src":"5422:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2277_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":2334,"nodeType":"UserDefinedTypeName","pathNode":{"id":2333,"name":"Bytes32Set","nameLocations":["5422:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":2277,"src":"5422:10:22"},"referencedDeclaration":2277,"src":"5422:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2277_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"5421:24:22"},"returnParameters":{"id":2339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2338,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2346,"src":"5469:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2337,"name":"uint256","nodeType":"ElementaryTypeName","src":"5469:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5468:9:22"},"scope":2595,"src":"5406:115:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2363,"nodeType":"Block","src":"5946:46:22","statements":[{"expression":{"arguments":[{"expression":{"id":2358,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2350,"src":"5967:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2277_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":2359,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5971:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2276,"src":"5967:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":2360,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2352,"src":"5979:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2357,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2273,"src":"5963:3:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2097_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":2361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5963:22:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2356,"id":2362,"nodeType":"Return","src":"5956:29:22"}]},"documentation":{"id":2347,"nodeType":"StructuredDocumentation","src":"5527:331:22","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":2364,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"5872:2:22","nodeType":"FunctionDefinition","parameters":{"id":2353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2350,"mutability":"mutable","name":"set","nameLocation":"5894:3:22","nodeType":"VariableDeclaration","scope":2364,"src":"5875:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2277_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":2349,"nodeType":"UserDefinedTypeName","pathNode":{"id":2348,"name":"Bytes32Set","nameLocations":["5875:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":2277,"src":"5875:10:22"},"referencedDeclaration":2277,"src":"5875:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2277_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":2352,"mutability":"mutable","name":"index","nameLocation":"5907:5:22","nodeType":"VariableDeclaration","scope":2364,"src":"5899:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2351,"name":"uint256","nodeType":"ElementaryTypeName","src":"5899:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5874:39:22"},"returnParameters":{"id":2356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2355,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2364,"src":"5937:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2354,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5937:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5936:9:22"},"scope":2595,"src":"5863:129:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.AddressSet","id":2368,"members":[{"constant":false,"id":2367,"mutability":"mutable","name":"_inner","nameLocation":"6049:6:22","nodeType":"VariableDeclaration","scope":2368,"src":"6045:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":2366,"nodeType":"UserDefinedTypeName","pathNode":{"id":2365,"name":"Set","nameLocations":["6045:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":2097,"src":"6045:3:22"},"referencedDeclaration":2097,"src":"6045:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"AddressSet","nameLocation":"6024:10:22","nodeType":"StructDefinition","scope":2595,"src":"6017:45:22","visibility":"public"},{"body":{"id":2394,"nodeType":"Block","src":"6308:74:22","statements":[{"expression":{"arguments":[{"expression":{"id":2380,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2372,"src":"6330:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2368_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":2381,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6334:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2367,"src":"6330:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":2388,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"6366:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2387,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6358:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2386,"name":"uint160","nodeType":"ElementaryTypeName","src":"6358:7:22","typeDescriptions":{}}},"id":2389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6358:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2385,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6350:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2384,"name":"uint256","nodeType":"ElementaryTypeName","src":"6350:7:22","typeDescriptions":{}}},"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6350:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2383,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6342:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2382,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6342:7:22","typeDescriptions":{}}},"id":2391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6342:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2379,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"6325:4:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2097_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":2392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6325:50:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2378,"id":2393,"nodeType":"Return","src":"6318:57:22"}]},"documentation":{"id":2369,"nodeType":"StructuredDocumentation","src":"6068:159:22","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":2395,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"6241:3:22","nodeType":"FunctionDefinition","parameters":{"id":2375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2372,"mutability":"mutable","name":"set","nameLocation":"6264:3:22","nodeType":"VariableDeclaration","scope":2395,"src":"6245:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2368_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":2371,"nodeType":"UserDefinedTypeName","pathNode":{"id":2370,"name":"AddressSet","nameLocations":["6245:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":2368,"src":"6245:10:22"},"referencedDeclaration":2368,"src":"6245:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2368_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":2374,"mutability":"mutable","name":"value","nameLocation":"6277:5:22","nodeType":"VariableDeclaration","scope":2395,"src":"6269:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2373,"name":"address","nodeType":"ElementaryTypeName","src":"6269:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6244:39:22"},"returnParameters":{"id":2378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2377,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2395,"src":"6302:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2376,"name":"bool","nodeType":"ElementaryTypeName","src":"6302:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6301:6:22"},"scope":2595,"src":"6232:150:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2421,"nodeType":"Block","src":"6629:77:22","statements":[{"expression":{"arguments":[{"expression":{"id":2407,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"6654:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2368_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":2408,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6658:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2367,"src":"6654:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":2415,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"6690:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2414,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6682:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2413,"name":"uint160","nodeType":"ElementaryTypeName","src":"6682:7:22","typeDescriptions":{}}},"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6682:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2412,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6674:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2411,"name":"uint256","nodeType":"ElementaryTypeName","src":"6674:7:22","typeDescriptions":{}}},"id":2417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6674:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2410,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6666:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2409,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6666:7:22","typeDescriptions":{}}},"id":2418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6666:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2406,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"6646:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2097_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":2419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6646:53:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2405,"id":2420,"nodeType":"Return","src":"6639:60:22"}]},"documentation":{"id":2396,"nodeType":"StructuredDocumentation","src":"6388:157:22","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":2422,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"6559:6:22","nodeType":"FunctionDefinition","parameters":{"id":2402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2399,"mutability":"mutable","name":"set","nameLocation":"6585:3:22","nodeType":"VariableDeclaration","scope":2422,"src":"6566:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2368_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":2398,"nodeType":"UserDefinedTypeName","pathNode":{"id":2397,"name":"AddressSet","nameLocations":["6566:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":2368,"src":"6566:10:22"},"referencedDeclaration":2368,"src":"6566:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2368_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":2401,"mutability":"mutable","name":"value","nameLocation":"6598:5:22","nodeType":"VariableDeclaration","scope":2422,"src":"6590:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2400,"name":"address","nodeType":"ElementaryTypeName","src":"6590:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6565:39:22"},"returnParameters":{"id":2405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2404,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2422,"src":"6623:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2403,"name":"bool","nodeType":"ElementaryTypeName","src":"6623:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6622:6:22"},"scope":2595,"src":"6550:156:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2448,"nodeType":"Block","src":"6873:79:22","statements":[{"expression":{"arguments":[{"expression":{"id":2434,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"6900:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2368_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":2435,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6904:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2367,"src":"6900:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":2442,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"6936:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2441,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6928:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2440,"name":"uint160","nodeType":"ElementaryTypeName","src":"6928:7:22","typeDescriptions":{}}},"id":2443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6928:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2439,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6920:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2438,"name":"uint256","nodeType":"ElementaryTypeName","src":"6920:7:22","typeDescriptions":{}}},"id":2444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6920:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2437,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6912:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2436,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6912:7:22","typeDescriptions":{}}},"id":2445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6912:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2433,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2242,"src":"6890:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2097_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":2446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6890:55:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2432,"id":2447,"nodeType":"Return","src":"6883:62:22"}]},"documentation":{"id":2423,"nodeType":"StructuredDocumentation","src":"6712:70:22","text":" @dev Returns true if the value is in the set. O(1)."},"id":2449,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"6796:8:22","nodeType":"FunctionDefinition","parameters":{"id":2429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2426,"mutability":"mutable","name":"set","nameLocation":"6824:3:22","nodeType":"VariableDeclaration","scope":2449,"src":"6805:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2368_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":2425,"nodeType":"UserDefinedTypeName","pathNode":{"id":2424,"name":"AddressSet","nameLocations":["6805:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":2368,"src":"6805:10:22"},"referencedDeclaration":2368,"src":"6805:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2368_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":2428,"mutability":"mutable","name":"value","nameLocation":"6837:5:22","nodeType":"VariableDeclaration","scope":2449,"src":"6829:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2427,"name":"address","nodeType":"ElementaryTypeName","src":"6829:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6804:39:22"},"returnParameters":{"id":2432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2431,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2449,"src":"6867:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2430,"name":"bool","nodeType":"ElementaryTypeName","src":"6867:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6866:6:22"},"scope":2595,"src":"6787:165:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2463,"nodeType":"Block","src":"7105:43:22","statements":[{"expression":{"arguments":[{"expression":{"id":2459,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2453,"src":"7130:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2368_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":2460,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7134:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2367,"src":"7130:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":2458,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"7122:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2097_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":2461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7122:19:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2457,"id":2462,"nodeType":"Return","src":"7115:26:22"}]},"documentation":{"id":2450,"nodeType":"StructuredDocumentation","src":"6958:70:22","text":" @dev Returns the number of values in the set. O(1)."},"id":2464,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"7042:6:22","nodeType":"FunctionDefinition","parameters":{"id":2454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2453,"mutability":"mutable","name":"set","nameLocation":"7068:3:22","nodeType":"VariableDeclaration","scope":2464,"src":"7049:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2368_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":2452,"nodeType":"UserDefinedTypeName","pathNode":{"id":2451,"name":"AddressSet","nameLocations":["7049:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":2368,"src":"7049:10:22"},"referencedDeclaration":2368,"src":"7049:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2368_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"7048:24:22"},"returnParameters":{"id":2457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2456,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2464,"src":"7096:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2455,"name":"uint256","nodeType":"ElementaryTypeName","src":"7096:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7095:9:22"},"scope":2595,"src":"7033:115:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2490,"nodeType":"Block","src":"7573:73:22","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":2482,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"7618:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2368_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":2483,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7622:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2367,"src":"7618:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":2484,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"7630:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2481,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2273,"src":"7614:3:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2097_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":2485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7614:22:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2480,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7606:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2479,"name":"uint256","nodeType":"ElementaryTypeName","src":"7606:7:22","typeDescriptions":{}}},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7606:31:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2478,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7598:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2477,"name":"uint160","nodeType":"ElementaryTypeName","src":"7598:7:22","typeDescriptions":{}}},"id":2487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7598:40:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2476,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7590:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2475,"name":"address","nodeType":"ElementaryTypeName","src":"7590:7:22","typeDescriptions":{}}},"id":2488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7590:49:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2474,"id":2489,"nodeType":"Return","src":"7583:56:22"}]},"documentation":{"id":2465,"nodeType":"StructuredDocumentation","src":"7154:331:22","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":2491,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"7499:2:22","nodeType":"FunctionDefinition","parameters":{"id":2471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2468,"mutability":"mutable","name":"set","nameLocation":"7521:3:22","nodeType":"VariableDeclaration","scope":2491,"src":"7502:22:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2368_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":2467,"nodeType":"UserDefinedTypeName","pathNode":{"id":2466,"name":"AddressSet","nameLocations":["7502:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":2368,"src":"7502:10:22"},"referencedDeclaration":2368,"src":"7502:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2368_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":2470,"mutability":"mutable","name":"index","nameLocation":"7534:5:22","nodeType":"VariableDeclaration","scope":2491,"src":"7526:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2469,"name":"uint256","nodeType":"ElementaryTypeName","src":"7526:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7501:39:22"},"returnParameters":{"id":2474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2473,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2491,"src":"7564:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2472,"name":"address","nodeType":"ElementaryTypeName","src":"7564:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7563:9:22"},"scope":2595,"src":"7490:156:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.UintSet","id":2495,"members":[{"constant":false,"id":2494,"mutability":"mutable","name":"_inner","nameLocation":"7697:6:22","nodeType":"VariableDeclaration","scope":2495,"src":"7693:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":2493,"nodeType":"UserDefinedTypeName","pathNode":{"id":2492,"name":"Set","nameLocations":["7693:3:22"],"nodeType":"IdentifierPath","referencedDeclaration":2097,"src":"7693:3:22"},"referencedDeclaration":2097,"src":"7693:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"UintSet","nameLocation":"7675:7:22","nodeType":"StructDefinition","scope":2595,"src":"7668:42:22","visibility":"public"},{"body":{"id":2515,"nodeType":"Block","src":"7953:56:22","statements":[{"expression":{"arguments":[{"expression":{"id":2507,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"7975:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2495_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":2508,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7979:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2494,"src":"7975:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":2511,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2501,"src":"7995:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2510,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7987:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2509,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7987:7:22","typeDescriptions":{}}},"id":2512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7987:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2506,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"7970:4:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2097_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7970:32:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2505,"id":2514,"nodeType":"Return","src":"7963:39:22"}]},"documentation":{"id":2496,"nodeType":"StructuredDocumentation","src":"7716:159:22","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":2516,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"7889:3:22","nodeType":"FunctionDefinition","parameters":{"id":2502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2499,"mutability":"mutable","name":"set","nameLocation":"7909:3:22","nodeType":"VariableDeclaration","scope":2516,"src":"7893:19:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2495_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":2498,"nodeType":"UserDefinedTypeName","pathNode":{"id":2497,"name":"UintSet","nameLocations":["7893:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":2495,"src":"7893:7:22"},"referencedDeclaration":2495,"src":"7893:7:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2495_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":2501,"mutability":"mutable","name":"value","nameLocation":"7922:5:22","nodeType":"VariableDeclaration","scope":2516,"src":"7914:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2500,"name":"uint256","nodeType":"ElementaryTypeName","src":"7914:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7892:36:22"},"returnParameters":{"id":2505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2504,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2516,"src":"7947:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2503,"name":"bool","nodeType":"ElementaryTypeName","src":"7947:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7946:6:22"},"scope":2595,"src":"7880:129:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2536,"nodeType":"Block","src":"8253:59:22","statements":[{"expression":{"arguments":[{"expression":{"id":2528,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2520,"src":"8278:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2495_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":2529,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8282:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2494,"src":"8278:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":2532,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"8298:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2531,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8290:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2530,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8290:7:22","typeDescriptions":{}}},"id":2533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8290:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2527,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"8270:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2097_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":2534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8270:35:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2526,"id":2535,"nodeType":"Return","src":"8263:42:22"}]},"documentation":{"id":2517,"nodeType":"StructuredDocumentation","src":"8015:157:22","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":2537,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"8186:6:22","nodeType":"FunctionDefinition","parameters":{"id":2523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2520,"mutability":"mutable","name":"set","nameLocation":"8209:3:22","nodeType":"VariableDeclaration","scope":2537,"src":"8193:19:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2495_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":2519,"nodeType":"UserDefinedTypeName","pathNode":{"id":2518,"name":"UintSet","nameLocations":["8193:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":2495,"src":"8193:7:22"},"referencedDeclaration":2495,"src":"8193:7:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2495_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":2522,"mutability":"mutable","name":"value","nameLocation":"8222:5:22","nodeType":"VariableDeclaration","scope":2537,"src":"8214:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2521,"name":"uint256","nodeType":"ElementaryTypeName","src":"8214:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8192:36:22"},"returnParameters":{"id":2526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2525,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2537,"src":"8247:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2524,"name":"bool","nodeType":"ElementaryTypeName","src":"8247:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8246:6:22"},"scope":2595,"src":"8177:135:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2557,"nodeType":"Block","src":"8476:61:22","statements":[{"expression":{"arguments":[{"expression":{"id":2549,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2541,"src":"8503:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2495_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":2550,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8507:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2494,"src":"8503:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":2553,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2543,"src":"8523:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8515:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2551,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8515:7:22","typeDescriptions":{}}},"id":2554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8515:14:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2548,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2242,"src":"8493:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2097_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":2555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8493:37:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2547,"id":2556,"nodeType":"Return","src":"8486:44:22"}]},"documentation":{"id":2538,"nodeType":"StructuredDocumentation","src":"8318:70:22","text":" @dev Returns true if the value is in the set. O(1)."},"id":2558,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"8402:8:22","nodeType":"FunctionDefinition","parameters":{"id":2544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2541,"mutability":"mutable","name":"set","nameLocation":"8427:3:22","nodeType":"VariableDeclaration","scope":2558,"src":"8411:19:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2495_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":2540,"nodeType":"UserDefinedTypeName","pathNode":{"id":2539,"name":"UintSet","nameLocations":["8411:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":2495,"src":"8411:7:22"},"referencedDeclaration":2495,"src":"8411:7:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2495_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":2543,"mutability":"mutable","name":"value","nameLocation":"8440:5:22","nodeType":"VariableDeclaration","scope":2558,"src":"8432:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2542,"name":"uint256","nodeType":"ElementaryTypeName","src":"8432:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8410:36:22"},"returnParameters":{"id":2547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2546,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2558,"src":"8470:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2545,"name":"bool","nodeType":"ElementaryTypeName","src":"8470:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8469:6:22"},"scope":2595,"src":"8393:144:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2572,"nodeType":"Block","src":"8687:43:22","statements":[{"expression":{"arguments":[{"expression":{"id":2568,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"8712:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2495_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":2569,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8716:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2494,"src":"8712:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":2567,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"8704:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2097_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8704:19:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2566,"id":2571,"nodeType":"Return","src":"8697:26:22"}]},"documentation":{"id":2559,"nodeType":"StructuredDocumentation","src":"8543:70:22","text":" @dev Returns the number of values on the set. O(1)."},"id":2573,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"8627:6:22","nodeType":"FunctionDefinition","parameters":{"id":2563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2562,"mutability":"mutable","name":"set","nameLocation":"8650:3:22","nodeType":"VariableDeclaration","scope":2573,"src":"8634:19:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2495_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":2561,"nodeType":"UserDefinedTypeName","pathNode":{"id":2560,"name":"UintSet","nameLocations":["8634:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":2495,"src":"8634:7:22"},"referencedDeclaration":2495,"src":"8634:7:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2495_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"8633:21:22"},"returnParameters":{"id":2566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2565,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2573,"src":"8678:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2564,"name":"uint256","nodeType":"ElementaryTypeName","src":"8678:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8677:9:22"},"scope":2595,"src":"8618:112:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2593,"nodeType":"Block","src":"9152:55:22","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":2587,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2577,"src":"9181:3:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2495_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":2588,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9185:6:22","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2494,"src":"9181:10:22","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":2589,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2579,"src":"9193:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2097_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2586,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2273,"src":"9177:3:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2097_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9177:22:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2585,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9169:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2584,"name":"uint256","nodeType":"ElementaryTypeName","src":"9169:7:22","typeDescriptions":{}}},"id":2591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9169:31:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2583,"id":2592,"nodeType":"Return","src":"9162:38:22"}]},"documentation":{"id":2574,"nodeType":"StructuredDocumentation","src":"8736:331:22","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":2594,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"9081:2:22","nodeType":"FunctionDefinition","parameters":{"id":2580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2577,"mutability":"mutable","name":"set","nameLocation":"9100:3:22","nodeType":"VariableDeclaration","scope":2594,"src":"9084:19:22","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2495_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":2576,"nodeType":"UserDefinedTypeName","pathNode":{"id":2575,"name":"UintSet","nameLocations":["9084:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":2495,"src":"9084:7:22"},"referencedDeclaration":2495,"src":"9084:7:22","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2495_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":2579,"mutability":"mutable","name":"index","nameLocation":"9113:5:22","nodeType":"VariableDeclaration","scope":2594,"src":"9105:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2578,"name":"uint256","nodeType":"ElementaryTypeName","src":"9105:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9083:36:22"},"returnParameters":{"id":2583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2582,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2594,"src":"9143:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2581,"name":"uint256","nodeType":"ElementaryTypeName","src":"9143:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9142:9:22"},"scope":2595,"src":"9072:135:22","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":2596,"src":"745:8464:22","usedErrors":[]}],"src":"33:9177:22"},"id":22},"contracts/Wallet.sol":{"ast":{"absolutePath":"contracts/Wallet.sol","exportedSymbols":{"Address":[3398],"BaseAccount":[265],"ECDSA":[2074],"ERC1967Upgrade":[1481],"EnumerableSet":[2595],"IAccount":[520],"IAggregator":[554],"IBeacon":[1543],"IERC1155Receiver":[1682],"IERC165":[2086],"IERC721Receiver":[1700],"IERC777Recipient":[1720],"IEntryPoint":[758],"INonceManager":[777],"IStakeManager":[882],"Initializable":[1589],"StorageSlot":[1891],"TokenCallbackHandler":[123],"UUPSUpgradeable":[1641],"UserOperation":[909],"UserOperationLib":[1079],"ValidationData":[274],"Wallet":[2938],"_intersectTimeRange":[418],"_packValidationData":[455,493],"_parseValidationData":[333],"calldataKeccak":[503]},"id":2939,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":2597,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:23"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","id":2598,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2939,"sourceUnit":2075,"src":"63:62:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","file":"@openzeppelin/contracts/utils/structs/EnumerableSet.sol","id":2599,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2939,"sourceUnit":2596,"src":"126:65:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts/proxy/utils/Initializable.sol","id":2600,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2939,"sourceUnit":1590,"src":"192:63:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol","file":"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol","id":2601,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2939,"sourceUnit":1642,"src":"256:65:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@account-abstraction/contracts/core/BaseAccount.sol","file":"@account-abstraction/contracts/core/BaseAccount.sol","id":2602,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2939,"sourceUnit":266,"src":"322:61:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@account-abstraction/contracts/core/Helpers.sol","file":"@account-abstraction/contracts/core/Helpers.sol","id":2603,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2939,"sourceUnit":504,"src":"384:57:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@account-abstraction/contracts/callback/TokenCallbackHandler.sol","file":"@account-abstraction/contracts/callback/TokenCallbackHandler.sol","id":2604,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2939,"sourceUnit":124,"src":"442:74:23","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2605,"name":"BaseAccount","nameLocations":["541:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":265,"src":"541:11:23"},"id":2606,"nodeType":"InheritanceSpecifier","src":"541:11:23"},{"baseName":{"id":2607,"name":"TokenCallbackHandler","nameLocations":["558:20:23"],"nodeType":"IdentifierPath","referencedDeclaration":123,"src":"558:20:23"},"id":2608,"nodeType":"InheritanceSpecifier","src":"558:20:23"},{"baseName":{"id":2609,"name":"Initializable","nameLocations":["584:13:23"],"nodeType":"IdentifierPath","referencedDeclaration":1589,"src":"584:13:23"},"id":2610,"nodeType":"InheritanceSpecifier","src":"584:13:23"},{"baseName":{"id":2611,"name":"UUPSUpgradeable","nameLocations":["603:15:23"],"nodeType":"IdentifierPath","referencedDeclaration":1641,"src":"603:15:23"},"id":2612,"nodeType":"InheritanceSpecifier","src":"603:15:23"}],"canonicalName":"Wallet","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2938,"linearizedBaseContracts":[2938,1641,1481,1589,123,1682,2086,1700,1720,265,520],"name":"Wallet","nameLocation":"527:6:23","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2615,"libraryName":{"id":2613,"name":"ECDSA","nameLocations":["631:5:23"],"nodeType":"IdentifierPath","referencedDeclaration":2074,"src":"631:5:23"},"nodeType":"UsingForDirective","src":"625:24:23","typeName":{"id":2614,"name":"bytes32","nodeType":"ElementaryTypeName","src":"641:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"constant":false,"functionSelector":"c5c03699","id":2617,"mutability":"immutable","name":"walletFactory","nameLocation":"680:13:23","nodeType":"VariableDeclaration","scope":2938,"src":"655:38:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2616,"name":"address","nodeType":"ElementaryTypeName","src":"655:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"id":2620,"mutability":"immutable","name":"_entryPoint","nameLocation":"729:11:23","nodeType":"VariableDeclaration","scope":2938,"src":"699:41:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"},"typeName":{"id":2619,"nodeType":"UserDefinedTypeName","pathNode":{"id":2618,"name":"IEntryPoint","nameLocations":["699:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":758,"src":"699:11:23"},"referencedDeclaration":758,"src":"699:11:23","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"}},"visibility":"private"},{"constant":false,"functionSelector":"025e7c27","id":2623,"mutability":"mutable","name":"owners","nameLocation":"763:6:23","nodeType":"VariableDeclaration","scope":2938,"src":"746:23:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[]"},"typeName":{"baseType":{"id":2621,"name":"address","nodeType":"ElementaryTypeName","src":"746:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2622,"nodeType":"ArrayTypeName","src":"746:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"public"},{"anonymous":false,"eventSelector":"8afffd56adb385a94a6b7426d4e3f51e2f9de8984c19093c2ddccf8fcfddfe8d","id":2631,"name":"WalletInitialized","nameLocation":"782:17:23","nodeType":"EventDefinition","parameters":{"id":2630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2626,"indexed":true,"mutability":"mutable","name":"entryPoint","nameLocation":"820:10:23","nodeType":"VariableDeclaration","scope":2631,"src":"800:30:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"},"typeName":{"id":2625,"nodeType":"UserDefinedTypeName","pathNode":{"id":2624,"name":"IEntryPoint","nameLocations":["800:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":758,"src":"800:11:23"},"referencedDeclaration":758,"src":"800:11:23","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"}},"visibility":"internal"},{"constant":false,"id":2629,"indexed":false,"mutability":"mutable","name":"owners","nameLocation":"842:6:23","nodeType":"VariableDeclaration","scope":2631,"src":"832:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2627,"name":"address","nodeType":"ElementaryTypeName","src":"832:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2628,"nodeType":"ArrayTypeName","src":"832:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"799:50:23"},"src":"776:74:23"},{"body":{"id":2650,"nodeType":"Block","src":"899:183:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2634,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"930:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"934:6:23","memberName":"sender","nodeType":"MemberAccess","src":"930:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":2638,"name":"_entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2620,"src":"952:11:23","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"}],"id":2637,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"944:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2636,"name":"address","nodeType":"ElementaryTypeName","src":"944:7:23","typeDescriptions":{}}},"id":2639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"944:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"930:34:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2641,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"968:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"972:6:23","memberName":"sender","nodeType":"MemberAccess","src":"968:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2643,"name":"walletFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2617,"src":"982:13:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"968:27:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"930:65:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6f6e6c7920656e74727920706f696e74206f722077616c6c657420666163746f72792063616e2063616c6c","id":2646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1009:45:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_24902e8dc56a5c691f0b6047c774684c122d74c2b2b5241f387104478768b569","typeString":"literal_string \"only entry point or wallet factory can call\""},"value":"only entry point or wallet factory can call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_24902e8dc56a5c691f0b6047c774684c122d74c2b2b5241f387104478768b569","typeString":"literal_string \"only entry point or wallet factory can call\""}],"id":2633,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"909:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"909:155:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2648,"nodeType":"ExpressionStatement","src":"909:155:23"},{"id":2649,"nodeType":"PlaceholderStatement","src":"1074:1:23"}]},"id":2651,"name":"_requireFromEntryPointOrFactory","nameLocation":"865:31:23","nodeType":"ModifierDefinition","parameters":{"id":2632,"nodeType":"ParameterList","parameters":[],"src":"896:2:23"},"src":"856:226:23","virtual":false,"visibility":"internal"},{"body":{"id":2667,"nodeType":"Block","src":"1152:85:23","statements":[{"expression":{"id":2661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2659,"name":"_entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2620,"src":"1162:11:23","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2660,"name":"anEntryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2654,"src":"1176:12:23","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"}},"src":"1162:26:23","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"}},"id":2662,"nodeType":"ExpressionStatement","src":"1162:26:23"},{"expression":{"id":2665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2663,"name":"walletFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2617,"src":"1198:13:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2664,"name":"ourWalletFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2656,"src":"1214:16:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1198:32:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2666,"nodeType":"ExpressionStatement","src":"1198:32:23"}]},"id":2668,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2654,"mutability":"mutable","name":"anEntryPoint","nameLocation":"1112:12:23","nodeType":"VariableDeclaration","scope":2668,"src":"1100:24:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"},"typeName":{"id":2653,"nodeType":"UserDefinedTypeName","pathNode":{"id":2652,"name":"IEntryPoint","nameLocations":["1100:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":758,"src":"1100:11:23"},"referencedDeclaration":758,"src":"1100:11:23","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"}},"visibility":"internal"},{"constant":false,"id":2656,"mutability":"mutable","name":"ourWalletFactory","nameLocation":"1134:16:23","nodeType":"VariableDeclaration","scope":2668,"src":"1126:24:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2655,"name":"address","nodeType":"ElementaryTypeName","src":"1126:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1099:52:23"},"returnParameters":{"id":2658,"nodeType":"ParameterList","parameters":[],"src":"1152:0:23"},"scope":2938,"src":"1088:149:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2680,"nodeType":"Block","src":"1314:43:23","statements":[{"expression":{"arguments":[{"id":2677,"name":"initialOwners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1336:13:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":2676,"name":"_initialize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"1324:11:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (address[] memory)"}},"id":2678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1324:26:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2679,"nodeType":"ExpressionStatement","src":"1324:26:23"}]},"functionSelector":"a224cee7","id":2681,"implemented":true,"kind":"function","modifiers":[{"id":2674,"kind":"modifierInvocation","modifierName":{"id":2673,"name":"initializer","nameLocations":["1302:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":1588,"src":"1302:11:23"},"nodeType":"ModifierInvocation","src":"1302:11:23"}],"name":"initialize","nameLocation":"1252:10:23","nodeType":"FunctionDefinition","parameters":{"id":2672,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2671,"mutability":"mutable","name":"initialOwners","nameLocation":"1280:13:23","nodeType":"VariableDeclaration","scope":2681,"src":"1263:30:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2669,"name":"address","nodeType":"ElementaryTypeName","src":"1263:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2670,"nodeType":"ArrayTypeName","src":"1263:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"1262:32:23"},"returnParameters":{"id":2675,"nodeType":"ParameterList","parameters":[],"src":"1314:0:23"},"scope":2938,"src":"1243:114:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2698,"nodeType":"Block","src":"1501:41:23","statements":[{"expression":{"arguments":[{"id":2693,"name":"dest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2683,"src":"1517:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2694,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2685,"src":"1523:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2695,"name":"func","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"1530:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":2692,"name":"_call","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2869,"src":"1511:5:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":2696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1511:24:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2697,"nodeType":"ExpressionStatement","src":"1511:24:23"}]},"functionSelector":"b61d27f6","id":2699,"implemented":true,"kind":"function","modifiers":[{"id":2690,"kind":"modifierInvocation","modifierName":{"id":2689,"name":"_requireFromEntryPointOrFactory","nameLocations":["1469:31:23"],"nodeType":"IdentifierPath","referencedDeclaration":2651,"src":"1469:31:23"},"nodeType":"ModifierInvocation","src":"1469:31:23"}],"name":"execute","nameLocation":"1372:7:23","nodeType":"FunctionDefinition","parameters":{"id":2688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2683,"mutability":"mutable","name":"dest","nameLocation":"1397:4:23","nodeType":"VariableDeclaration","scope":2699,"src":"1389:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2682,"name":"address","nodeType":"ElementaryTypeName","src":"1389:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2685,"mutability":"mutable","name":"value","nameLocation":"1419:5:23","nodeType":"VariableDeclaration","scope":2699,"src":"1411:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2684,"name":"uint256","nodeType":"ElementaryTypeName","src":"1411:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2687,"mutability":"mutable","name":"func","nameLocation":"1449:4:23","nodeType":"VariableDeclaration","scope":2699,"src":"1434:19:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2686,"name":"bytes","nodeType":"ElementaryTypeName","src":"1434:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1379:80:23"},"returnParameters":{"id":2691,"nodeType":"ParameterList","parameters":[],"src":"1501:0:23"},"scope":2938,"src":"1363:179:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2756,"nodeType":"Block","src":"1718:262:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2714,"name":"dests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2702,"src":"1736:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1742:6:23","memberName":"length","nodeType":"MemberAccess","src":"1736:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2716,"name":"funcs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2708,"src":"1752:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":2717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1758:6:23","memberName":"length","nodeType":"MemberAccess","src":"1752:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1736:28:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"77726f6e67206172726179206c656e67746873","id":2719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1766:21:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_046f63b53432b31c38dcec6b5f05e3d65602d684f9163a89310aaaf94e08558e","typeString":"literal_string \"wrong array lengths\""},"value":"wrong array lengths"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_046f63b53432b31c38dcec6b5f05e3d65602d684f9163a89310aaaf94e08558e","typeString":"literal_string \"wrong array lengths\""}],"id":2713,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1728:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1728:60:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2721,"nodeType":"ExpressionStatement","src":"1728:60:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2723,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2705,"src":"1806:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1813:6:23","memberName":"length","nodeType":"MemberAccess","src":"1806:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2725,"name":"funcs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2708,"src":"1823:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":2726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1829:6:23","memberName":"length","nodeType":"MemberAccess","src":"1823:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1806:29:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"77726f6e672076616c756573206c656e67746873","id":2728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1837:22:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_200ffcddc5999f8f8cc5e29beb35e90fc602bae6d6023fa77e27cdc95bdcc448","typeString":"literal_string \"wrong values lengths\""},"value":"wrong values lengths"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_200ffcddc5999f8f8cc5e29beb35e90fc602bae6d6023fa77e27cdc95bdcc448","typeString":"literal_string \"wrong values lengths\""}],"id":2722,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1798:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1798:62:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2730,"nodeType":"ExpressionStatement","src":"1798:62:23"},{"body":{"id":2754,"nodeType":"Block","src":"1913:61:23","statements":[{"expression":{"arguments":[{"baseExpression":{"id":2743,"name":"dests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2702,"src":"1933:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2745,"indexExpression":{"id":2744,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"1939:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1933:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2746,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2705,"src":"1943:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2748,"indexExpression":{"id":2747,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"1950:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1943:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":2749,"name":"funcs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2708,"src":"1954:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":2751,"indexExpression":{"id":2750,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"1960:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1954:8:23","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":2742,"name":"_call","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2869,"src":"1927:5:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":2752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1927:36:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2753,"nodeType":"ExpressionStatement","src":"1927:36:23"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2735,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"1890:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2736,"name":"dests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2702,"src":"1894:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1900:6:23","memberName":"length","nodeType":"MemberAccess","src":"1894:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1890:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2755,"initializationExpression":{"assignments":[2732],"declarations":[{"constant":false,"id":2732,"mutability":"mutable","name":"i","nameLocation":"1883:1:23","nodeType":"VariableDeclaration","scope":2755,"src":"1875:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2731,"name":"uint256","nodeType":"ElementaryTypeName","src":"1875:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2734,"initialValue":{"hexValue":"30","id":2733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1887:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1875:13:23"},"loopExpression":{"expression":{"id":2740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1908:3:23","subExpression":{"id":2739,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"1908:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2741,"nodeType":"ExpressionStatement","src":"1908:3:23"},"nodeType":"ForStatement","src":"1870:104:23"}]},"functionSelector":"47e1da2a","id":2757,"implemented":true,"kind":"function","modifiers":[{"id":2711,"kind":"modifierInvocation","modifierName":{"id":2710,"name":"_requireFromEntryPointOrFactory","nameLocations":["1686:31:23"],"nodeType":"IdentifierPath","referencedDeclaration":2651,"src":"1686:31:23"},"nodeType":"ModifierInvocation","src":"1686:31:23"}],"name":"executeBatch","nameLocation":"1557:12:23","nodeType":"FunctionDefinition","parameters":{"id":2709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2702,"mutability":"mutable","name":"dests","nameLocation":"1598:5:23","nodeType":"VariableDeclaration","scope":2757,"src":"1579:24:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2700,"name":"address","nodeType":"ElementaryTypeName","src":"1579:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2701,"nodeType":"ArrayTypeName","src":"1579:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2705,"mutability":"mutable","name":"values","nameLocation":"1632:6:23","nodeType":"VariableDeclaration","scope":2757,"src":"1613:25:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2703,"name":"uint256","nodeType":"ElementaryTypeName","src":"1613:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2704,"nodeType":"ArrayTypeName","src":"1613:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2708,"mutability":"mutable","name":"funcs","nameLocation":"1665:5:23","nodeType":"VariableDeclaration","scope":2757,"src":"1648:22:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":2706,"name":"bytes","nodeType":"ElementaryTypeName","src":"1648:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":2707,"nodeType":"ArrayTypeName","src":"1648:7:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"1569:107:23"},"returnParameters":{"id":2712,"nodeType":"ParameterList","parameters":[],"src":"1718:0:23"},"scope":2938,"src":"1548:432:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[224],"body":{"id":2818,"nodeType":"Block","src":"2128:347:23","statements":[{"assignments":[2769],"declarations":[{"constant":false,"id":2769,"mutability":"mutable","name":"hash","nameLocation":"2146:4:23","nodeType":"VariableDeclaration","scope":2818,"src":"2138:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2768,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2138:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2773,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2770,"name":"userOpHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2762,"src":"2153:10:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2164:22:23","memberName":"toEthSignedMessageHash","nodeType":"MemberAccess","referencedDeclaration":2053,"src":"2153:33:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_bytes32_$attached_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (bytes32)"}},"id":2772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2153:35:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2138:50:23"},{"assignments":[2778],"declarations":[{"constant":false,"id":2778,"mutability":"mutable","name":"signatures","nameLocation":"2213:10:23","nodeType":"VariableDeclaration","scope":2818,"src":"2198:25:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":2776,"name":"bytes","nodeType":"ElementaryTypeName","src":"2198:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":2777,"nodeType":"ArrayTypeName","src":"2198:7:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"id":2788,"initialValue":{"arguments":[{"expression":{"id":2781,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2760,"src":"2237:6:23","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":2782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2244:9:23","memberName":"signature","nodeType":"MemberAccess","referencedDeclaration":908,"src":"2237:16:23","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"baseExpression":{"id":2784,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2256:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2783,"name":"bytes","nodeType":"ElementaryTypeName","src":"2256:5:23","typeDescriptions":{}}},"id":2785,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"2256:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"type(bytes memory[] memory)"}}],"id":2786,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2255:9:23","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"type(bytes memory[] memory)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_type$_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_$","typeString":"type(bytes memory[] memory)"}],"expression":{"id":2779,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2226:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2780,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2230:6:23","memberName":"decode","nodeType":"MemberAccess","src":"2226:10:23","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2226:39:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"2198:67:23"},{"body":{"id":2814,"nodeType":"Block","src":"2320:131:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2800,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2623,"src":"2338:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2802,"indexExpression":{"id":2801,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2790,"src":"2345:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2338:9:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"baseExpression":{"id":2805,"name":"signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2778,"src":"2364:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":2807,"indexExpression":{"id":2806,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2790,"src":"2375:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2364:13:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2803,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"2351:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2356:7:23","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":1952,"src":"2351:12:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$attached_to$_t_bytes32_$","typeString":"function (bytes32,bytes memory) pure returns (address)"}},"id":2808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2351:27:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2338:40:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2813,"nodeType":"IfStatement","src":"2334:107:23","trueBody":{"id":2812,"nodeType":"Block","src":"2380:61:23","statements":[{"expression":{"id":2810,"name":"SIG_VALIDATION_FAILED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"2405:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2767,"id":2811,"nodeType":"Return","src":"2398:28:23"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2793,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2790,"src":"2296:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2794,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2623,"src":"2300:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2307:6:23","memberName":"length","nodeType":"MemberAccess","src":"2300:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2296:17:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2815,"initializationExpression":{"assignments":[2790],"declarations":[{"constant":false,"id":2790,"mutability":"mutable","name":"i","nameLocation":"2289:1:23","nodeType":"VariableDeclaration","scope":2815,"src":"2281:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2789,"name":"uint256","nodeType":"ElementaryTypeName","src":"2281:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2792,"initialValue":{"hexValue":"30","id":2791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2293:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2281:13:23"},"loopExpression":{"expression":{"id":2798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2315:3:23","subExpression":{"id":2797,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2790,"src":"2315:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2799,"nodeType":"ExpressionStatement","src":"2315:3:23"},"nodeType":"ForStatement","src":"2276:175:23"},{"expression":{"hexValue":"30","id":2816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2467:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2767,"id":2817,"nodeType":"Return","src":"2460:8:23"}]},"id":2819,"implemented":true,"kind":"function","modifiers":[],"name":"_validateSignature","nameLocation":"1995:18:23","nodeType":"FunctionDefinition","overrides":{"id":2764,"nodeType":"OverrideSpecifier","overrides":[],"src":"2101:8:23"},"parameters":{"id":2763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2760,"mutability":"mutable","name":"userOp","nameLocation":"2046:6:23","nodeType":"VariableDeclaration","scope":2819,"src":"2023:29:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":2759,"nodeType":"UserDefinedTypeName","pathNode":{"id":2758,"name":"UserOperation","nameLocations":["2023:13:23"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"2023:13:23"},"referencedDeclaration":909,"src":"2023:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$909_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"},{"constant":false,"id":2762,"mutability":"mutable","name":"userOpHash","nameLocation":"2070:10:23","nodeType":"VariableDeclaration","scope":2819,"src":"2062:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2761,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2062:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2013:73:23"},"returnParameters":{"id":2767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2766,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2819,"src":"2119:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2765,"name":"uint256","nodeType":"ElementaryTypeName","src":"2119:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2118:9:23"},"scope":2938,"src":"1986:489:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2842,"nodeType":"Block","src":"2543:155:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2826,"name":"initialOwners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2822,"src":"2561:13:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2575:6:23","memberName":"length","nodeType":"MemberAccess","src":"2561:20:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2584:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2561:24:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6e6f206f776e657273","id":2830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2587:11:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_788f6686002b78bf87a5d2bb43a41d3facc8f0725c661cc11a8fea8d1d606572","typeString":"literal_string \"no owners\""},"value":"no owners"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_788f6686002b78bf87a5d2bb43a41d3facc8f0725c661cc11a8fea8d1d606572","typeString":"literal_string \"no owners\""}],"id":2825,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2553:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2553:46:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2832,"nodeType":"ExpressionStatement","src":"2553:46:23"},{"expression":{"id":2835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2833,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2623,"src":"2609:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2834,"name":"initialOwners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2822,"src":"2618:13:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"src":"2609:22:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2836,"nodeType":"ExpressionStatement","src":"2609:22:23"},{"eventCall":{"arguments":[{"id":2838,"name":"_entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2620,"src":"2664:11:23","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"}},{"id":2839,"name":"initialOwners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2822,"src":"2677:13:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":2837,"name":"WalletInitialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2631,"src":"2646:17:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_IEntryPoint_$758_$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (contract IEntryPoint,address[] memory)"}},"id":2840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2646:45:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2841,"nodeType":"EmitStatement","src":"2641:50:23"}]},"id":2843,"implemented":true,"kind":"function","modifiers":[],"name":"_initialize","nameLocation":"2490:11:23","nodeType":"FunctionDefinition","parameters":{"id":2823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2822,"mutability":"mutable","name":"initialOwners","nameLocation":"2519:13:23","nodeType":"VariableDeclaration","scope":2843,"src":"2502:30:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2820,"name":"address","nodeType":"ElementaryTypeName","src":"2502:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2821,"nodeType":"ArrayTypeName","src":"2502:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"2501:32:23"},"returnParameters":{"id":2824,"nodeType":"ParameterList","parameters":[],"src":"2543:0:23"},"scope":2938,"src":"2481:217:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2868,"nodeType":"Block","src":"2778:212:23","statements":[{"assignments":[2853,2855],"declarations":[{"constant":false,"id":2853,"mutability":"mutable","name":"success","nameLocation":"2794:7:23","nodeType":"VariableDeclaration","scope":2868,"src":"2789:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2852,"name":"bool","nodeType":"ElementaryTypeName","src":"2789:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2855,"mutability":"mutable","name":"result","nameLocation":"2816:6:23","nodeType":"VariableDeclaration","scope":2868,"src":"2803:19:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2854,"name":"bytes","nodeType":"ElementaryTypeName","src":"2803:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2862,"initialValue":{"arguments":[{"id":2860,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"2852:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2856,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"2826:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2833:4:23","memberName":"call","nodeType":"MemberAccess","src":"2826:11:23","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2858,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2847,"src":"2845:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2826:25:23","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2826:31:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2788:69:23"},{"condition":{"id":2864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2871:8:23","subExpression":{"id":2863,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2853,"src":"2872:7:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2867,"nodeType":"IfStatement","src":"2867:117:23","trueBody":{"id":2866,"nodeType":"Block","src":"2881:103:23","statements":[{"AST":{"nodeType":"YulBlock","src":"2904:70:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"2933:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"2941:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2929:3:23"},"nodeType":"YulFunctionCall","src":"2929:15:23"},{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"2952:6:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2946:5:23"},"nodeType":"YulFunctionCall","src":"2946:13:23"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2922:6:23"},"nodeType":"YulFunctionCall","src":"2922:38:23"},"nodeType":"YulExpressionStatement","src":"2922:38:23"}]},"evmVersion":"paris","externalReferences":[{"declaration":2855,"isOffset":false,"isSlot":false,"src":"2933:6:23","valueSize":1},{"declaration":2855,"isOffset":false,"isSlot":false,"src":"2952:6:23","valueSize":1}],"id":2865,"nodeType":"InlineAssembly","src":"2895:79:23"}]}}]},"id":2869,"implemented":true,"kind":"function","modifiers":[],"name":"_call","nameLocation":"2713:5:23","nodeType":"FunctionDefinition","parameters":{"id":2850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2845,"mutability":"mutable","name":"target","nameLocation":"2727:6:23","nodeType":"VariableDeclaration","scope":2869,"src":"2719:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2844,"name":"address","nodeType":"ElementaryTypeName","src":"2719:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2847,"mutability":"mutable","name":"value","nameLocation":"2743:5:23","nodeType":"VariableDeclaration","scope":2869,"src":"2735:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2846,"name":"uint256","nodeType":"ElementaryTypeName","src":"2735:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2849,"mutability":"mutable","name":"data","nameLocation":"2763:4:23","nodeType":"VariableDeclaration","scope":2869,"src":"2750:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2848,"name":"bytes","nodeType":"ElementaryTypeName","src":"2750:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2718:50:23"},"returnParameters":{"id":2851,"nodeType":"ParameterList","parameters":[],"src":"2778:0:23"},"scope":2938,"src":"2704:286:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2882,"nodeType":"Block","src":"3098:46:23","statements":[{"expression":{"arguments":[{"id":2879,"name":"signatures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2872,"src":"3126:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}],"expression":{"id":2877,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3115:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2878,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3119:6:23","memberName":"encode","nodeType":"MemberAccess","src":"3115:10:23","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3115:22:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2876,"id":2881,"nodeType":"Return","src":"3108:29:23"}]},"functionSelector":"1d06d40d","id":2883,"implemented":true,"kind":"function","modifiers":[],"name":"encodeSignatures","nameLocation":"3005:16:23","nodeType":"FunctionDefinition","parameters":{"id":2873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2872,"mutability":"mutable","name":"signatures","nameLocation":"3046:10:23","nodeType":"VariableDeclaration","scope":2883,"src":"3031:25:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":2870,"name":"bytes","nodeType":"ElementaryTypeName","src":"3031:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":2871,"nodeType":"ArrayTypeName","src":"3031:7:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"3021:41:23"},"returnParameters":{"id":2876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2875,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2883,"src":"3084:12:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2874,"name":"bytes","nodeType":"ElementaryTypeName","src":"3084:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3083:14:23"},"scope":2938,"src":"2996:148:23","stateMutability":"pure","virtual":false,"visibility":"public"},{"baseFunctions":[162],"body":{"id":2892,"nodeType":"Block","src":"3215:35:23","statements":[{"expression":{"id":2890,"name":"_entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2620,"src":"3232:11:23","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"}},"functionReturnParameters":2889,"id":2891,"nodeType":"Return","src":"3225:18:23"}]},"functionSelector":"b0d691fe","id":2893,"implemented":true,"kind":"function","modifiers":[],"name":"entryPoint","nameLocation":"3159:10:23","nodeType":"FunctionDefinition","overrides":{"id":2885,"nodeType":"OverrideSpecifier","overrides":[],"src":"3184:8:23"},"parameters":{"id":2884,"nodeType":"ParameterList","parameters":[],"src":"3169:2:23"},"returnParameters":{"id":2889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2888,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2893,"src":"3202:11:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"},"typeName":{"id":2887,"nodeType":"UserDefinedTypeName","pathNode":{"id":2886,"name":"IEntryPoint","nameLocations":["3202:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":758,"src":"3202:11:23"},"referencedDeclaration":758,"src":"3202:11:23","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"}},"visibility":"internal"}],"src":"3201:13:23"},"scope":2938,"src":"3150:100:23","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":2907,"nodeType":"Block","src":"3308:61:23","statements":[{"expression":{"arguments":[{"arguments":[{"id":2903,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3356:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_Wallet_$2938","typeString":"contract Wallet"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Wallet_$2938","typeString":"contract Wallet"}],"id":2902,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3348:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2901,"name":"address","nodeType":"ElementaryTypeName","src":"3348:7:23","typeDescriptions":{}}},"id":2904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3348:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2898,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[2893],"referencedDeclaration":2893,"src":"3325:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_IEntryPoint_$758_$","typeString":"function () view returns (contract IEntryPoint)"}},"id":2899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3325:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"}},"id":2900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3338:9:23","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":851,"src":"3325:22:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3325:37:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2897,"id":2906,"nodeType":"Return","src":"3318:44:23"}]},"functionSelector":"c399ec88","id":2908,"implemented":true,"kind":"function","modifiers":[],"name":"getDeposit","nameLocation":"3265:10:23","nodeType":"FunctionDefinition","parameters":{"id":2894,"nodeType":"ParameterList","parameters":[],"src":"3275:2:23"},"returnParameters":{"id":2897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2896,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2908,"src":"3299:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2895,"name":"uint256","nodeType":"ElementaryTypeName","src":"3299:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3298:9:23"},"scope":2938,"src":"3256:113:23","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":2923,"nodeType":"Block","src":"3412:72:23","statements":[{"expression":{"arguments":[{"arguments":[{"id":2919,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3471:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_Wallet_$2938","typeString":"contract Wallet"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Wallet_$2938","typeString":"contract Wallet"}],"id":2918,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3463:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2917,"name":"address","nodeType":"ElementaryTypeName","src":"3463:7:23","typeDescriptions":{}}},"id":2920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3463:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2911,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[2893],"referencedDeclaration":2893,"src":"3422:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_IEntryPoint_$758_$","typeString":"function () view returns (contract IEntryPoint)"}},"id":2912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3422:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"}},"id":2913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3435:9:23","memberName":"depositTo","nodeType":"MemberAccess","referencedDeclaration":857,"src":"3422:22:23","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_address_$returns$__$","typeString":"function (address) payable external"}},"id":2916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"id":2914,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3452:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3456:5:23","memberName":"value","nodeType":"MemberAccess","src":"3452:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3422:40:23","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_address_$returns$__$value","typeString":"function (address) payable external"}},"id":2921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3422:55:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2922,"nodeType":"ExpressionStatement","src":"3422:55:23"}]},"functionSelector":"4a58db19","id":2924,"implemented":true,"kind":"function","modifiers":[],"name":"addDeposit","nameLocation":"3384:10:23","nodeType":"FunctionDefinition","parameters":{"id":2909,"nodeType":"ParameterList","parameters":[],"src":"3394:2:23"},"returnParameters":{"id":2910,"nodeType":"ParameterList","parameters":[],"src":"3412:0:23"},"scope":2938,"src":"3375:109:23","stateMutability":"payable","virtual":false,"visibility":"public"},{"baseFunctions":[1640],"body":{"id":2932,"nodeType":"Block","src":"3595:2:23","statements":[]},"id":2933,"implemented":true,"kind":"function","modifiers":[{"id":2930,"kind":"modifierInvocation","modifierName":{"id":2929,"name":"_requireFromEntryPointOrFactory","nameLocations":["3563:31:23"],"nodeType":"IdentifierPath","referencedDeclaration":2651,"src":"3563:31:23"},"nodeType":"ModifierInvocation","src":"3563:31:23"}],"name":"_authorizeUpgrade","nameLocation":"3499:17:23","nodeType":"FunctionDefinition","overrides":{"id":2928,"nodeType":"OverrideSpecifier","overrides":[],"src":"3554:8:23"},"parameters":{"id":2927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2926,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2933,"src":"3526:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2925,"name":"address","nodeType":"ElementaryTypeName","src":"3526:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3516:23:23"},"returnParameters":{"id":2931,"nodeType":"ParameterList","parameters":[],"src":"3595:0:23"},"scope":2938,"src":"3490:107:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2936,"nodeType":"Block","src":"3630:2:23","statements":[]},"id":2937,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2934,"nodeType":"ParameterList","parameters":[],"src":"3610:2:23"},"returnParameters":{"id":2935,"nodeType":"ParameterList","parameters":[],"src":"3630:0:23"},"scope":2938,"src":"3603:29:23","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":2939,"src":"518:3116:23","usedErrors":[]}],"src":"36:3598:23"},"id":23},"contracts/WalletFactory.sol":{"ast":{"absolutePath":"contracts/WalletFactory.sol","exportedSymbols":{"Create2":[1831],"ERC1967Proxy":[1132],"IEntryPoint":[758],"Wallet":[2938],"WalletFactory":[3102]},"id":3103,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":2940,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:24"},{"absolutePath":"@account-abstraction/contracts/interfaces/IEntryPoint.sol","file":"@account-abstraction/contracts/interfaces/IEntryPoint.sol","id":2942,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3103,"sourceUnit":759,"src":"62:86:24","symbolAliases":[{"foreign":{"id":2941,"name":"IEntryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"70:11:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/Wallet.sol","file":"./Wallet.sol","id":2944,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3103,"sourceUnit":2939,"src":"149:36:24","symbolAliases":[{"foreign":{"id":2943,"name":"Wallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"157:6:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Create2.sol","file":"@openzeppelin/contracts/utils/Create2.sol","id":2946,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3103,"sourceUnit":1832,"src":"186:66:24","symbolAliases":[{"foreign":{"id":2945,"name":"Create2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"194:7:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol","file":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol","id":2948,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3103,"sourceUnit":1133,"src":"253:84:24","symbolAliases":[{"foreign":{"id":2947,"name":"ERC1967Proxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1132,"src":"261:12:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"WalletFactory","contractDependencies":[1132,2938],"contractKind":"contract","fullyImplemented":true,"id":3102,"linearizedBaseContracts":[3102],"name":"WalletFactory","nameLocation":"349:13:24","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"8117abc1","id":2951,"mutability":"immutable","name":"walletImplementation","nameLocation":"393:20:24","nodeType":"VariableDeclaration","scope":3102,"src":"369:44:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_Wallet_$2938","typeString":"contract Wallet"},"typeName":{"id":2950,"nodeType":"UserDefinedTypeName","pathNode":{"id":2949,"name":"Wallet","nameLocations":["369:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":2938,"src":"369:6:24"},"referencedDeclaration":2938,"src":"369:6:24","typeDescriptions":{"typeIdentifier":"t_contract$_Wallet_$2938","typeString":"contract Wallet"}},"visibility":"public"},{"body":{"id":2969,"nodeType":"Block","src":"456:77:24","statements":[{"expression":{"id":2967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2957,"name":"walletImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2951,"src":"466:20:24","typeDescriptions":{"typeIdentifier":"t_contract$_Wallet_$2938","typeString":"contract Wallet"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2961,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"500:10:24","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"}},{"arguments":[{"id":2964,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"520:4:24","typeDescriptions":{"typeIdentifier":"t_contract$_WalletFactory_$3102","typeString":"contract WalletFactory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_WalletFactory_$3102","typeString":"contract WalletFactory"}],"id":2963,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"512:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2962,"name":"address","nodeType":"ElementaryTypeName","src":"512:7:24","typeDescriptions":{}}},"id":2965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"512:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"489:10:24","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$_t_contract$_IEntryPoint_$758_$_t_address_$returns$_t_contract$_Wallet_$2938_$","typeString":"function (contract IEntryPoint,address) returns (contract Wallet)"},"typeName":{"id":2959,"nodeType":"UserDefinedTypeName","pathNode":{"id":2958,"name":"Wallet","nameLocations":["493:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":2938,"src":"493:6:24"},"referencedDeclaration":2938,"src":"493:6:24","typeDescriptions":{"typeIdentifier":"t_contract$_Wallet_$2938","typeString":"contract Wallet"}}},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"489:37:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Wallet_$2938","typeString":"contract Wallet"}},"src":"466:60:24","typeDescriptions":{"typeIdentifier":"t_contract$_Wallet_$2938","typeString":"contract Wallet"}},"id":2968,"nodeType":"ExpressionStatement","src":"466:60:24"}]},"id":2970,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2954,"mutability":"mutable","name":"entryPoint","nameLocation":"444:10:24","nodeType":"VariableDeclaration","scope":2970,"src":"432:22:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"},"typeName":{"id":2953,"nodeType":"UserDefinedTypeName","pathNode":{"id":2952,"name":"IEntryPoint","nameLocations":["432:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":758,"src":"432:11:24"},"referencedDeclaration":758,"src":"432:11:24","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$758","typeString":"contract IEntryPoint"}},"visibility":"internal"}],"src":"431:24:24"},"returnParameters":{"id":2956,"nodeType":"ParameterList","parameters":[],"src":"456:0:24"},"scope":3102,"src":"420:113:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3043,"nodeType":"Block","src":"649:453:24","statements":[{"assignments":[2982],"declarations":[{"constant":false,"id":2982,"mutability":"mutable","name":"addr","nameLocation":"667:4:24","nodeType":"VariableDeclaration","scope":3043,"src":"659:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2981,"name":"address","nodeType":"ElementaryTypeName","src":"659:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2987,"initialValue":{"arguments":[{"id":2984,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"685:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"id":2985,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2975,"src":"693:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2983,"name":"getAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3101,"src":"674:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_address_$dyn_memory_ptr_$_t_uint256_$returns$_t_address_$","typeString":"function (address[] memory,uint256) view returns (address)"}},"id":2986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"674:24:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"659:39:24"},{"assignments":[2989],"declarations":[{"constant":false,"id":2989,"mutability":"mutable","name":"codeSize","nameLocation":"716:8:24","nodeType":"VariableDeclaration","scope":3043,"src":"708:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2988,"name":"uint256","nodeType":"ElementaryTypeName","src":"708:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2993,"initialValue":{"expression":{"expression":{"id":2990,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"727:4:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"732:4:24","memberName":"code","nodeType":"MemberAccess","src":"727:9:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"737:6:24","memberName":"length","nodeType":"MemberAccess","src":"727:16:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"708:35:24"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2994,"name":"codeSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2989,"src":"757:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"768:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"757:12:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3005,"nodeType":"IfStatement","src":"753:71:24","trueBody":{"id":3004,"nodeType":"Block","src":"771:53:24","statements":[{"expression":{"arguments":[{"arguments":[{"id":3000,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"807:4:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2999,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"799:8:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":2998,"name":"address","nodeType":"ElementaryTypeName","src":"799:8:24","stateMutability":"payable","typeDescriptions":{}}},"id":3001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"799:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":2997,"name":"Wallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"792:6:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Wallet_$2938_$","typeString":"type(contract Wallet)"}},"id":3002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"792:21:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Wallet_$2938","typeString":"contract Wallet"}},"functionReturnParameters":2980,"id":3003,"nodeType":"Return","src":"785:28:24"}]}},{"assignments":[3007],"declarations":[{"constant":false,"id":3007,"mutability":"mutable","name":"walletInit","nameLocation":"847:10:24","nodeType":"VariableDeclaration","scope":3043,"src":"834:23:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3006,"name":"bytes","nodeType":"ElementaryTypeName","src":"834:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3014,"initialValue":{"arguments":[{"expression":{"id":3010,"name":"Wallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"875:6:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Wallet_$2938_$","typeString":"type(contract Wallet)"}},"id":3011,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"882:10:24","memberName":"initialize","nodeType":"MemberAccess","referencedDeclaration":2681,"src":"875:17:24","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function Wallet.initialize(address[] memory)"}},{"id":3012,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"894:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_declaration_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function Wallet.initialize(address[] memory)"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"expression":{"id":3008,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"860:3:24","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3009,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"864:10:24","memberName":"encodeCall","nodeType":"MemberAccess","src":"860:14:24","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"860:41:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"834:67:24"},{"assignments":[3017],"declarations":[{"constant":false,"id":3017,"mutability":"mutable","name":"proxy","nameLocation":"924:5:24","nodeType":"VariableDeclaration","scope":3043,"src":"911:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ERC1967Proxy_$1132","typeString":"contract ERC1967Proxy"},"typeName":{"id":3016,"nodeType":"UserDefinedTypeName","pathNode":{"id":3015,"name":"ERC1967Proxy","nameLocations":["911:12:24"],"nodeType":"IdentifierPath","referencedDeclaration":1132,"src":"911:12:24"},"referencedDeclaration":1132,"src":"911:12:24","typeDescriptions":{"typeIdentifier":"t_contract$_ERC1967Proxy_$1132","typeString":"contract ERC1967Proxy"}},"visibility":"internal"}],"id":3032,"initialValue":{"arguments":[{"arguments":[{"id":3028,"name":"walletImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2951,"src":"991:20:24","typeDescriptions":{"typeIdentifier":"t_contract$_Wallet_$2938","typeString":"contract Wallet"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Wallet_$2938","typeString":"contract Wallet"}],"id":3027,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"983:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3026,"name":"address","nodeType":"ElementaryTypeName","src":"983:7:24","typeDescriptions":{}}},"id":3029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"983:29:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3030,"name":"walletInit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"1026:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"932:16:24","typeDescriptions":{"typeIdentifier":"t_function_creation_payable$_t_address_$_t_bytes_memory_ptr_$returns$_t_contract$_ERC1967Proxy_$1132_$","typeString":"function (address,bytes memory) payable returns (contract ERC1967Proxy)"},"typeName":{"id":3019,"nodeType":"UserDefinedTypeName","pathNode":{"id":3018,"name":"ERC1967Proxy","nameLocations":["936:12:24"],"nodeType":"IdentifierPath","referencedDeclaration":1132,"src":"936:12:24"},"referencedDeclaration":1132,"src":"936:12:24","typeDescriptions":{"typeIdentifier":"t_contract$_ERC1967Proxy_$1132","typeString":"contract ERC1967Proxy"}}},"id":3025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["salt"],"nodeType":"FunctionCallOptions","options":[{"arguments":[{"id":3023,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2975,"src":"963:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3022,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"955:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3021,"name":"bytes32","nodeType":"ElementaryTypeName","src":"955:7:24","typeDescriptions":{}}},"id":3024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"src":"932:37:24","typeDescriptions":{"typeIdentifier":"t_function_creation_payable$_t_address_$_t_bytes_memory_ptr_$returns$_t_contract$_ERC1967Proxy_$1132_$salt","typeString":"function (address,bytes memory) payable returns (contract ERC1967Proxy)"}},"id":3031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"932:114:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ERC1967Proxy_$1132","typeString":"contract ERC1967Proxy"}},"nodeType":"VariableDeclarationStatement","src":"911:135:24"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":3038,"name":"proxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3017,"src":"1087:5:24","typeDescriptions":{"typeIdentifier":"t_contract$_ERC1967Proxy_$1132","typeString":"contract ERC1967Proxy"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ERC1967Proxy_$1132","typeString":"contract ERC1967Proxy"}],"id":3037,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1079:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3036,"name":"address","nodeType":"ElementaryTypeName","src":"1079:7:24","typeDescriptions":{}}},"id":3039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1079:14:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3035,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1071:8:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":3034,"name":"address","nodeType":"ElementaryTypeName","src":"1071:8:24","stateMutability":"payable","typeDescriptions":{}}},"id":3040,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1071:23:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":3033,"name":"Wallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"1064:6:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Wallet_$2938_$","typeString":"type(contract Wallet)"}},"id":3041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1064:31:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Wallet_$2938","typeString":"contract Wallet"}},"functionReturnParameters":2980,"id":3042,"nodeType":"Return","src":"1057:38:24"}]},"functionSelector":"b54c02f2","id":3044,"implemented":true,"kind":"function","modifiers":[],"name":"createAccount","nameLocation":"548:13:24","nodeType":"FunctionDefinition","parameters":{"id":2976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2973,"mutability":"mutable","name":"owners","nameLocation":"588:6:24","nodeType":"VariableDeclaration","scope":3044,"src":"571:23:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2971,"name":"address","nodeType":"ElementaryTypeName","src":"571:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2972,"nodeType":"ArrayTypeName","src":"571:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2975,"mutability":"mutable","name":"salt","nameLocation":"612:4:24","nodeType":"VariableDeclaration","scope":3044,"src":"604:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2974,"name":"uint256","nodeType":"ElementaryTypeName","src":"604:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"561:61:24"},"returnParameters":{"id":2980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2979,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3044,"src":"641:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_Wallet_$2938","typeString":"contract Wallet"},"typeName":{"id":2978,"nodeType":"UserDefinedTypeName","pathNode":{"id":2977,"name":"Wallet","nameLocations":["641:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":2938,"src":"641:6:24"},"referencedDeclaration":2938,"src":"641:6:24","typeDescriptions":{"typeIdentifier":"t_contract$_Wallet_$2938","typeString":"contract Wallet"}},"visibility":"internal"}],"src":"640:8:24"},"scope":3102,"src":"539:563:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3100,"nodeType":"Block","src":"1219:470:24","statements":[{"assignments":[3055],"declarations":[{"constant":false,"id":3055,"mutability":"mutable","name":"walletInit","nameLocation":"1242:10:24","nodeType":"VariableDeclaration","scope":3100,"src":"1229:23:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3054,"name":"bytes","nodeType":"ElementaryTypeName","src":"1229:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3062,"initialValue":{"arguments":[{"expression":{"id":3058,"name":"Wallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"1270:6:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Wallet_$2938_$","typeString":"type(contract Wallet)"}},"id":3059,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1277:10:24","memberName":"initialize","nodeType":"MemberAccess","referencedDeclaration":2681,"src":"1270:17:24","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function Wallet.initialize(address[] memory)"}},{"id":3060,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3047,"src":"1289:6:24","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_declaration_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function Wallet.initialize(address[] memory)"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"expression":{"id":3056,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1255:3:24","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3057,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1259:10:24","memberName":"encodeCall","nodeType":"MemberAccess","src":"1255:14:24","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1255:41:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1229:67:24"},{"assignments":[3064],"declarations":[{"constant":false,"id":3064,"mutability":"mutable","name":"proxyConstructor","nameLocation":"1319:16:24","nodeType":"VariableDeclaration","scope":3100,"src":"1306:29:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3063,"name":"bytes","nodeType":"ElementaryTypeName","src":"1306:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3073,"initialValue":{"arguments":[{"arguments":[{"id":3069,"name":"walletImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2951,"src":"1370:20:24","typeDescriptions":{"typeIdentifier":"t_contract$_Wallet_$2938","typeString":"contract Wallet"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Wallet_$2938","typeString":"contract Wallet"}],"id":3068,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1362:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3067,"name":"address","nodeType":"ElementaryTypeName","src":"1362:7:24","typeDescriptions":{}}},"id":3070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1362:29:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3071,"name":"walletInit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3055,"src":"1405:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3065,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1338:3:24","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3066,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1342:6:24","memberName":"encode","nodeType":"MemberAccess","src":"1338:10:24","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1338:87:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1306:119:24"},{"assignments":[3075],"declarations":[{"constant":false,"id":3075,"mutability":"mutable","name":"bytecode","nameLocation":"1448:8:24","nodeType":"VariableDeclaration","scope":3100,"src":"1435:21:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3074,"name":"bytes","nodeType":"ElementaryTypeName","src":"1435:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3084,"initialValue":{"arguments":[{"expression":{"arguments":[{"id":3079,"name":"ERC1967Proxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1132,"src":"1494:12:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1967Proxy_$1132_$","typeString":"type(contract ERC1967Proxy)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_ERC1967Proxy_$1132_$","typeString":"type(contract ERC1967Proxy)"}],"id":3078,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1489:4:24","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1489:18:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_ERC1967Proxy_$1132","typeString":"type(contract ERC1967Proxy)"}},"id":3081,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1508:12:24","memberName":"creationCode","nodeType":"MemberAccess","src":"1489:31:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3082,"name":"proxyConstructor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"1534:16:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3076,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1459:3:24","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3077,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1463:12:24","memberName":"encodePacked","nodeType":"MemberAccess","src":"1459:16:24","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1459:101:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1435:125:24"},{"assignments":[3086],"declarations":[{"constant":false,"id":3086,"mutability":"mutable","name":"bytecodeHash","nameLocation":"1579:12:24","nodeType":"VariableDeclaration","scope":3100,"src":"1571:20:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3085,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1571:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3090,"initialValue":{"arguments":[{"id":3088,"name":"bytecode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3075,"src":"1604:8:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3087,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1594:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1594:19:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1571:42:24"},{"expression":{"arguments":[{"arguments":[{"id":3095,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3049,"src":"1662:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3094,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1654:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3093,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1654:7:24","typeDescriptions":{}}},"id":3096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1654:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3097,"name":"bytecodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"1669:12:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3091,"name":"Create2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"1631:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Create2_$1831_$","typeString":"type(library Create2)"}},"id":3092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1639:14:24","memberName":"computeAddress","nodeType":"MemberAccess","referencedDeclaration":1791,"src":"1631:22:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,bytes32) view returns (address)"}},"id":3098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1631:51:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3053,"id":3099,"nodeType":"Return","src":"1624:58:24"}]},"functionSelector":"94f7e8e0","id":3101,"implemented":true,"kind":"function","modifiers":[],"name":"getAddress","nameLocation":"1117:10:24","nodeType":"FunctionDefinition","parameters":{"id":3050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3047,"mutability":"mutable","name":"owners","nameLocation":"1154:6:24","nodeType":"VariableDeclaration","scope":3101,"src":"1137:23:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3045,"name":"address","nodeType":"ElementaryTypeName","src":"1137:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3046,"nodeType":"ArrayTypeName","src":"1137:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3049,"mutability":"mutable","name":"salt","nameLocation":"1178:4:24","nodeType":"VariableDeclaration","scope":3101,"src":"1170:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3048,"name":"uint256","nodeType":"ElementaryTypeName","src":"1170:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1127:61:24"},"returnParameters":{"id":3053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3052,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3101,"src":"1210:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3051,"name":"address","nodeType":"ElementaryTypeName","src":"1210:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1209:9:24"},"scope":3102,"src":"1108:581:24","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":3103,"src":"340:1351:24","usedErrors":[]}],"src":"36:1655:24"},"id":24},"node_modules/@openzeppelin/contracts/proxy/utils/Address.sol":{"ast":{"absolutePath":"node_modules/@openzeppelin/contracts/proxy/utils/Address.sol","exportedSymbols":{"Address":[3398]},"id":3399,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3104,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:25"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":3105,"nodeType":"StructuredDocumentation","src":"58:67:25","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":3398,"linearizedBaseContracts":[3398],"name":"Address","nameLocation":"134:7:25","nodeType":"ContractDefinition","nodes":[{"body":{"id":3121,"nodeType":"Block","src":"784:311:25","statements":[{"assignments":[3114],"declarations":[{"constant":false,"id":3114,"mutability":"mutable","name":"size","nameLocation":"989:4:25","nodeType":"VariableDeclaration","scope":3121,"src":"981:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3113,"name":"uint256","nodeType":"ElementaryTypeName","src":"981:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3115,"nodeType":"VariableDeclarationStatement","src":"981:12:25"},{"AST":{"nodeType":"YulBlock","src":"1012:52:25","statements":[{"nodeType":"YulAssignment","src":"1026:28:25","value":{"arguments":[{"name":"account","nodeType":"YulIdentifier","src":"1046:7:25"}],"functionName":{"name":"extcodesize","nodeType":"YulIdentifier","src":"1034:11:25"},"nodeType":"YulFunctionCall","src":"1034:20:25"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1026:4:25"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3108,"isOffset":false,"isSlot":false,"src":"1046:7:25","valueSize":1},{"declaration":3114,"isOffset":false,"isSlot":false,"src":"1026:4:25","valueSize":1}],"id":3116,"nodeType":"InlineAssembly","src":"1003:61:25"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3117,"name":"size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3114,"src":"1080:4:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1087:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1080:8:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3112,"id":3120,"nodeType":"Return","src":"1073:15:25"}]},"documentation":{"id":3106,"nodeType":"StructuredDocumentation","src":"148:565:25","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ===="},"id":3122,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"727:10:25","nodeType":"FunctionDefinition","parameters":{"id":3109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3108,"mutability":"mutable","name":"account","nameLocation":"746:7:25","nodeType":"VariableDeclaration","scope":3122,"src":"738:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3107,"name":"address","nodeType":"ElementaryTypeName","src":"738:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"737:17:25"},"returnParameters":{"id":3112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3111,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3122,"src":"778:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3110,"name":"bool","nodeType":"ElementaryTypeName","src":"778:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"777:6:25"},"scope":3398,"src":"718:377:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3155,"nodeType":"Block","src":"2083:241:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3133,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2109:4:25","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3398","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3398","typeString":"library Address"}],"id":3132,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2101:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3131,"name":"address","nodeType":"ElementaryTypeName","src":"2101:7:25","typeDescriptions":{}}},"id":3134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2101:13:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2115:7:25","memberName":"balance","nodeType":"MemberAccess","src":"2101:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3136,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"2126:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2101:31:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":3138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2134:31:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":3130,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2093:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2093:73:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3140,"nodeType":"ExpressionStatement","src":"2093:73:25"},{"assignments":[3142,null],"declarations":[{"constant":false,"id":3142,"mutability":"mutable","name":"success","nameLocation":"2183:7:25","nodeType":"VariableDeclaration","scope":3155,"src":"2178:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3141,"name":"bool","nodeType":"ElementaryTypeName","src":"2178:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":3149,"initialValue":{"arguments":[{"hexValue":"","id":3147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2226:2:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3143,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3125,"src":"2196:9:25","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2206:4:25","memberName":"call","nodeType":"MemberAccess","src":"2196:14:25","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3145,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"2218:6:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2196:29:25","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2196:33:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2177:52:25"},{"expression":{"arguments":[{"id":3151,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"2247:7:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":3152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2256:60:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":3150,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2239:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2239:78:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3154,"nodeType":"ExpressionStatement","src":"2239:78:25"}]},"documentation":{"id":3123,"nodeType":"StructuredDocumentation","src":"1101:906:25","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":3156,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2021:9:25","nodeType":"FunctionDefinition","parameters":{"id":3128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3125,"mutability":"mutable","name":"recipient","nameLocation":"2047:9:25","nodeType":"VariableDeclaration","scope":3156,"src":"2031:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3124,"name":"address","nodeType":"ElementaryTypeName","src":"2031:15:25","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3127,"mutability":"mutable","name":"amount","nameLocation":"2066:6:25","nodeType":"VariableDeclaration","scope":3156,"src":"2058:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3126,"name":"uint256","nodeType":"ElementaryTypeName","src":"2058:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2030:43:25"},"returnParameters":{"id":3129,"nodeType":"ParameterList","parameters":[],"src":"2083:0:25"},"scope":3398,"src":"2012:312:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3172,"nodeType":"Block","src":"3155:84:25","statements":[{"expression":{"arguments":[{"id":3167,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"3185:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3168,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3161,"src":"3193:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":3169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3199:32:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":3166,"name":"functionCall","nodeType":"Identifier","overloadedDeclarations":[3173,3193],"referencedDeclaration":3193,"src":"3172:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":3170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3172:60:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3165,"id":3171,"nodeType":"Return","src":"3165:67:25"}]},"documentation":{"id":3157,"nodeType":"StructuredDocumentation","src":"2330:731:25","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":3173,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3075:12:25","nodeType":"FunctionDefinition","parameters":{"id":3162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3159,"mutability":"mutable","name":"target","nameLocation":"3096:6:25","nodeType":"VariableDeclaration","scope":3173,"src":"3088:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3158,"name":"address","nodeType":"ElementaryTypeName","src":"3088:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3161,"mutability":"mutable","name":"data","nameLocation":"3117:4:25","nodeType":"VariableDeclaration","scope":3173,"src":"3104:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3160,"name":"bytes","nodeType":"ElementaryTypeName","src":"3104:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3087:35:25"},"returnParameters":{"id":3165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3164,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3173,"src":"3141:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3163,"name":"bytes","nodeType":"ElementaryTypeName","src":"3141:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3140:14:25"},"scope":3398,"src":"3066:173:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3192,"nodeType":"Block","src":"3608:76:25","statements":[{"expression":{"arguments":[{"id":3186,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3176,"src":"3647:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3187,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3178,"src":"3655:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3661:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":3189,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3180,"src":"3664:12:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3185,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3213,3263],"referencedDeclaration":3263,"src":"3625:21:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3625:52:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3184,"id":3191,"nodeType":"Return","src":"3618:59:25"}]},"documentation":{"id":3174,"nodeType":"StructuredDocumentation","src":"3245:211:25","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3193,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3470:12:25","nodeType":"FunctionDefinition","parameters":{"id":3181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3176,"mutability":"mutable","name":"target","nameLocation":"3500:6:25","nodeType":"VariableDeclaration","scope":3193,"src":"3492:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3175,"name":"address","nodeType":"ElementaryTypeName","src":"3492:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3178,"mutability":"mutable","name":"data","nameLocation":"3529:4:25","nodeType":"VariableDeclaration","scope":3193,"src":"3516:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3177,"name":"bytes","nodeType":"ElementaryTypeName","src":"3516:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3180,"mutability":"mutable","name":"errorMessage","nameLocation":"3557:12:25","nodeType":"VariableDeclaration","scope":3193,"src":"3543:26:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3179,"name":"string","nodeType":"ElementaryTypeName","src":"3543:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3482:93:25"},"returnParameters":{"id":3184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3183,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3193,"src":"3594:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3182,"name":"bytes","nodeType":"ElementaryTypeName","src":"3594:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3593:14:25"},"scope":3398,"src":"3461:223:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3212,"nodeType":"Block","src":"4189:111:25","statements":[{"expression":{"arguments":[{"id":3206,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3196,"src":"4228:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3207,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"4236:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3208,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3200,"src":"4242:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":3209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4249:43:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":3205,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3213,3263],"referencedDeclaration":3263,"src":"4206:21:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4206:87:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3204,"id":3211,"nodeType":"Return","src":"4199:94:25"}]},"documentation":{"id":3194,"nodeType":"StructuredDocumentation","src":"3690:351:25","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":3213,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4055:21:25","nodeType":"FunctionDefinition","parameters":{"id":3201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3196,"mutability":"mutable","name":"target","nameLocation":"4094:6:25","nodeType":"VariableDeclaration","scope":3213,"src":"4086:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3195,"name":"address","nodeType":"ElementaryTypeName","src":"4086:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3198,"mutability":"mutable","name":"data","nameLocation":"4123:4:25","nodeType":"VariableDeclaration","scope":3213,"src":"4110:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3197,"name":"bytes","nodeType":"ElementaryTypeName","src":"4110:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3200,"mutability":"mutable","name":"value","nameLocation":"4145:5:25","nodeType":"VariableDeclaration","scope":3213,"src":"4137:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3199,"name":"uint256","nodeType":"ElementaryTypeName","src":"4137:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4076:80:25"},"returnParameters":{"id":3204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3203,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3213,"src":"4175:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3202,"name":"bytes","nodeType":"ElementaryTypeName","src":"4175:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4174:14:25"},"scope":3398,"src":"4046:254:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3262,"nodeType":"Block","src":"4727:321:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3230,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4753:4:25","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3398","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3398","typeString":"library Address"}],"id":3229,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4745:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3228,"name":"address","nodeType":"ElementaryTypeName","src":"4745:7:25","typeDescriptions":{}}},"id":3231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4745:13:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4759:7:25","memberName":"balance","nodeType":"MemberAccess","src":"4745:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3233,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3220,"src":"4770:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4745:30:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":3235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4777:40:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":3227,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4737:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4737:81:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3237,"nodeType":"ExpressionStatement","src":"4737:81:25"},{"expression":{"arguments":[{"arguments":[{"id":3240,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3216,"src":"4847:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3239,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3122,"src":"4836:10:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4836:18:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":3242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4856:31:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":3238,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4828:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4828:60:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3244,"nodeType":"ExpressionStatement","src":"4828:60:25"},{"assignments":[3246,3248],"declarations":[{"constant":false,"id":3246,"mutability":"mutable","name":"success","nameLocation":"4905:7:25","nodeType":"VariableDeclaration","scope":3262,"src":"4900:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3245,"name":"bool","nodeType":"ElementaryTypeName","src":"4900:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3248,"mutability":"mutable","name":"returndata","nameLocation":"4927:10:25","nodeType":"VariableDeclaration","scope":3262,"src":"4914:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3247,"name":"bytes","nodeType":"ElementaryTypeName","src":"4914:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3255,"initialValue":{"arguments":[{"id":3253,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3218,"src":"4967:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3249,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3216,"src":"4941:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4948:4:25","memberName":"call","nodeType":"MemberAccess","src":"4941:11:25","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3251,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3220,"src":"4960:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"4941:25:25","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4941:31:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4899:73:25"},{"expression":{"arguments":[{"id":3257,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"5007:7:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3258,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"5016:10:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3259,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3222,"src":"5028:12:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3256,"name":"_verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3397,"src":"4989:17:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":3260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4989:52:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3226,"id":3261,"nodeType":"Return","src":"4982:59:25"}]},"documentation":{"id":3214,"nodeType":"StructuredDocumentation","src":"4306:237:25","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3263,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4557:21:25","nodeType":"FunctionDefinition","parameters":{"id":3223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3216,"mutability":"mutable","name":"target","nameLocation":"4596:6:25","nodeType":"VariableDeclaration","scope":3263,"src":"4588:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3215,"name":"address","nodeType":"ElementaryTypeName","src":"4588:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3218,"mutability":"mutable","name":"data","nameLocation":"4625:4:25","nodeType":"VariableDeclaration","scope":3263,"src":"4612:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3217,"name":"bytes","nodeType":"ElementaryTypeName","src":"4612:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3220,"mutability":"mutable","name":"value","nameLocation":"4647:5:25","nodeType":"VariableDeclaration","scope":3263,"src":"4639:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3219,"name":"uint256","nodeType":"ElementaryTypeName","src":"4639:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3222,"mutability":"mutable","name":"errorMessage","nameLocation":"4676:12:25","nodeType":"VariableDeclaration","scope":3263,"src":"4662:26:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3221,"name":"string","nodeType":"ElementaryTypeName","src":"4662:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4578:116:25"},"returnParameters":{"id":3226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3263,"src":"4713:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3224,"name":"bytes","nodeType":"ElementaryTypeName","src":"4713:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4712:14:25"},"scope":3398,"src":"4548:500:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3279,"nodeType":"Block","src":"5325:97:25","statements":[{"expression":{"arguments":[{"id":3274,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3266,"src":"5361:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3275,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3268,"src":"5369:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":3276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5375:39:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":3273,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[3280,3315],"referencedDeclaration":3315,"src":"5342:18:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":3277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5342:73:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3272,"id":3278,"nodeType":"Return","src":"5335:80:25"}]},"documentation":{"id":3264,"nodeType":"StructuredDocumentation","src":"5054:166:25","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3280,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5234:18:25","nodeType":"FunctionDefinition","parameters":{"id":3269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3266,"mutability":"mutable","name":"target","nameLocation":"5261:6:25","nodeType":"VariableDeclaration","scope":3280,"src":"5253:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3265,"name":"address","nodeType":"ElementaryTypeName","src":"5253:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3268,"mutability":"mutable","name":"data","nameLocation":"5282:4:25","nodeType":"VariableDeclaration","scope":3280,"src":"5269:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3267,"name":"bytes","nodeType":"ElementaryTypeName","src":"5269:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5252:35:25"},"returnParameters":{"id":3272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3271,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3280,"src":"5311:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3270,"name":"bytes","nodeType":"ElementaryTypeName","src":"5311:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5310:14:25"},"scope":3398,"src":"5225:197:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3314,"nodeType":"Block","src":"5764:229:25","statements":[{"expression":{"arguments":[{"arguments":[{"id":3294,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"5793:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3293,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3122,"src":"5782:10:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5782:18:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374","id":3296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5802:38:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""},"value":"Address: static call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""}],"id":3292,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5774:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5774:67:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3298,"nodeType":"ExpressionStatement","src":"5774:67:25"},{"assignments":[3300,3302],"declarations":[{"constant":false,"id":3300,"mutability":"mutable","name":"success","nameLocation":"5858:7:25","nodeType":"VariableDeclaration","scope":3314,"src":"5853:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3299,"name":"bool","nodeType":"ElementaryTypeName","src":"5853:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3302,"mutability":"mutable","name":"returndata","nameLocation":"5880:10:25","nodeType":"VariableDeclaration","scope":3314,"src":"5867:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3301,"name":"bytes","nodeType":"ElementaryTypeName","src":"5867:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3307,"initialValue":{"arguments":[{"id":3305,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3285,"src":"5912:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3303,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"5894:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5901:10:25","memberName":"staticcall","nodeType":"MemberAccess","src":"5894:17:25","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":3306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5894:23:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5852:65:25"},{"expression":{"arguments":[{"id":3309,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3300,"src":"5952:7:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3310,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3302,"src":"5961:10:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3311,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"5973:12:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3308,"name":"_verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3397,"src":"5934:17:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":3312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5934:52:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3291,"id":3313,"nodeType":"Return","src":"5927:59:25"}]},"documentation":{"id":3281,"nodeType":"StructuredDocumentation","src":"5428:173:25","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3315,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5615:18:25","nodeType":"FunctionDefinition","parameters":{"id":3288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3283,"mutability":"mutable","name":"target","nameLocation":"5651:6:25","nodeType":"VariableDeclaration","scope":3315,"src":"5643:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3282,"name":"address","nodeType":"ElementaryTypeName","src":"5643:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3285,"mutability":"mutable","name":"data","nameLocation":"5680:4:25","nodeType":"VariableDeclaration","scope":3315,"src":"5667:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3284,"name":"bytes","nodeType":"ElementaryTypeName","src":"5667:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3287,"mutability":"mutable","name":"errorMessage","nameLocation":"5708:12:25","nodeType":"VariableDeclaration","scope":3315,"src":"5694:26:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3286,"name":"string","nodeType":"ElementaryTypeName","src":"5694:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5633:93:25"},"returnParameters":{"id":3291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3290,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3315,"src":"5750:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3289,"name":"bytes","nodeType":"ElementaryTypeName","src":"5750:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5749:14:25"},"scope":3398,"src":"5606:387:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3331,"nodeType":"Block","src":"6269:101:25","statements":[{"expression":{"arguments":[{"id":3326,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3318,"src":"6307:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3327,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3320,"src":"6315:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":3328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6321:41:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":3325,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[3332,3367],"referencedDeclaration":3367,"src":"6286:20:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":3329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6286:77:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3324,"id":3330,"nodeType":"Return","src":"6279:84:25"}]},"documentation":{"id":3316,"nodeType":"StructuredDocumentation","src":"5999:168:25","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3332,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6181:20:25","nodeType":"FunctionDefinition","parameters":{"id":3321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3318,"mutability":"mutable","name":"target","nameLocation":"6210:6:25","nodeType":"VariableDeclaration","scope":3332,"src":"6202:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3317,"name":"address","nodeType":"ElementaryTypeName","src":"6202:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3320,"mutability":"mutable","name":"data","nameLocation":"6231:4:25","nodeType":"VariableDeclaration","scope":3332,"src":"6218:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3319,"name":"bytes","nodeType":"ElementaryTypeName","src":"6218:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6201:35:25"},"returnParameters":{"id":3324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3323,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3332,"src":"6255:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3322,"name":"bytes","nodeType":"ElementaryTypeName","src":"6255:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6254:14:25"},"scope":3398,"src":"6172:198:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3366,"nodeType":"Block","src":"6711:233:25","statements":[{"expression":{"arguments":[{"arguments":[{"id":3346,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3335,"src":"6740:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3345,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3122,"src":"6729:10:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6729:18:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374","id":3348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6749:40:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""},"value":"Address: delegate call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""}],"id":3344,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6721:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6721:69:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3350,"nodeType":"ExpressionStatement","src":"6721:69:25"},{"assignments":[3352,3354],"declarations":[{"constant":false,"id":3352,"mutability":"mutable","name":"success","nameLocation":"6807:7:25","nodeType":"VariableDeclaration","scope":3366,"src":"6802:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3351,"name":"bool","nodeType":"ElementaryTypeName","src":"6802:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3354,"mutability":"mutable","name":"returndata","nameLocation":"6829:10:25","nodeType":"VariableDeclaration","scope":3366,"src":"6816:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3353,"name":"bytes","nodeType":"ElementaryTypeName","src":"6816:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3359,"initialValue":{"arguments":[{"id":3357,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3337,"src":"6863:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3355,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3335,"src":"6843:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6850:12:25","memberName":"delegatecall","nodeType":"MemberAccess","src":"6843:19:25","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":3358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6843:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6801:67:25"},{"expression":{"arguments":[{"id":3361,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3352,"src":"6903:7:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3362,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3354,"src":"6912:10:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3363,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3339,"src":"6924:12:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3360,"name":"_verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3397,"src":"6885:17:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":3364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6885:52:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3343,"id":3365,"nodeType":"Return","src":"6878:59:25"}]},"documentation":{"id":3333,"nodeType":"StructuredDocumentation","src":"6376:175:25","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3367,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6565:20:25","nodeType":"FunctionDefinition","parameters":{"id":3340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3335,"mutability":"mutable","name":"target","nameLocation":"6603:6:25","nodeType":"VariableDeclaration","scope":3367,"src":"6595:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3334,"name":"address","nodeType":"ElementaryTypeName","src":"6595:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3337,"mutability":"mutable","name":"data","nameLocation":"6632:4:25","nodeType":"VariableDeclaration","scope":3367,"src":"6619:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3336,"name":"bytes","nodeType":"ElementaryTypeName","src":"6619:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3339,"mutability":"mutable","name":"errorMessage","nameLocation":"6660:12:25","nodeType":"VariableDeclaration","scope":3367,"src":"6646:26:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3338,"name":"string","nodeType":"ElementaryTypeName","src":"6646:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6585:93:25"},"returnParameters":{"id":3343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3342,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3367,"src":"6697:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3341,"name":"bytes","nodeType":"ElementaryTypeName","src":"6697:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6696:14:25"},"scope":3398,"src":"6556:388:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3396,"nodeType":"Block","src":"7110:532:25","statements":[{"condition":{"id":3378,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"7124:7:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3394,"nodeType":"Block","src":"7181:455:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3382,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"7265:10:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7276:6:25","memberName":"length","nodeType":"MemberAccess","src":"7265:17:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7285:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7265:21:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3392,"nodeType":"Block","src":"7573:53:25","statements":[{"expression":{"arguments":[{"id":3389,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"7598:12:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3388,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"7591:6:25","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7591:20:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3391,"nodeType":"ExpressionStatement","src":"7591:20:25"}]},"id":3393,"nodeType":"IfStatement","src":"7261:365:25","trueBody":{"id":3387,"nodeType":"Block","src":"7288:279:25","statements":[{"AST":{"nodeType":"YulBlock","src":"7408:145:25","statements":[{"nodeType":"YulVariableDeclaration","src":"7430:40:25","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"7459:10:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7453:5:25"},"nodeType":"YulFunctionCall","src":"7453:17:25"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"7434:15:25","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7502:2:25","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"7506:10:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7498:3:25"},"nodeType":"YulFunctionCall","src":"7498:19:25"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"7519:15:25"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7491:6:25"},"nodeType":"YulFunctionCall","src":"7491:44:25"},"nodeType":"YulExpressionStatement","src":"7491:44:25"}]},"evmVersion":"paris","externalReferences":[{"declaration":3371,"isOffset":false,"isSlot":false,"src":"7459:10:25","valueSize":1},{"declaration":3371,"isOffset":false,"isSlot":false,"src":"7506:10:25","valueSize":1}],"id":3386,"nodeType":"InlineAssembly","src":"7399:154:25"}]}}]},"id":3395,"nodeType":"IfStatement","src":"7120:516:25","trueBody":{"id":3381,"nodeType":"Block","src":"7133:42:25","statements":[{"expression":{"id":3379,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"7154:10:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3377,"id":3380,"nodeType":"Return","src":"7147:17:25"}]}}]},"id":3397,"implemented":true,"kind":"function","modifiers":[],"name":"_verifyCallResult","nameLocation":"6959:17:25","nodeType":"FunctionDefinition","parameters":{"id":3374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3369,"mutability":"mutable","name":"success","nameLocation":"6991:7:25","nodeType":"VariableDeclaration","scope":3397,"src":"6986:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3368,"name":"bool","nodeType":"ElementaryTypeName","src":"6986:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3371,"mutability":"mutable","name":"returndata","nameLocation":"7021:10:25","nodeType":"VariableDeclaration","scope":3397,"src":"7008:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3370,"name":"bytes","nodeType":"ElementaryTypeName","src":"7008:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3373,"mutability":"mutable","name":"errorMessage","nameLocation":"7055:12:25","nodeType":"VariableDeclaration","scope":3397,"src":"7041:26:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3372,"name":"string","nodeType":"ElementaryTypeName","src":"7041:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6976:97:25"},"returnParameters":{"id":3377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3376,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3397,"src":"7096:12:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3375,"name":"bytes","nodeType":"ElementaryTypeName","src":"7096:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7095:14:25"},"scope":3398,"src":"6950:692:25","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":3399,"src":"126:7518:25","usedErrors":[]}],"src":"33:7612:25"},"id":25}},"contracts":{"@account-abstraction/contracts/callback/TokenCallbackHandler.sol":{"TokenCallbackHandler":{"abi":[{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"tokensReceived","outputs":[],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b506105d1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100665760003560e01c8063150b7a0211610050578063150b7a02146100ad578063bc197c8114610116578063f23a6e611461015157600080fd5b806223de291461006b57806301ffc9a714610085575b600080fd5b6100836100793660046102e1565b5050505050505050565b005b61009861009336600461038c565b61018a565b60405190151581526020015b60405180910390f35b6100e56100bb3660046103d5565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016100a4565b6100e5610124366004610489565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b6100e561015f366004610523565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f150b7a0200000000000000000000000000000000000000000000000000000000148061021d57507fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000145b8061026957507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461029357600080fd5b919050565b60008083601f8401126102aa57600080fd5b50813567ffffffffffffffff8111156102c257600080fd5b6020830191508360208285010111156102da57600080fd5b9250929050565b60008060008060008060008060c0898b0312156102fd57600080fd5b6103068961026f565b975061031460208a0161026f565b965061032260408a0161026f565b955060608901359450608089013567ffffffffffffffff8082111561034657600080fd5b6103528c838d01610298565b909650945060a08b013591508082111561036b57600080fd5b506103788b828c01610298565b999c989b5096995094979396929594505050565b60006020828403121561039e57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146103ce57600080fd5b9392505050565b6000806000806000608086880312156103ed57600080fd5b6103f68661026f565b94506104046020870161026f565b935060408601359250606086013567ffffffffffffffff81111561042757600080fd5b61043388828901610298565b969995985093965092949392505050565b60008083601f84011261045657600080fd5b50813567ffffffffffffffff81111561046e57600080fd5b6020830191508360208260051b85010111156102da57600080fd5b60008060008060008060008060a0898b0312156104a557600080fd5b6104ae8961026f565b97506104bc60208a0161026f565b9650604089013567ffffffffffffffff808211156104d957600080fd5b6104e58c838d01610444565b909850965060608b01359150808211156104fe57600080fd5b61050a8c838d01610444565b909650945060808b013591508082111561036b57600080fd5b60008060008060008060a0878903121561053c57600080fd5b6105458761026f565b95506105536020880161026f565b94506040870135935060608701359250608087013567ffffffffffffffff81111561057d57600080fd5b61058989828a01610298565b979a969950949750929593949250505056fea2646970667358221220a4c6d024cb561614fc07a96681ccf56b705fb119d80813cf7e91a76859e7945364736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D1 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x66 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x150B7A02 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0xAD JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x23DE29 EQ PUSH2 0x6B JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x85 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x83 PUSH2 0x79 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E1 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST STOP JUMPDEST PUSH2 0x98 PUSH2 0x93 CALLDATASIZE PUSH1 0x4 PUSH2 0x38C JUMP JUMPDEST PUSH2 0x18A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE5 PUSH2 0xBB CALLDATASIZE PUSH1 0x4 PUSH2 0x3D5 JUMP JUMPDEST PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA4 JUMP JUMPDEST PUSH2 0xE5 PUSH2 0x124 CALLDATASIZE PUSH1 0x4 PUSH2 0x489 JUMP JUMPDEST PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xE5 PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0x523 JUMP JUMPDEST PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x21D JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x4E2312E000000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x269 JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x293 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x2FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x306 DUP10 PUSH2 0x26F JUMP JUMPDEST SWAP8 POP PUSH2 0x314 PUSH1 0x20 DUP11 ADD PUSH2 0x26F JUMP JUMPDEST SWAP7 POP PUSH2 0x322 PUSH1 0x40 DUP11 ADD PUSH2 0x26F JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x352 DUP13 DUP4 DUP14 ADD PUSH2 0x298 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0xA0 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x36B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x378 DUP12 DUP3 DUP13 ADD PUSH2 0x298 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x39E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x3CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F6 DUP7 PUSH2 0x26F JUMP JUMPDEST SWAP5 POP PUSH2 0x404 PUSH1 0x20 DUP8 ADD PUSH2 0x26F JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x427 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x433 DUP9 DUP3 DUP10 ADD PUSH2 0x298 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x456 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x46E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x4A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4AE DUP10 PUSH2 0x26F JUMP JUMPDEST SWAP8 POP PUSH2 0x4BC PUSH1 0x20 DUP11 ADD PUSH2 0x26F JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E5 DUP13 DUP4 DUP14 ADD PUSH2 0x444 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x50A DUP13 DUP4 DUP14 ADD PUSH2 0x444 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x36B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x53C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x545 DUP8 PUSH2 0x26F JUMP JUMPDEST SWAP6 POP PUSH2 0x553 PUSH1 0x20 DUP9 ADD PUSH2 0x26F JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x57D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x589 DUP10 DUP3 DUP11 ADD PUSH2 0x298 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG4 0xC6 0xD0 0x24 0xCB JUMP AND EQ 0xFC SMOD 0xA9 PUSH7 0x81CCF56B705FB1 NOT 0xD8 ADDMOD SGT 0xCF PUSH31 0x91A76859E7945364736F6C6343000813003300000000000000000000000000 ","sourceMap":"490:1299:0:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@onERC1155BatchReceived_92":{"entryPoint":null,"id":92,"parameterSlots":8,"returnSlots":1},"@onERC1155Received_69":{"entryPoint":null,"id":69,"parameterSlots":6,"returnSlots":1},"@onERC721Received_48":{"entryPoint":null,"id":48,"parameterSlots":5,"returnSlots":1},"@supportsInterface_122":{"entryPoint":394,"id":122,"parameterSlots":1,"returnSlots":1},"@tokensReceived_29":{"entryPoint":null,"id":29,"parameterSlots":8,"returnSlots":0},"abi_decode_address":{"entryPoint":623,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn_calldata":{"entryPoint":1092,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bytes_calldata":{"entryPoint":664,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_addresst_uint256t_bytes_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":737,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":1161,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":981,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr":{"entryPoint":1315,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_bytes4":{"entryPoint":908,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5279:26","statements":[{"nodeType":"YulBlock","src":"6:3:26","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:147:26","statements":[{"nodeType":"YulAssignment","src":"73:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:26"},"nodeType":"YulFunctionCall","src":"82:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:26"}]},{"body":{"nodeType":"YulBlock","src":"188:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"197:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"200:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"190:6:26"},"nodeType":"YulFunctionCall","src":"190:12:26"},"nodeType":"YulExpressionStatement","src":"190:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"142:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:26"},"nodeType":"YulFunctionCall","src":"131:54:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:26"},"nodeType":"YulFunctionCall","src":"121:65:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:26"},"nodeType":"YulFunctionCall","src":"114:73:26"},"nodeType":"YulIf","src":"111:93:26"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:26","type":""}],"src":"14:196:26"},{"body":{"nodeType":"YulBlock","src":"287:275:26","statements":[{"body":{"nodeType":"YulBlock","src":"336:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"345:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"348:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"338:6:26"},"nodeType":"YulFunctionCall","src":"338:12:26"},"nodeType":"YulExpressionStatement","src":"338:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"315:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"323:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"311:3:26"},"nodeType":"YulFunctionCall","src":"311:17:26"},{"name":"end","nodeType":"YulIdentifier","src":"330:3:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"307:3:26"},"nodeType":"YulFunctionCall","src":"307:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"300:6:26"},"nodeType":"YulFunctionCall","src":"300:35:26"},"nodeType":"YulIf","src":"297:55:26"},{"nodeType":"YulAssignment","src":"361:30:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"384:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"371:12:26"},"nodeType":"YulFunctionCall","src":"371:20:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"361:6:26"}]},{"body":{"nodeType":"YulBlock","src":"434:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"443:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"446:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"436:6:26"},"nodeType":"YulFunctionCall","src":"436:12:26"},"nodeType":"YulExpressionStatement","src":"436:12:26"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"406:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"414:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"403:2:26"},"nodeType":"YulFunctionCall","src":"403:30:26"},"nodeType":"YulIf","src":"400:50:26"},{"nodeType":"YulAssignment","src":"459:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"475:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"483:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"471:3:26"},"nodeType":"YulFunctionCall","src":"471:17:26"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"459:8:26"}]},{"body":{"nodeType":"YulBlock","src":"540:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"549:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"552:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"542:6:26"},"nodeType":"YulFunctionCall","src":"542:12:26"},"nodeType":"YulExpressionStatement","src":"542:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"511:6:26"},{"name":"length","nodeType":"YulIdentifier","src":"519:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"507:3:26"},"nodeType":"YulFunctionCall","src":"507:19:26"},{"kind":"number","nodeType":"YulLiteral","src":"528:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"503:3:26"},"nodeType":"YulFunctionCall","src":"503:30:26"},{"name":"end","nodeType":"YulIdentifier","src":"535:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"500:2:26"},"nodeType":"YulFunctionCall","src":"500:39:26"},"nodeType":"YulIf","src":"497:59:26"}]},"name":"abi_decode_bytes_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"250:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"258:3:26","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"266:8:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"276:6:26","type":""}],"src":"215:347:26"},{"body":{"nodeType":"YulBlock","src":"760:817:26","statements":[{"body":{"nodeType":"YulBlock","src":"807:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"816:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"819:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"809:6:26"},"nodeType":"YulFunctionCall","src":"809:12:26"},"nodeType":"YulExpressionStatement","src":"809:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"781:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"790:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"777:3:26"},"nodeType":"YulFunctionCall","src":"777:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"802:3:26","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"773:3:26"},"nodeType":"YulFunctionCall","src":"773:33:26"},"nodeType":"YulIf","src":"770:53:26"},{"nodeType":"YulAssignment","src":"832:39:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"861:9:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"842:18:26"},"nodeType":"YulFunctionCall","src":"842:29:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"832:6:26"}]},{"nodeType":"YulAssignment","src":"880:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"913:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"924:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"909:3:26"},"nodeType":"YulFunctionCall","src":"909:18:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"890:18:26"},"nodeType":"YulFunctionCall","src":"890:38:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"880:6:26"}]},{"nodeType":"YulAssignment","src":"937:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"970:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"981:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"966:3:26"},"nodeType":"YulFunctionCall","src":"966:18:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"947:18:26"},"nodeType":"YulFunctionCall","src":"947:38:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"937:6:26"}]},{"nodeType":"YulAssignment","src":"994:42:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1021:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1032:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1017:3:26"},"nodeType":"YulFunctionCall","src":"1017:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1004:12:26"},"nodeType":"YulFunctionCall","src":"1004:32:26"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"994:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"1045:47:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1076:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1087:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1072:3:26"},"nodeType":"YulFunctionCall","src":"1072:19:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1059:12:26"},"nodeType":"YulFunctionCall","src":"1059:33:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1049:6:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1101:28:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1111:18:26","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1105:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1156:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1165:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1168:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1158:6:26"},"nodeType":"YulFunctionCall","src":"1158:12:26"},"nodeType":"YulExpressionStatement","src":"1158:12:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1144:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"1152:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1141:2:26"},"nodeType":"YulFunctionCall","src":"1141:14:26"},"nodeType":"YulIf","src":"1138:34:26"},{"nodeType":"YulVariableDeclaration","src":"1181:84:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1237:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"1248:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1233:3:26"},"nodeType":"YulFunctionCall","src":"1233:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1257:7:26"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"1207:25:26"},"nodeType":"YulFunctionCall","src":"1207:58:26"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"1185:8:26","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"1195:8:26","type":""}]},{"nodeType":"YulAssignment","src":"1274:18:26","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"1284:8:26"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1274:6:26"}]},{"nodeType":"YulAssignment","src":"1301:18:26","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"1311:8:26"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"1301:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"1328:49:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1361:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1372:3:26","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1357:3:26"},"nodeType":"YulFunctionCall","src":"1357:19:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1344:12:26"},"nodeType":"YulFunctionCall","src":"1344:33:26"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1332:8:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1406:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1415:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1418:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1408:6:26"},"nodeType":"YulFunctionCall","src":"1408:12:26"},"nodeType":"YulExpressionStatement","src":"1408:12:26"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1392:8:26"},{"name":"_1","nodeType":"YulIdentifier","src":"1402:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1389:2:26"},"nodeType":"YulFunctionCall","src":"1389:16:26"},"nodeType":"YulIf","src":"1386:36:26"},{"nodeType":"YulVariableDeclaration","src":"1431:86:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1487:9:26"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1498:8:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1483:3:26"},"nodeType":"YulFunctionCall","src":"1483:24:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1509:7:26"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"1457:25:26"},"nodeType":"YulFunctionCall","src":"1457:60:26"},"variables":[{"name":"value6_1","nodeType":"YulTypedName","src":"1435:8:26","type":""},{"name":"value7_1","nodeType":"YulTypedName","src":"1445:8:26","type":""}]},{"nodeType":"YulAssignment","src":"1526:18:26","value":{"name":"value6_1","nodeType":"YulIdentifier","src":"1536:8:26"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"1526:6:26"}]},{"nodeType":"YulAssignment","src":"1553:18:26","value":{"name":"value7_1","nodeType":"YulIdentifier","src":"1563:8:26"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"1553:6:26"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_addresst_uint256t_bytes_calldata_ptrt_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"670:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"681:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"693:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"701:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"709:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"717:6:26","type":""},{"name":"value4","nodeType":"YulTypedName","src":"725:6:26","type":""},{"name":"value5","nodeType":"YulTypedName","src":"733:6:26","type":""},{"name":"value6","nodeType":"YulTypedName","src":"741:6:26","type":""},{"name":"value7","nodeType":"YulTypedName","src":"749:6:26","type":""}],"src":"567:1010:26"},{"body":{"nodeType":"YulBlock","src":"1651:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"1697:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1706:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1709:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1699:6:26"},"nodeType":"YulFunctionCall","src":"1699:12:26"},"nodeType":"YulExpressionStatement","src":"1699:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1672:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"1681:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1668:3:26"},"nodeType":"YulFunctionCall","src":"1668:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"1693:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1664:3:26"},"nodeType":"YulFunctionCall","src":"1664:32:26"},"nodeType":"YulIf","src":"1661:52:26"},{"nodeType":"YulVariableDeclaration","src":"1722:36:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1748:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1735:12:26"},"nodeType":"YulFunctionCall","src":"1735:23:26"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1726:5:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1868:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1877:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1880:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1870:6:26"},"nodeType":"YulFunctionCall","src":"1870:12:26"},"nodeType":"YulExpressionStatement","src":"1870:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1780:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1791:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"1798:66:26","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1787:3:26"},"nodeType":"YulFunctionCall","src":"1787:78:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1777:2:26"},"nodeType":"YulFunctionCall","src":"1777:89:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1770:6:26"},"nodeType":"YulFunctionCall","src":"1770:97:26"},"nodeType":"YulIf","src":"1767:117:26"},{"nodeType":"YulAssignment","src":"1893:15:26","value":{"name":"value","nodeType":"YulIdentifier","src":"1903:5:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1893:6:26"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1617:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1628:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1640:6:26","type":""}],"src":"1582:332:26"},{"body":{"nodeType":"YulBlock","src":"2014:92:26","statements":[{"nodeType":"YulAssignment","src":"2024:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2036:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2047:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2032:3:26"},"nodeType":"YulFunctionCall","src":"2032:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2024:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2066:9:26"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2091:6:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2084:6:26"},"nodeType":"YulFunctionCall","src":"2084:14:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2077:6:26"},"nodeType":"YulFunctionCall","src":"2077:22:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2059:6:26"},"nodeType":"YulFunctionCall","src":"2059:41:26"},"nodeType":"YulExpressionStatement","src":"2059:41:26"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1983:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1994:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2005:4:26","type":""}],"src":"1919:187:26"},{"body":{"nodeType":"YulBlock","src":"2251:486:26","statements":[{"body":{"nodeType":"YulBlock","src":"2298:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2307:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2310:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2300:6:26"},"nodeType":"YulFunctionCall","src":"2300:12:26"},"nodeType":"YulExpressionStatement","src":"2300:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2272:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"2281:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2268:3:26"},"nodeType":"YulFunctionCall","src":"2268:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"2293:3:26","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2264:3:26"},"nodeType":"YulFunctionCall","src":"2264:33:26"},"nodeType":"YulIf","src":"2261:53:26"},{"nodeType":"YulAssignment","src":"2323:39:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2352:9:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2333:18:26"},"nodeType":"YulFunctionCall","src":"2333:29:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2323:6:26"}]},{"nodeType":"YulAssignment","src":"2371:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2404:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2415:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2400:3:26"},"nodeType":"YulFunctionCall","src":"2400:18:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2381:18:26"},"nodeType":"YulFunctionCall","src":"2381:38:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2371:6:26"}]},{"nodeType":"YulAssignment","src":"2428:42:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2455:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2466:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2451:3:26"},"nodeType":"YulFunctionCall","src":"2451:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2438:12:26"},"nodeType":"YulFunctionCall","src":"2438:32:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2428:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"2479:46:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2510:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2521:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2506:3:26"},"nodeType":"YulFunctionCall","src":"2506:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2493:12:26"},"nodeType":"YulFunctionCall","src":"2493:32:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2483:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"2568:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2577:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2580:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2570:6:26"},"nodeType":"YulFunctionCall","src":"2570:12:26"},"nodeType":"YulExpressionStatement","src":"2570:12:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2540:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2548:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2537:2:26"},"nodeType":"YulFunctionCall","src":"2537:30:26"},"nodeType":"YulIf","src":"2534:50:26"},{"nodeType":"YulVariableDeclaration","src":"2593:84:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2649:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"2660:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2645:3:26"},"nodeType":"YulFunctionCall","src":"2645:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2669:7:26"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"2619:25:26"},"nodeType":"YulFunctionCall","src":"2619:58:26"},"variables":[{"name":"value3_1","nodeType":"YulTypedName","src":"2597:8:26","type":""},{"name":"value4_1","nodeType":"YulTypedName","src":"2607:8:26","type":""}]},{"nodeType":"YulAssignment","src":"2686:18:26","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"2696:8:26"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2686:6:26"}]},{"nodeType":"YulAssignment","src":"2713:18:26","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"2723:8:26"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"2713:6:26"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2185:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2196:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2208:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2216:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2224:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2232:6:26","type":""},{"name":"value4","nodeType":"YulTypedName","src":"2240:6:26","type":""}],"src":"2111:626:26"},{"body":{"nodeType":"YulBlock","src":"2841:149:26","statements":[{"nodeType":"YulAssignment","src":"2851:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2863:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2874:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2859:3:26"},"nodeType":"YulFunctionCall","src":"2859:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2851:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2893:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2908:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2916:66:26","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2904:3:26"},"nodeType":"YulFunctionCall","src":"2904:79:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2886:6:26"},"nodeType":"YulFunctionCall","src":"2886:98:26"},"nodeType":"YulExpressionStatement","src":"2886:98:26"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2810:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2821:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2832:4:26","type":""}],"src":"2742:248:26"},{"body":{"nodeType":"YulBlock","src":"3079:283:26","statements":[{"body":{"nodeType":"YulBlock","src":"3128:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3137:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3140:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3130:6:26"},"nodeType":"YulFunctionCall","src":"3130:12:26"},"nodeType":"YulExpressionStatement","src":"3130:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3107:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3115:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3103:3:26"},"nodeType":"YulFunctionCall","src":"3103:17:26"},{"name":"end","nodeType":"YulIdentifier","src":"3122:3:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3099:3:26"},"nodeType":"YulFunctionCall","src":"3099:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3092:6:26"},"nodeType":"YulFunctionCall","src":"3092:35:26"},"nodeType":"YulIf","src":"3089:55:26"},{"nodeType":"YulAssignment","src":"3153:30:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3176:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3163:12:26"},"nodeType":"YulFunctionCall","src":"3163:20:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3153:6:26"}]},{"body":{"nodeType":"YulBlock","src":"3226:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3235:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3238:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3228:6:26"},"nodeType":"YulFunctionCall","src":"3228:12:26"},"nodeType":"YulExpressionStatement","src":"3228:12:26"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3198:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3206:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3195:2:26"},"nodeType":"YulFunctionCall","src":"3195:30:26"},"nodeType":"YulIf","src":"3192:50:26"},{"nodeType":"YulAssignment","src":"3251:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3267:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3275:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3263:3:26"},"nodeType":"YulFunctionCall","src":"3263:17:26"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"3251:8:26"}]},{"body":{"nodeType":"YulBlock","src":"3340:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3349:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3352:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3342:6:26"},"nodeType":"YulFunctionCall","src":"3342:12:26"},"nodeType":"YulExpressionStatement","src":"3342:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3303:6:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3315:1:26","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"3318:6:26"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3311:3:26"},"nodeType":"YulFunctionCall","src":"3311:14:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3299:3:26"},"nodeType":"YulFunctionCall","src":"3299:27:26"},{"kind":"number","nodeType":"YulLiteral","src":"3328:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3295:3:26"},"nodeType":"YulFunctionCall","src":"3295:38:26"},{"name":"end","nodeType":"YulIdentifier","src":"3335:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3292:2:26"},"nodeType":"YulFunctionCall","src":"3292:47:26"},"nodeType":"YulIf","src":"3289:67:26"}]},"name":"abi_decode_array_uint256_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3042:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"3050:3:26","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"3058:8:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"3068:6:26","type":""}],"src":"2995:367:26"},{"body":{"nodeType":"YulBlock","src":"3594:983:26","statements":[{"body":{"nodeType":"YulBlock","src":"3641:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3650:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3653:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3643:6:26"},"nodeType":"YulFunctionCall","src":"3643:12:26"},"nodeType":"YulExpressionStatement","src":"3643:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3615:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"3624:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3611:3:26"},"nodeType":"YulFunctionCall","src":"3611:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"3636:3:26","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3607:3:26"},"nodeType":"YulFunctionCall","src":"3607:33:26"},"nodeType":"YulIf","src":"3604:53:26"},{"nodeType":"YulAssignment","src":"3666:39:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3695:9:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3676:18:26"},"nodeType":"YulFunctionCall","src":"3676:29:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3666:6:26"}]},{"nodeType":"YulAssignment","src":"3714:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3747:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3758:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3743:3:26"},"nodeType":"YulFunctionCall","src":"3743:18:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3724:18:26"},"nodeType":"YulFunctionCall","src":"3724:38:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3714:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"3771:46:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3802:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3813:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3798:3:26"},"nodeType":"YulFunctionCall","src":"3798:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3785:12:26"},"nodeType":"YulFunctionCall","src":"3785:32:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3775:6:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3826:28:26","value":{"kind":"number","nodeType":"YulLiteral","src":"3836:18:26","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3830:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3881:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3890:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3893:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3883:6:26"},"nodeType":"YulFunctionCall","src":"3883:12:26"},"nodeType":"YulExpressionStatement","src":"3883:12:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3869:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"3877:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3866:2:26"},"nodeType":"YulFunctionCall","src":"3866:14:26"},"nodeType":"YulIf","src":"3863:34:26"},{"nodeType":"YulVariableDeclaration","src":"3906:96:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3974:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3985:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3970:3:26"},"nodeType":"YulFunctionCall","src":"3970:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3994:7:26"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nodeType":"YulIdentifier","src":"3932:37:26"},"nodeType":"YulFunctionCall","src":"3932:70:26"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"3910:8:26","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"3920:8:26","type":""}]},{"nodeType":"YulAssignment","src":"4011:18:26","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"4021:8:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4011:6:26"}]},{"nodeType":"YulAssignment","src":"4038:18:26","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"4048:8:26"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4038:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"4065:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4098:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4109:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4094:3:26"},"nodeType":"YulFunctionCall","src":"4094:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4081:12:26"},"nodeType":"YulFunctionCall","src":"4081:32:26"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"4069:8:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"4142:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4151:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4154:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4144:6:26"},"nodeType":"YulFunctionCall","src":"4144:12:26"},"nodeType":"YulExpressionStatement","src":"4144:12:26"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"4128:8:26"},{"name":"_1","nodeType":"YulIdentifier","src":"4138:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4125:2:26"},"nodeType":"YulFunctionCall","src":"4125:16:26"},"nodeType":"YulIf","src":"4122:36:26"},{"nodeType":"YulVariableDeclaration","src":"4167:98:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4235:9:26"},{"name":"offset_1","nodeType":"YulIdentifier","src":"4246:8:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4231:3:26"},"nodeType":"YulFunctionCall","src":"4231:24:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4257:7:26"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nodeType":"YulIdentifier","src":"4193:37:26"},"nodeType":"YulFunctionCall","src":"4193:72:26"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"4171:8:26","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"4181:8:26","type":""}]},{"nodeType":"YulAssignment","src":"4274:18:26","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"4284:8:26"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"4274:6:26"}]},{"nodeType":"YulAssignment","src":"4301:18:26","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"4311:8:26"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"4301:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"4328:49:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4361:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4372:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4357:3:26"},"nodeType":"YulFunctionCall","src":"4357:19:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4344:12:26"},"nodeType":"YulFunctionCall","src":"4344:33:26"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"4332:8:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"4406:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4415:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4418:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4408:6:26"},"nodeType":"YulFunctionCall","src":"4408:12:26"},"nodeType":"YulExpressionStatement","src":"4408:12:26"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"4392:8:26"},{"name":"_1","nodeType":"YulIdentifier","src":"4402:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4389:2:26"},"nodeType":"YulFunctionCall","src":"4389:16:26"},"nodeType":"YulIf","src":"4386:36:26"},{"nodeType":"YulVariableDeclaration","src":"4431:86:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4487:9:26"},{"name":"offset_2","nodeType":"YulIdentifier","src":"4498:8:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4483:3:26"},"nodeType":"YulFunctionCall","src":"4483:24:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4509:7:26"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"4457:25:26"},"nodeType":"YulFunctionCall","src":"4457:60:26"},"variables":[{"name":"value6_1","nodeType":"YulTypedName","src":"4435:8:26","type":""},{"name":"value7_1","nodeType":"YulTypedName","src":"4445:8:26","type":""}]},{"nodeType":"YulAssignment","src":"4526:18:26","value":{"name":"value6_1","nodeType":"YulIdentifier","src":"4536:8:26"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"4526:6:26"}]},{"nodeType":"YulAssignment","src":"4553:18:26","value":{"name":"value7_1","nodeType":"YulIdentifier","src":"4563:8:26"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"4553:6:26"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3504:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3515:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3527:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3535:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3543:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3551:6:26","type":""},{"name":"value4","nodeType":"YulTypedName","src":"3559:6:26","type":""},{"name":"value5","nodeType":"YulTypedName","src":"3567:6:26","type":""},{"name":"value6","nodeType":"YulTypedName","src":"3575:6:26","type":""},{"name":"value7","nodeType":"YulTypedName","src":"3583:6:26","type":""}],"src":"3367:1210:26"},{"body":{"nodeType":"YulBlock","src":"4739:538:26","statements":[{"body":{"nodeType":"YulBlock","src":"4786:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4795:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4798:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4788:6:26"},"nodeType":"YulFunctionCall","src":"4788:12:26"},"nodeType":"YulExpressionStatement","src":"4788:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4760:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"4769:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4756:3:26"},"nodeType":"YulFunctionCall","src":"4756:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"4781:3:26","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4752:3:26"},"nodeType":"YulFunctionCall","src":"4752:33:26"},"nodeType":"YulIf","src":"4749:53:26"},{"nodeType":"YulAssignment","src":"4811:39:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4840:9:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4821:18:26"},"nodeType":"YulFunctionCall","src":"4821:29:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4811:6:26"}]},{"nodeType":"YulAssignment","src":"4859:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4892:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4903:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4888:3:26"},"nodeType":"YulFunctionCall","src":"4888:18:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4869:18:26"},"nodeType":"YulFunctionCall","src":"4869:38:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4859:6:26"}]},{"nodeType":"YulAssignment","src":"4916:42:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4943:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4954:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4939:3:26"},"nodeType":"YulFunctionCall","src":"4939:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4926:12:26"},"nodeType":"YulFunctionCall","src":"4926:32:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4916:6:26"}]},{"nodeType":"YulAssignment","src":"4967:42:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4994:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"5005:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4990:3:26"},"nodeType":"YulFunctionCall","src":"4990:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4977:12:26"},"nodeType":"YulFunctionCall","src":"4977:32:26"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4967:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"5018:47:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5049:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"5060:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5045:3:26"},"nodeType":"YulFunctionCall","src":"5045:19:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5032:12:26"},"nodeType":"YulFunctionCall","src":"5032:33:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5022:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"5108:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5117:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5120:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5110:6:26"},"nodeType":"YulFunctionCall","src":"5110:12:26"},"nodeType":"YulExpressionStatement","src":"5110:12:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5080:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"5088:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5077:2:26"},"nodeType":"YulFunctionCall","src":"5077:30:26"},"nodeType":"YulIf","src":"5074:50:26"},{"nodeType":"YulVariableDeclaration","src":"5133:84:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5189:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"5200:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5185:3:26"},"nodeType":"YulFunctionCall","src":"5185:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5209:7:26"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"5159:25:26"},"nodeType":"YulFunctionCall","src":"5159:58:26"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"5137:8:26","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"5147:8:26","type":""}]},{"nodeType":"YulAssignment","src":"5226:18:26","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"5236:8:26"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"5226:6:26"}]},{"nodeType":"YulAssignment","src":"5253:18:26","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"5263:8:26"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"5253:6:26"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4665:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4676:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4688:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4696:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4704:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4712:6:26","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4720:6:26","type":""},{"name":"value5","nodeType":"YulTypedName","src":"4728:6:26","type":""}],"src":"4582:695:26"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_uint256t_bytes_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := abi_decode_address(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        let offset_1 := calldataload(add(headStart, 160))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_decode_array_uint256_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_bytes_calldata(add(headStart, offset_2), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n}","id":26,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100665760003560e01c8063150b7a0211610050578063150b7a02146100ad578063bc197c8114610116578063f23a6e611461015157600080fd5b806223de291461006b57806301ffc9a714610085575b600080fd5b6100836100793660046102e1565b5050505050505050565b005b61009861009336600461038c565b61018a565b60405190151581526020015b60405180910390f35b6100e56100bb3660046103d5565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016100a4565b6100e5610124366004610489565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b6100e561015f366004610523565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f150b7a0200000000000000000000000000000000000000000000000000000000148061021d57507fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000145b8061026957507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461029357600080fd5b919050565b60008083601f8401126102aa57600080fd5b50813567ffffffffffffffff8111156102c257600080fd5b6020830191508360208285010111156102da57600080fd5b9250929050565b60008060008060008060008060c0898b0312156102fd57600080fd5b6103068961026f565b975061031460208a0161026f565b965061032260408a0161026f565b955060608901359450608089013567ffffffffffffffff8082111561034657600080fd5b6103528c838d01610298565b909650945060a08b013591508082111561036b57600080fd5b506103788b828c01610298565b999c989b5096995094979396929594505050565b60006020828403121561039e57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146103ce57600080fd5b9392505050565b6000806000806000608086880312156103ed57600080fd5b6103f68661026f565b94506104046020870161026f565b935060408601359250606086013567ffffffffffffffff81111561042757600080fd5b61043388828901610298565b969995985093965092949392505050565b60008083601f84011261045657600080fd5b50813567ffffffffffffffff81111561046e57600080fd5b6020830191508360208260051b85010111156102da57600080fd5b60008060008060008060008060a0898b0312156104a557600080fd5b6104ae8961026f565b97506104bc60208a0161026f565b9650604089013567ffffffffffffffff808211156104d957600080fd5b6104e58c838d01610444565b909850965060608b01359150808211156104fe57600080fd5b61050a8c838d01610444565b909650945060808b013591508082111561036b57600080fd5b60008060008060008060a0878903121561053c57600080fd5b6105458761026f565b95506105536020880161026f565b94506040870135935060608701359250608087013567ffffffffffffffff81111561057d57600080fd5b61058989828a01610298565b979a969950949750929593949250505056fea2646970667358221220a4c6d024cb561614fc07a96681ccf56b705fb119d80813cf7e91a76859e7945364736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x66 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x150B7A02 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0xAD JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x23DE29 EQ PUSH2 0x6B JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x85 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x83 PUSH2 0x79 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E1 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST STOP JUMPDEST PUSH2 0x98 PUSH2 0x93 CALLDATASIZE PUSH1 0x4 PUSH2 0x38C JUMP JUMPDEST PUSH2 0x18A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE5 PUSH2 0xBB CALLDATASIZE PUSH1 0x4 PUSH2 0x3D5 JUMP JUMPDEST PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA4 JUMP JUMPDEST PUSH2 0xE5 PUSH2 0x124 CALLDATASIZE PUSH1 0x4 PUSH2 0x489 JUMP JUMPDEST PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xE5 PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0x523 JUMP JUMPDEST PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x21D JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x4E2312E000000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x269 JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x293 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x2FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x306 DUP10 PUSH2 0x26F JUMP JUMPDEST SWAP8 POP PUSH2 0x314 PUSH1 0x20 DUP11 ADD PUSH2 0x26F JUMP JUMPDEST SWAP7 POP PUSH2 0x322 PUSH1 0x40 DUP11 ADD PUSH2 0x26F JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x352 DUP13 DUP4 DUP14 ADD PUSH2 0x298 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0xA0 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x36B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x378 DUP12 DUP3 DUP13 ADD PUSH2 0x298 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x39E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x3CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F6 DUP7 PUSH2 0x26F JUMP JUMPDEST SWAP5 POP PUSH2 0x404 PUSH1 0x20 DUP8 ADD PUSH2 0x26F JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x427 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x433 DUP9 DUP3 DUP10 ADD PUSH2 0x298 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x456 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x46E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x4A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4AE DUP10 PUSH2 0x26F JUMP JUMPDEST SWAP8 POP PUSH2 0x4BC PUSH1 0x20 DUP11 ADD PUSH2 0x26F JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E5 DUP13 DUP4 DUP14 ADD PUSH2 0x444 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x50A DUP13 DUP4 DUP14 ADD PUSH2 0x444 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x36B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x53C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x545 DUP8 PUSH2 0x26F JUMP JUMPDEST SWAP6 POP PUSH2 0x553 PUSH1 0x20 DUP9 ADD PUSH2 0x26F JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x57D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x589 DUP10 DUP3 DUP11 ADD PUSH2 0x298 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG4 0xC6 0xD0 0x24 0xCB JUMP AND EQ 0xFC SMOD 0xA9 PUSH7 0x81CCF56B705FB1 NOT 0xD8 ADDMOD SGT 0xCF PUSH31 0x91A76859E7945364736F6C6343000813003300000000000000000000000000 ","sourceMap":"490:1299:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;581:176;;;;;;:::i;:::-;;;;;;;;;;;;1489:298;;;;;;:::i;:::-;;:::i;:::-;;;2084:14:26;;2077:22;2059:41;;2047:2;2032:18;1489:298:0;;;;;;;;763:212;;;;;;:::i;:::-;927:41;763:212;;;;;;;;;;;2916:66:26;2904:79;;;2886:98;;2874:2;2859:18;763:212:0;2742:248:26;1219:264:0;;;;;;:::i;:::-;1428:48;1219:264;;;;;;;;;;;981:232;;;;;;:::i;:::-;1163:43;981:232;;;;;;;;;1489:298;1576:4;1611:48;;;1626:33;1611:48;;:113;;-1:-1:-1;1675:49:0;;;1690:34;1675:49;1611:113;:169;;;-1:-1:-1;1740:40:0;;;1755:25;1740:40;1611:169;1592:188;1489:298;-1:-1:-1;;1489:298:0:o;14:196:26:-;82:20;;142:42;131:54;;121:65;;111:93;;200:1;197;190:12;111:93;14:196;;;:::o;215:347::-;266:8;276:6;330:3;323:4;315:6;311:17;307:27;297:55;;348:1;345;338:12;297:55;-1:-1:-1;371:20:26;;414:18;403:30;;400:50;;;446:1;443;436:12;400:50;483:4;475:6;471:17;459:29;;535:3;528:4;519:6;511;507:19;503:30;500:39;497:59;;;552:1;549;542:12;497:59;215:347;;;;;:::o;567:1010::-;693:6;701;709;717;725;733;741;749;802:3;790:9;781:7;777:23;773:33;770:53;;;819:1;816;809:12;770:53;842:29;861:9;842:29;:::i;:::-;832:39;;890:38;924:2;913:9;909:18;890:38;:::i;:::-;880:48;;947:38;981:2;970:9;966:18;947:38;:::i;:::-;937:48;;1032:2;1021:9;1017:18;1004:32;994:42;;1087:3;1076:9;1072:19;1059:33;1111:18;1152:2;1144:6;1141:14;1138:34;;;1168:1;1165;1158:12;1138:34;1207:58;1257:7;1248:6;1237:9;1233:22;1207:58;:::i;:::-;1284:8;;-1:-1:-1;1181:84:26;-1:-1:-1;1372:3:26;1357:19;;1344:33;;-1:-1:-1;1389:16:26;;;1386:36;;;1418:1;1415;1408:12;1386:36;;1457:60;1509:7;1498:8;1487:9;1483:24;1457:60;:::i;:::-;567:1010;;;;-1:-1:-1;567:1010:26;;-1:-1:-1;567:1010:26;;;;;;1536:8;-1:-1:-1;;;567:1010:26:o;1582:332::-;1640:6;1693:2;1681:9;1672:7;1668:23;1664:32;1661:52;;;1709:1;1706;1699:12;1661:52;1748:9;1735:23;1798:66;1791:5;1787:78;1780:5;1777:89;1767:117;;1880:1;1877;1870:12;1767:117;1903:5;1582:332;-1:-1:-1;;;1582:332:26:o;2111:626::-;2208:6;2216;2224;2232;2240;2293:3;2281:9;2272:7;2268:23;2264:33;2261:53;;;2310:1;2307;2300:12;2261:53;2333:29;2352:9;2333:29;:::i;:::-;2323:39;;2381:38;2415:2;2404:9;2400:18;2381:38;:::i;:::-;2371:48;;2466:2;2455:9;2451:18;2438:32;2428:42;;2521:2;2510:9;2506:18;2493:32;2548:18;2540:6;2537:30;2534:50;;;2580:1;2577;2570:12;2534:50;2619:58;2669:7;2660:6;2649:9;2645:22;2619:58;:::i;:::-;2111:626;;;;-1:-1:-1;2111:626:26;;-1:-1:-1;2696:8:26;;2593:84;2111:626;-1:-1:-1;;;2111:626:26:o;2995:367::-;3058:8;3068:6;3122:3;3115:4;3107:6;3103:17;3099:27;3089:55;;3140:1;3137;3130:12;3089:55;-1:-1:-1;3163:20:26;;3206:18;3195:30;;3192:50;;;3238:1;3235;3228:12;3192:50;3275:4;3267:6;3263:17;3251:29;;3335:3;3328:4;3318:6;3315:1;3311:14;3303:6;3299:27;3295:38;3292:47;3289:67;;;3352:1;3349;3342:12;3367:1210;3527:6;3535;3543;3551;3559;3567;3575;3583;3636:3;3624:9;3615:7;3611:23;3607:33;3604:53;;;3653:1;3650;3643:12;3604:53;3676:29;3695:9;3676:29;:::i;:::-;3666:39;;3724:38;3758:2;3747:9;3743:18;3724:38;:::i;:::-;3714:48;;3813:2;3802:9;3798:18;3785:32;3836:18;3877:2;3869:6;3866:14;3863:34;;;3893:1;3890;3883:12;3863:34;3932:70;3994:7;3985:6;3974:9;3970:22;3932:70;:::i;:::-;4021:8;;-1:-1:-1;3906:96:26;-1:-1:-1;4109:2:26;4094:18;;4081:32;;-1:-1:-1;4125:16:26;;;4122:36;;;4154:1;4151;4144:12;4122:36;4193:72;4257:7;4246:8;4235:9;4231:24;4193:72;:::i;:::-;4284:8;;-1:-1:-1;4167:98:26;-1:-1:-1;4372:3:26;4357:19;;4344:33;;-1:-1:-1;4389:16:26;;;4386:36;;;4418:1;4415;4408:12;4582:695;4688:6;4696;4704;4712;4720;4728;4781:3;4769:9;4760:7;4756:23;4752:33;4749:53;;;4798:1;4795;4788:12;4749:53;4821:29;4840:9;4821:29;:::i;:::-;4811:39;;4869:38;4903:2;4892:9;4888:18;4869:38;:::i;:::-;4859:48;;4954:2;4943:9;4939:18;4926:32;4916:42;;5005:2;4994:9;4990:18;4977:32;4967:42;;5060:3;5049:9;5045:19;5032:33;5088:18;5080:6;5077:30;5074:50;;;5120:1;5117;5110:12;5074:50;5159:58;5209:7;5200:6;5189:9;5185:22;5159:58;:::i;:::-;4582:695;;;;-1:-1:-1;4582:695:26;;-1:-1:-1;4582:695:26;;5236:8;;4582:695;-1:-1:-1;;;4582:695:26:o"},"gasEstimates":{"creation":{"codeDepositCost":"297800","executionCost":"337","totalCost":"298137"},"external":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"infinite","onERC1155Received(address,address,uint256,uint256,bytes)":"infinite","onERC721Received(address,address,uint256,bytes)":"infinite","supportsInterface(bytes4)":"426","tokensReceived(address,address,address,uint256,bytes,bytes)":"infinite"}},"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","onERC721Received(address,address,uint256,bytes)":"150b7a02","supportsInterface(bytes4)":"01ffc9a7","tokensReceived(address,address,address,uint256,bytes,bytes)":"0023de29"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Token callback handler.   Handles supported tokens' callbacks, allowing account receiving these tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@account-abstraction/contracts/callback/TokenCallbackHandler.sol\":\"TokenCallbackHandler\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@account-abstraction/contracts/callback/TokenCallbackHandler.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-empty-blocks */\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\n/**\\n * Token callback handler.\\n *   Handles supported tokens' callbacks, allowing account receiving these tokens.\\n */\\ncontract TokenCallbackHandler is IERC777Recipient, IERC721Receiver, IERC1155Receiver {\\n    function tokensReceived(\\n        address,\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata,\\n        bytes calldata\\n    ) external pure override {\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC1155Receiver.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC1155Receiver.onERC1155BatchReceived.selector;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\n            interfaceId == type(IERC1155Receiver).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xfff3df5f5211d71158bb017ff791dc4fa85db53890f7bd72bac3a43d89e83752\",\"license\":\"GPL-3.0\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0fd59f83d16f090c27a8105db0f4ad05b0f5d127f9878b82ebf0ad2bbc4e3f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Token callback handler.   Handles supported tokens' callbacks, allowing account receiving these tokens.","version":1}}},"@account-abstraction/contracts/core/BaseAccount.sol":{"BaseAccount":{"abi":[{"inputs":[],"name":"entryPoint","outputs":[{"internalType":"contract IEntryPoint","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"userOp","type":"tuple"},{"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"internalType":"uint256","name":"missingAccountFunds","type":"uint256"}],"name":"validateUserOp","outputs":[{"internalType":"uint256","name":"validationData","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"entryPoint()":"b0d691fe","getNonce()":"d087d288","validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":"3a871cdd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"missingAccountFunds\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"entryPoint()\":{\"notice\":\"return the entryPoint used by this account. subclass should return the current entryPoint used by this account.\"},\"getNonce()\":{\"notice\":\"Return the account nonce. This method returns the next sequential nonce. For a nonce of a specific key, use `entrypoint.getNonce(account, key)`\"},\"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"notice\":\"Validate user's signature and nonce. subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\"}},\"notice\":\"Basic account implementation. this contract provides the basic logic for implementing the IAccount interface  - validateUserOp specific account implementation should inherit it and provide the account-specific logic\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@account-abstraction/contracts/core/BaseAccount.sol\":\"BaseAccount\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@account-abstraction/contracts/core/BaseAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-empty-blocks */\\n\\nimport \\\"../interfaces/IAccount.sol\\\";\\nimport \\\"../interfaces/IEntryPoint.sol\\\";\\nimport \\\"./Helpers.sol\\\";\\n\\n/**\\n * Basic account implementation.\\n * this contract provides the basic logic for implementing the IAccount interface  - validateUserOp\\n * specific account implementation should inherit it and provide the account-specific logic\\n */\\nabstract contract BaseAccount is IAccount {\\n    using UserOperationLib for UserOperation;\\n\\n    //return value in case of signature failure, with no time-range.\\n    // equivalent to _packValidationData(true,0,0);\\n    uint256 constant internal SIG_VALIDATION_FAILED = 1;\\n\\n    /**\\n     * Return the account nonce.\\n     * This method returns the next sequential nonce.\\n     * For a nonce of a specific key, use `entrypoint.getNonce(account, key)`\\n     */\\n    function getNonce() public view virtual returns (uint256) {\\n        return entryPoint().getNonce(address(this), 0);\\n    }\\n\\n    /**\\n     * return the entryPoint used by this account.\\n     * subclass should return the current entryPoint used by this account.\\n     */\\n    function entryPoint() public view virtual returns (IEntryPoint);\\n\\n    /**\\n     * Validate user's signature and nonce.\\n     * subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external override virtual returns (uint256 validationData) {\\n        _requireFromEntryPoint();\\n        validationData = _validateSignature(userOp, userOpHash);\\n        _validateNonce(userOp.nonce);\\n        _payPrefund(missingAccountFunds);\\n    }\\n\\n    /**\\n     * ensure the request comes from the known entrypoint.\\n     */\\n    function _requireFromEntryPoint() internal virtual view {\\n        require(msg.sender == address(entryPoint()), \\\"account: not from EntryPoint\\\");\\n    }\\n\\n    /**\\n     * validate the signature is valid for this message.\\n     * @param userOp validate the userOp.signature field\\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\\n     *          (also hashes the entrypoint and chain id)\\n     * @return validationData signature and time-range of this operation\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If the account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash)\\n    internal virtual returns (uint256 validationData);\\n\\n    /**\\n     * Validate the nonce of the UserOperation.\\n     * This method may validate the nonce requirement of this account.\\n     * e.g.\\n     * To limit the nonce to use sequenced UserOps only (no \\\"out of order\\\" UserOps):\\n     *      `require(nonce < type(uint64).max)`\\n     * For a hypothetical account that *requires* the nonce to be out-of-order:\\n     *      `require(nonce & type(uint64).max == 0)`\\n     *\\n     * The actual nonce uniqueness is managed by the EntryPoint, and thus no other\\n     * action is needed by the account itself.\\n     *\\n     * @param nonce to validate\\n     *\\n     * solhint-disable-next-line no-empty-blocks\\n     */\\n    function _validateNonce(uint256 nonce) internal view virtual {\\n    }\\n\\n    /**\\n     * sends to the entrypoint (msg.sender) the missing funds for this transaction.\\n     * subclass MAY override this method for better funds management\\n     * (e.g. send to the entryPoint more than the minimum required, so that in future transactions\\n     * it will not be required to send again)\\n     * @param missingAccountFunds the minimum value this method should send the entrypoint.\\n     *  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\\n     */\\n    function _payPrefund(uint256 missingAccountFunds) internal virtual {\\n        if (missingAccountFunds != 0) {\\n            (bool success,) = payable(msg.sender).call{value : missingAccountFunds, gas : type(uint256).max}(\\\"\\\");\\n            (success);\\n            //ignore failure (its EntryPoint's job to verify, not account.)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5eb3253b32fd8ba8ae7b9d83da8e9924254a4d3d17a8772b41280e8572974b3c\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\",\"keccak256\":\"0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\ninterface IAccount {\\n\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp the operation that is about to be executed.\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external returns (uint256 validationData);\\n}\\n\",\"keccak256\":\"0x556a0e5980de18e90b115553ed502408155ba35f58642823010d9288047bc418\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp)\\n    external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatedSignature the aggregated signature\\n     */\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\\n}\\n\",\"keccak256\":\"0x060e9ddb0152250c269ba0640dc5753834ac44cf182a2837d508c0c529cae26a\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IEntryPoint.sol\":{\"content\":\"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\nimport \\\"./INonceManager.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager, INonceManager {\\n\\n    /***\\n     * An event emitted after each successful request\\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\\n     * @param sender - the account that generates this request.\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\n     * @param nonce - the nonce value from the request.\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\\n     */\\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\\n\\n    /**\\n     * account \\\"sender\\\" was deployed.\\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\\n     * @param sender the account that is deployed\\n     * @param factory the factory used to deploy this account (in the initCode)\\n     * @param paymaster the paymaster used by this UserOp\\n     */\\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\n     * @param userOpHash the request unique identifier.\\n     * @param sender the sender of this request\\n     * @param nonce the nonce used in the request\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\\n\\n    /**\\n     * an event emitted by handleOps(), before starting the execution loop.\\n     * any event emitted before this event, is part of the validation.\\n     */\\n    event BeforeExecution();\\n\\n    /**\\n     * signature aggregator used by the following UserOperationEvents within this bundle.\\n     */\\n    event SignatureAggregatorChanged(address indexed aggregator);\\n\\n    /**\\n     * a custom revert error of handleOps, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\n     *  @param reason - revert reason\\n     *      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\n     *      so a failure can be attributed to the correct entity.\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\n     */\\n    error FailedOp(uint256 opIndex, string reason);\\n\\n    /**\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    /**\\n     * Successful result from simulateValidation.\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     */\\n    error ValidationResult(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\\n\\n    /**\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\n     */\\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\\n        AggregatorStakeInfo aggregatorInfo);\\n\\n    /**\\n     * return value of getSenderAddress\\n     */\\n    error SenderAddressResult(address sender);\\n\\n    /**\\n     * return value of simulateHandleOp\\n     */\\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint48 validAfter, uint48 validUntil, bool targetSuccess, bytes targetResult);\\n\\n    //UserOps handled, per aggregator\\n    struct UserOpsPerAggregator {\\n        UserOperation[] userOps;\\n\\n        // aggregator address\\n        IAggregator aggregator;\\n        // aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * no signature aggregator is used.\\n     * if any account requires an aggregator (that is, it returned an aggregator when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\\n\\n    /**\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\n     * @param userOp the user operation to validate.\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external;\\n\\n    /**\\n     * gas and return values during simulation\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\\n     */\\n    struct ReturnInfo {\\n        uint256 preOpGas;\\n        uint256 prefund;\\n        bool sigFailed;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n        bytes paymasterContext;\\n    }\\n\\n    /**\\n     * returned aggregated signature info.\\n     * the aggregator returned by the account, and its current stake.\\n     */\\n    struct AggregatorStakeInfo {\\n        address aggregator;\\n        StakeInfo stakeInfo;\\n    }\\n\\n    /**\\n     * Get counterfactual sender address.\\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n     * this method always revert, and returns the address in SenderAddressResult error\\n     * @param initCode the constructor code to be passed into the UserOperation.\\n     */\\n    function getSenderAddress(bytes memory initCode) external;\\n\\n\\n    /**\\n     * simulate full execution of a UserOperation (including both validation and target execution)\\n     * this method will always revert with \\\"ExecutionResult\\\".\\n     * it performs full validation of the UserOperation, but ignores signature error.\\n     * an optional target address is called after the userop succeeds, and its value is returned\\n     * (before the entire call is reverted)\\n     * Note that in order to collect the the success/failure of the target call, it must be executed\\n     * with trace enabled to track the emitted events.\\n     * @param op the UserOperation to simulate\\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\\n     *        are set to the return from that call.\\n     * @param targetCallData callData to pass to target address\\n     */\\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\\n}\\n\\n\",\"keccak256\":\"0x3a90bf308819ed125fa4202f880999caff8a8686633b8ddb79a30ca240d5b8f8\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/INonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface INonceManager {\\n\\n    /**\\n     * Return the next nonce for this sender.\\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\\n     * But UserOp with different keys can come with arbitrary order.\\n     *\\n     * @param sender the account address\\n     * @param key the high 192 bit of the nonce\\n     * @return nonce a full nonce to pass for next UserOp with this sender.\\n     */\\n    function getNonce(address sender, uint192 key)\\n    external view returns (uint256 nonce);\\n\\n    /**\\n     * Manually increment the nonce of the sender.\\n     * This method is exposed just for completeness..\\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\\n     * as the EntryPoint will update the nonce regardless.\\n     * Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future\\n     * UserOperations will not pay extra for the first transaction with a given key.\\n     */\\n    function incrementNonce(uint192 key) external;\\n}\\n\",\"keccak256\":\"0x509871e6c63663cdcc3eba19920fe84e991f38b289b1377ac3c3a6d9f22d7e12\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when stake or unstake delay are modified\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 unstakeDelaySec\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the entity's deposit\\n     * @param staked true if this entity is staked.\\n     * @param stake actual amount of ether staked for this entity.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 10^15 eth\\n     *    48 bit for full timestamp\\n     *    32 bit allows 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint48 withdrawTime;\\n    }\\n\\n    //API struct used by getStakeInfo and simulateValidation\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /// @return info - full deposit information of given account\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// @return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\",\"keccak256\":\"0xd227b02888cd4ac68daebcdfd992ec00f9fff66fa3b3bb16f656cd582fa3480f\",\"license\":\"GPL-3.0-only\"},\"@account-abstraction/contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"entryPoint()":{"notice":"return the entryPoint used by this account. subclass should return the current entryPoint used by this account."},"getNonce()":{"notice":"Return the account nonce. This method returns the next sequential nonce. For a nonce of a specific key, use `entrypoint.getNonce(account, key)`"},"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":{"notice":"Validate user's signature and nonce. subclass doesn't need to override this method. Instead, it should override the specific internal validation methods."}},"notice":"Basic account implementation. this contract provides the basic logic for implementing the IAccount interface  - validateUserOp specific account implementation should inherit it and provide the account-specific logic","version":1}}},"@account-abstraction/contracts/interfaces/IAccount.sol":{"IAccount":{"abi":[{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"userOp","type":"tuple"},{"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"internalType":"uint256","name":"missingAccountFunds","type":"uint256"}],"name":"validateUserOp","outputs":[{"internalType":"uint256","name":"validationData","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":{"details":"Must validate caller is the entryPoint.      Must validate the signature and nonce","params":{"missingAccountFunds":"missing funds on the account's deposit in the entrypoint.      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.      The excess is left as a deposit in the entrypoint, for future calls.      can be withdrawn anytime using \"entryPoint.withdrawTo()\"      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.","userOp":"the operation that is about to be executed.","userOpHash":"hash of the user's request data. can be used as the basis for signature."},"returns":{"validationData":"packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,         otherwise, an address of an \"authorizer\" contract.      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"      <6-byte> validAfter - first timestamp this operation is valid      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.      Note that the validation code cannot use block.timestamp (or block.number) directly."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":"3a871cdd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"missingAccountFunds\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"details\":\"Must validate caller is the entryPoint.      Must validate the signature and nonce\",\"params\":{\"missingAccountFunds\":\"missing funds on the account's deposit in the entrypoint.      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.      The excess is left as a deposit in the entrypoint, for future calls.      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\",\"userOp\":\"the operation that is about to be executed.\",\"userOpHash\":\"hash of the user's request data. can be used as the basis for signature.\"},\"returns\":{\"validationData\":\"packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,         otherwise, an address of an \\\"authorizer\\\" contract.      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"      <6-byte> validAfter - first timestamp this operation is valid      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.      Note that the validation code cannot use block.timestamp (or block.number) directly.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"notice\":\"Validate user's signature and nonce the entryPoint will make the call to the recipient only if this validation call returns successfully. signature failure should be reported by returning SIG_VALIDATION_FAILED (1). This allows making a \\\"simulation call\\\" without a valid signature Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@account-abstraction/contracts/interfaces/IAccount.sol\":\"IAccount\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@account-abstraction/contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\",\"keccak256\":\"0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\ninterface IAccount {\\n\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp the operation that is about to be executed.\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external returns (uint256 validationData);\\n}\\n\",\"keccak256\":\"0x556a0e5980de18e90b115553ed502408155ba35f58642823010d9288047bc418\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":{"notice":"Validate user's signature and nonce the entryPoint will make the call to the recipient only if this validation call returns successfully. signature failure should be reported by returning SIG_VALIDATION_FAILED (1). This allows making a \"simulation call\" without a valid signature Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure."}},"version":1}}},"@account-abstraction/contracts/interfaces/IAggregator.sol":{"IAggregator":{"abi":[{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation[]","name":"userOps","type":"tuple[]"}],"name":"aggregateSignatures","outputs":[{"internalType":"bytes","name":"aggregatedSignature","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation[]","name":"userOps","type":"tuple[]"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"validateSignatures","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"userOp","type":"tuple"}],"name":"validateUserOpSignature","outputs":[{"internalType":"bytes","name":"sigForUserOp","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])":{"params":{"userOps":"array of UserOperations to collect the signatures from."},"returns":{"aggregatedSignature":"the aggregated signature"}},"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":{"params":{"userOp":"the userOperation received from the user."},"returns":{"sigForUserOp":"the value to put into the signature field of the userOp when calling handleOps.    (usually empty, unless account and aggregator support some kind of \"multisig\""}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])":"275e2d79","validateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes)":"e3563a4f","validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":"64c530cd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"userOps\",\"type\":\"tuple[]\"}],\"name\":\"aggregateSignatures\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"aggregatedSignature\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"userOps\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"validateSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"validateUserOpSignature\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"sigForUserOp\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])\":{\"params\":{\"userOps\":\"array of UserOperations to collect the signatures from.\"},\"returns\":{\"aggregatedSignature\":\"the aggregated signature\"}},\"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"params\":{\"userOp\":\"the userOperation received from the user.\"},\"returns\":{\"sigForUserOp\":\"the value to put into the signature field of the userOp when calling handleOps.    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])\":{\"notice\":\"aggregate multiple signatures into a single value. This method is called off-chain to calculate the signature to pass with handleOps() bundler MAY use optimized custom code perform this aggregation\"},\"validateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes)\":{\"notice\":\"validate aggregated signature. revert if the aggregated signature does not match the given list of operations.\"},\"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"validate signature of a single userOp This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\"}},\"notice\":\"Aggregated Signatures validator.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@account-abstraction/contracts/interfaces/IAggregator.sol\":\"IAggregator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@account-abstraction/contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\",\"keccak256\":\"0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp)\\n    external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatedSignature the aggregated signature\\n     */\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\\n}\\n\",\"keccak256\":\"0x060e9ddb0152250c269ba0640dc5753834ac44cf182a2837d508c0c529cae26a\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])":{"notice":"aggregate multiple signatures into a single value. This method is called off-chain to calculate the signature to pass with handleOps() bundler MAY use optimized custom code perform this aggregation"},"validateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes)":{"notice":"validate aggregated signature. revert if the aggregated signature does not match the given list of operations."},"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":{"notice":"validate signature of a single userOp This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps."}},"notice":"Aggregated Signatures validator.","version":1}}},"@account-abstraction/contracts/interfaces/IEntryPoint.sol":{"IEntryPoint":{"abi":[{"inputs":[{"internalType":"uint256","name":"preOpGas","type":"uint256"},{"internalType":"uint256","name":"paid","type":"uint256"},{"internalType":"uint48","name":"validAfter","type":"uint48"},{"internalType":"uint48","name":"validUntil","type":"uint48"},{"internalType":"bool","name":"targetSuccess","type":"bool"},{"internalType":"bytes","name":"targetResult","type":"bytes"}],"name":"ExecutionResult","type":"error"},{"inputs":[{"internalType":"uint256","name":"opIndex","type":"uint256"},{"internalType":"string","name":"reason","type":"string"}],"name":"FailedOp","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"SenderAddressResult","type":"error"},{"inputs":[{"internalType":"address","name":"aggregator","type":"address"}],"name":"SignatureValidationFailed","type":"error"},{"inputs":[{"components":[{"internalType":"uint256","name":"preOpGas","type":"uint256"},{"internalType":"uint256","name":"prefund","type":"uint256"},{"internalType":"bool","name":"sigFailed","type":"bool"},{"internalType":"uint48","name":"validAfter","type":"uint48"},{"internalType":"uint48","name":"validUntil","type":"uint48"},{"internalType":"bytes","name":"paymasterContext","type":"bytes"}],"internalType":"struct IEntryPoint.ReturnInfo","name":"returnInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"senderInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"factoryInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"paymasterInfo","type":"tuple"}],"name":"ValidationResult","type":"error"},{"inputs":[{"components":[{"internalType":"uint256","name":"preOpGas","type":"uint256"},{"internalType":"uint256","name":"prefund","type":"uint256"},{"internalType":"bool","name":"sigFailed","type":"bool"},{"internalType":"uint48","name":"validAfter","type":"uint48"},{"internalType":"uint48","name":"validUntil","type":"uint48"},{"internalType":"bytes","name":"paymasterContext","type":"bytes"}],"internalType":"struct IEntryPoint.ReturnInfo","name":"returnInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"senderInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"factoryInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"paymasterInfo","type":"tuple"},{"components":[{"internalType":"address","name":"aggregator","type":"address"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"stakeInfo","type":"tuple"}],"internalType":"struct IEntryPoint.AggregatorStakeInfo","name":"aggregatorInfo","type":"tuple"}],"name":"ValidationResultWithAggregation","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"address","name":"factory","type":"address"},{"indexed":false,"internalType":"address","name":"paymaster","type":"address"}],"name":"AccountDeployed","type":"event"},{"anonymous":false,"inputs":[],"name":"BeforeExecution","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"totalDeposit","type":"uint256"}],"name":"Deposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"aggregator","type":"address"}],"name":"SignatureAggregatorChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"totalStaked","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"name":"StakeLocked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"withdrawTime","type":"uint256"}],"name":"StakeUnlocked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"withdrawAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakeWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"paymaster","type":"address"},{"indexed":false,"internalType":"uint256","name":"nonce","type":"uint256"},{"indexed":false,"internalType":"bool","name":"success","type":"bool"},{"indexed":false,"internalType":"uint256","name":"actualGasCost","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"actualGasUsed","type":"uint256"}],"name":"UserOperationEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"nonce","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"revertReason","type":"bytes"}],"name":"UserOperationRevertReason","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"withdrawAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdrawn","type":"event"},{"inputs":[{"internalType":"uint32","name":"_unstakeDelaySec","type":"uint32"}],"name":"addStake","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"depositTo","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getDepositInfo","outputs":[{"components":[{"internalType":"uint112","name":"deposit","type":"uint112"},{"internalType":"bool","name":"staked","type":"bool"},{"internalType":"uint112","name":"stake","type":"uint112"},{"internalType":"uint32","name":"unstakeDelaySec","type":"uint32"},{"internalType":"uint48","name":"withdrawTime","type":"uint48"}],"internalType":"struct IStakeManager.DepositInfo","name":"info","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint192","name":"key","type":"uint192"}],"name":"getNonce","outputs":[{"internalType":"uint256","name":"nonce","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"}],"name":"getSenderAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"userOp","type":"tuple"}],"name":"getUserOpHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation[]","name":"userOps","type":"tuple[]"},{"internalType":"contract IAggregator","name":"aggregator","type":"address"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct IEntryPoint.UserOpsPerAggregator[]","name":"opsPerAggregator","type":"tuple[]"},{"internalType":"address payable","name":"beneficiary","type":"address"}],"name":"handleAggregatedOps","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation[]","name":"ops","type":"tuple[]"},{"internalType":"address payable","name":"beneficiary","type":"address"}],"name":"handleOps","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint192","name":"key","type":"uint192"}],"name":"incrementNonce","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"op","type":"tuple"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"targetCallData","type":"bytes"}],"name":"simulateHandleOp","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"userOp","type":"tuple"}],"name":"simulateValidation","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unlockStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"withdrawAddress","type":"address"}],"name":"withdrawStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"withdrawAddress","type":"address"},{"internalType":"uint256","name":"withdrawAmount","type":"uint256"}],"name":"withdrawTo","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"FailedOp(uint256,string)":[{"params":{"opIndex":"- index into the array of ops to the failed one (in simulateValidation, this is always zero)","reason":"- revert reason      The string starts with a unique code \"AAmn\", where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,      so a failure can be attributed to the correct entity.   Should be caught in off-chain handleOps simulation and not happen on-chain.   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts."}}],"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))":[{"params":{"factoryInfo":"stake information about the factory (if any)","paymasterInfo":"stake information about the paymaster (if any)","returnInfo":"gas and time-range returned values","senderInfo":"stake information about the sender"}}],"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))":[{"params":{"aggregatorInfo":"signature aggregation info (if the account requires signature aggregator)      bundler MUST use it to verify the signature, or reject the UserOperation","factoryInfo":"stake information about the factory (if any)","paymasterInfo":"stake information about the paymaster (if any)","returnInfo":"gas and time-range returned values","senderInfo":"stake information about the sender"}}]},"events":{"AccountDeployed(bytes32,address,address,address)":{"params":{"factory":"the factory used to deploy this account (in the initCode)","paymaster":"the paymaster used by this UserOp","sender":"the account that is deployed","userOpHash":"the userOp that deployed this account. UserOperationEvent will follow."}},"UserOperationRevertReason(bytes32,address,uint256,bytes)":{"params":{"nonce":"the nonce used in the request","revertReason":"- the return bytes from the (reverted) call to \"callData\".","sender":"the sender of this request","userOpHash":"the request unique identifier."}}},"kind":"dev","methods":{"addStake(uint32)":{"params":{"_unstakeDelaySec":"the new lock duration before the deposit can be withdrawn."}},"balanceOf(address)":{"returns":{"_0":"the deposit (for gas payment) of the account"}},"getDepositInfo(address)":{"returns":{"info":"- full deposit information of given account"}},"getNonce(address,uint192)":{"params":{"key":"the high 192 bit of the nonce","sender":"the account address"},"returns":{"nonce":"a full nonce to pass for next UserOp with this sender."}},"getSenderAddress(bytes)":{"params":{"initCode":"the constructor code to be passed into the UserOperation."}},"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)":{"params":{"beneficiary":"the address to receive the fees","opsPerAggregator":"the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)"}},"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)":{"params":{"beneficiary":"the address to receive the fees","ops":"the operations to execute"}},"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)":{"params":{"op":"the UserOperation to simulate","target":"if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult        are set to the return from that call.","targetCallData":"callData to pass to target address"}},"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":{"details":"this method always revert. Successful result is ValidationResult error. other errors are failures.The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.","params":{"userOp":"the user operation to validate."}},"withdrawStake(address)":{"params":{"withdrawAddress":"the address to send withdrawn value."}},"withdrawTo(address,uint256)":{"params":{"withdrawAddress":"the address to send withdrawn value.","withdrawAmount":"the amount to withdraw."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addStake(uint32)":"0396cb60","balanceOf(address)":"70a08231","depositTo(address)":"b760faf9","getDepositInfo(address)":"5287ce12","getNonce(address,uint192)":"35567e1a","getSenderAddress(bytes)":"9b249f69","getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":"a6193531","handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)":"4b1d7cf5","handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)":"1fad948c","incrementNonce(uint192)":"0bd28e3b","simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)":"d6383f94","simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":"ee219423","unlockStake()":"bb9fe6bf","withdrawStake(address)":"c23a5cea","withdrawTo(address,uint256)":"205c2878"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"validAfter\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"validUntil\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"targetSuccess\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"targetResult\",\"type\":\"bytes\"}],\"name\":\"ExecutionResult\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"opIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"FailedOp\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderAddressResult\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"SignatureValidationFailed\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prefund\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sigFailed\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"validAfter\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"validUntil\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"paymasterContext\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.ReturnInfo\",\"name\":\"returnInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"senderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"factoryInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"paymasterInfo\",\"type\":\"tuple\"}],\"name\":\"ValidationResult\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prefund\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sigFailed\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"validAfter\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"validUntil\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"paymasterContext\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.ReturnInfo\",\"name\":\"returnInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"senderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"factoryInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"paymasterInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"stakeInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct IEntryPoint.AggregatorStakeInfo\",\"name\":\"aggregatorInfo\",\"type\":\"tuple\"}],\"name\":\"ValidationResultWithAggregation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"}],\"name\":\"AccountDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BeforeExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"SignatureAggregatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"name\":\"StakeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"StakeUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualGasUsed\",\"type\":\"uint256\"}],\"name\":\"UserOperationEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"}],\"name\":\"UserOperationRevertReason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"deposit\",\"type\":\"uint112\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint112\",\"name\":\"stake\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"withdrawTime\",\"type\":\"uint48\"}],\"internalType\":\"struct IStakeManager.DepositInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"getSenderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"getUserOpHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"userOps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAggregator\",\"name\":\"aggregator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.UserOpsPerAggregator[]\",\"name\":\"opsPerAggregator\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"handleAggregatedOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"ops\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"handleOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"incrementNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"op\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"targetCallData\",\"type\":\"bytes\"}],\"name\":\"simulateHandleOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"simulateValidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"FailedOp(uint256,string)\":[{\"params\":{\"opIndex\":\"- index into the array of ops to the failed one (in simulateValidation, this is always zero)\",\"reason\":\"- revert reason      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,      so a failure can be attributed to the correct entity.   Should be caught in off-chain handleOps simulation and not happen on-chain.   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\"}}],\"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))\":[{\"params\":{\"factoryInfo\":\"stake information about the factory (if any)\",\"paymasterInfo\":\"stake information about the paymaster (if any)\",\"returnInfo\":\"gas and time-range returned values\",\"senderInfo\":\"stake information about the sender\"}}],\"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))\":[{\"params\":{\"aggregatorInfo\":\"signature aggregation info (if the account requires signature aggregator)      bundler MUST use it to verify the signature, or reject the UserOperation\",\"factoryInfo\":\"stake information about the factory (if any)\",\"paymasterInfo\":\"stake information about the paymaster (if any)\",\"returnInfo\":\"gas and time-range returned values\",\"senderInfo\":\"stake information about the sender\"}}]},\"events\":{\"AccountDeployed(bytes32,address,address,address)\":{\"params\":{\"factory\":\"the factory used to deploy this account (in the initCode)\",\"paymaster\":\"the paymaster used by this UserOp\",\"sender\":\"the account that is deployed\",\"userOpHash\":\"the userOp that deployed this account. UserOperationEvent will follow.\"}},\"UserOperationRevertReason(bytes32,address,uint256,bytes)\":{\"params\":{\"nonce\":\"the nonce used in the request\",\"revertReason\":\"- the return bytes from the (reverted) call to \\\"callData\\\".\",\"sender\":\"the sender of this request\",\"userOpHash\":\"the request unique identifier.\"}}},\"kind\":\"dev\",\"methods\":{\"addStake(uint32)\":{\"params\":{\"_unstakeDelaySec\":\"the new lock duration before the deposit can be withdrawn.\"}},\"balanceOf(address)\":{\"returns\":{\"_0\":\"the deposit (for gas payment) of the account\"}},\"getDepositInfo(address)\":{\"returns\":{\"info\":\"- full deposit information of given account\"}},\"getNonce(address,uint192)\":{\"params\":{\"key\":\"the high 192 bit of the nonce\",\"sender\":\"the account address\"},\"returns\":{\"nonce\":\"a full nonce to pass for next UserOp with this sender.\"}},\"getSenderAddress(bytes)\":{\"params\":{\"initCode\":\"the constructor code to be passed into the UserOperation.\"}},\"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)\":{\"params\":{\"beneficiary\":\"the address to receive the fees\",\"opsPerAggregator\":\"the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\"}},\"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)\":{\"params\":{\"beneficiary\":\"the address to receive the fees\",\"ops\":\"the operations to execute\"}},\"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)\":{\"params\":{\"op\":\"the UserOperation to simulate\",\"target\":\"if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult        are set to the return from that call.\",\"targetCallData\":\"callData to pass to target address\"}},\"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"details\":\"this method always revert. Successful result is ValidationResult error. other errors are failures.The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\",\"params\":{\"userOp\":\"the user operation to validate.\"}},\"withdrawStake(address)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\"}},\"withdrawTo(address,uint256)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\",\"withdrawAmount\":\"the amount to withdraw.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ExecutionResult(uint256,uint256,uint48,uint48,bool,bytes)\":[{\"notice\":\"return value of simulateHandleOp\"}],\"FailedOp(uint256,string)\":[{\"notice\":\"a custom revert error of handleOps, to identify the offending op.  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\"}],\"SenderAddressResult(address)\":[{\"notice\":\"return value of getSenderAddress\"}],\"SignatureValidationFailed(address)\":[{\"notice\":\"error case when a signature aggregator fails to verify the aggregated signature it had created.\"}],\"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))\":[{\"notice\":\"Successful result from simulateValidation.\"}],\"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))\":[{\"notice\":\"Successful result from simulateValidation, if the account returns a signature aggregator\"}]},\"events\":{\"AccountDeployed(bytes32,address,address,address)\":{\"notice\":\"account \\\"sender\\\" was deployed.\"},\"BeforeExecution()\":{\"notice\":\"an event emitted by handleOps(), before starting the execution loop. any event emitted before this event, is part of the validation.\"},\"SignatureAggregatorChanged(address)\":{\"notice\":\"signature aggregator used by the following UserOperationEvents within this bundle.\"},\"StakeLocked(address,uint256,uint256)\":{\"notice\":\"Emitted when stake or unstake delay are modified\"},\"StakeUnlocked(address,uint256)\":{\"notice\":\"Emitted once a stake is scheduled for withdrawal\"},\"UserOperationRevertReason(bytes32,address,uint256,bytes)\":{\"notice\":\"An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\"}},\"kind\":\"user\",\"methods\":{\"addStake(uint32)\":{\"notice\":\"add to the account's stake - amount and delay any pending unstake is first cancelled.\"},\"depositTo(address)\":{\"notice\":\"add to the deposit of the given account\"},\"getNonce(address,uint192)\":{\"notice\":\"Return the next nonce for this sender. Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop) But UserOp with different keys can come with arbitrary order.\"},\"getSenderAddress(bytes)\":{\"notice\":\"Get counterfactual sender address.  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation. this method always revert, and returns the address in SenderAddressResult error\"},\"getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"generate a request Id - unique identifier for this request. the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\"},\"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)\":{\"notice\":\"Execute a batch of UserOperation with Aggregators\"},\"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)\":{\"notice\":\"Execute a batch of UserOperation. no signature aggregator is used. if any account requires an aggregator (that is, it returned an aggregator when performing simulateValidation), then handleAggregatedOps() must be used instead.\"},\"incrementNonce(uint192)\":{\"notice\":\"Manually increment the nonce of the sender. This method is exposed just for completeness.. Account does NOT need to call it, neither during validation, nor elsewhere, as the EntryPoint will update the nonce regardless. Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future UserOperations will not pay extra for the first transaction with a given key.\"},\"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)\":{\"notice\":\"simulate full execution of a UserOperation (including both validation and target execution) this method will always revert with \\\"ExecutionResult\\\". it performs full validation of the UserOperation, but ignores signature error. an optional target address is called after the userop succeeds, and its value is returned (before the entire call is reverted) Note that in order to collect the the success/failure of the target call, it must be executed with trace enabled to track the emitted events.\"},\"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\"},\"unlockStake()\":{\"notice\":\"attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay.\"},\"withdrawStake(address)\":{\"notice\":\"withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass\"},\"withdrawTo(address,uint256)\":{\"notice\":\"withdraw from the deposit.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@account-abstraction/contracts/interfaces/IEntryPoint.sol\":\"IEntryPoint\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@account-abstraction/contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\",\"keccak256\":\"0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp)\\n    external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatedSignature the aggregated signature\\n     */\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\\n}\\n\",\"keccak256\":\"0x060e9ddb0152250c269ba0640dc5753834ac44cf182a2837d508c0c529cae26a\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IEntryPoint.sol\":{\"content\":\"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\nimport \\\"./INonceManager.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager, INonceManager {\\n\\n    /***\\n     * An event emitted after each successful request\\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\\n     * @param sender - the account that generates this request.\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\n     * @param nonce - the nonce value from the request.\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\\n     */\\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\\n\\n    /**\\n     * account \\\"sender\\\" was deployed.\\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\\n     * @param sender the account that is deployed\\n     * @param factory the factory used to deploy this account (in the initCode)\\n     * @param paymaster the paymaster used by this UserOp\\n     */\\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\n     * @param userOpHash the request unique identifier.\\n     * @param sender the sender of this request\\n     * @param nonce the nonce used in the request\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\\n\\n    /**\\n     * an event emitted by handleOps(), before starting the execution loop.\\n     * any event emitted before this event, is part of the validation.\\n     */\\n    event BeforeExecution();\\n\\n    /**\\n     * signature aggregator used by the following UserOperationEvents within this bundle.\\n     */\\n    event SignatureAggregatorChanged(address indexed aggregator);\\n\\n    /**\\n     * a custom revert error of handleOps, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\n     *  @param reason - revert reason\\n     *      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\n     *      so a failure can be attributed to the correct entity.\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\n     */\\n    error FailedOp(uint256 opIndex, string reason);\\n\\n    /**\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    /**\\n     * Successful result from simulateValidation.\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     */\\n    error ValidationResult(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\\n\\n    /**\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\n     */\\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\\n        AggregatorStakeInfo aggregatorInfo);\\n\\n    /**\\n     * return value of getSenderAddress\\n     */\\n    error SenderAddressResult(address sender);\\n\\n    /**\\n     * return value of simulateHandleOp\\n     */\\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint48 validAfter, uint48 validUntil, bool targetSuccess, bytes targetResult);\\n\\n    //UserOps handled, per aggregator\\n    struct UserOpsPerAggregator {\\n        UserOperation[] userOps;\\n\\n        // aggregator address\\n        IAggregator aggregator;\\n        // aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * no signature aggregator is used.\\n     * if any account requires an aggregator (that is, it returned an aggregator when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\\n\\n    /**\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\n     * @param userOp the user operation to validate.\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external;\\n\\n    /**\\n     * gas and return values during simulation\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\\n     */\\n    struct ReturnInfo {\\n        uint256 preOpGas;\\n        uint256 prefund;\\n        bool sigFailed;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n        bytes paymasterContext;\\n    }\\n\\n    /**\\n     * returned aggregated signature info.\\n     * the aggregator returned by the account, and its current stake.\\n     */\\n    struct AggregatorStakeInfo {\\n        address aggregator;\\n        StakeInfo stakeInfo;\\n    }\\n\\n    /**\\n     * Get counterfactual sender address.\\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n     * this method always revert, and returns the address in SenderAddressResult error\\n     * @param initCode the constructor code to be passed into the UserOperation.\\n     */\\n    function getSenderAddress(bytes memory initCode) external;\\n\\n\\n    /**\\n     * simulate full execution of a UserOperation (including both validation and target execution)\\n     * this method will always revert with \\\"ExecutionResult\\\".\\n     * it performs full validation of the UserOperation, but ignores signature error.\\n     * an optional target address is called after the userop succeeds, and its value is returned\\n     * (before the entire call is reverted)\\n     * Note that in order to collect the the success/failure of the target call, it must be executed\\n     * with trace enabled to track the emitted events.\\n     * @param op the UserOperation to simulate\\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\\n     *        are set to the return from that call.\\n     * @param targetCallData callData to pass to target address\\n     */\\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\\n}\\n\\n\",\"keccak256\":\"0x3a90bf308819ed125fa4202f880999caff8a8686633b8ddb79a30ca240d5b8f8\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/INonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface INonceManager {\\n\\n    /**\\n     * Return the next nonce for this sender.\\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\\n     * But UserOp with different keys can come with arbitrary order.\\n     *\\n     * @param sender the account address\\n     * @param key the high 192 bit of the nonce\\n     * @return nonce a full nonce to pass for next UserOp with this sender.\\n     */\\n    function getNonce(address sender, uint192 key)\\n    external view returns (uint256 nonce);\\n\\n    /**\\n     * Manually increment the nonce of the sender.\\n     * This method is exposed just for completeness..\\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\\n     * as the EntryPoint will update the nonce regardless.\\n     * Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future\\n     * UserOperations will not pay extra for the first transaction with a given key.\\n     */\\n    function incrementNonce(uint192 key) external;\\n}\\n\",\"keccak256\":\"0x509871e6c63663cdcc3eba19920fe84e991f38b289b1377ac3c3a6d9f22d7e12\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when stake or unstake delay are modified\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 unstakeDelaySec\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the entity's deposit\\n     * @param staked true if this entity is staked.\\n     * @param stake actual amount of ether staked for this entity.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 10^15 eth\\n     *    48 bit for full timestamp\\n     *    32 bit allows 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint48 withdrawTime;\\n    }\\n\\n    //API struct used by getStakeInfo and simulateValidation\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /// @return info - full deposit information of given account\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// @return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\",\"keccak256\":\"0xd227b02888cd4ac68daebcdfd992ec00f9fff66fa3b3bb16f656cd582fa3480f\",\"license\":\"GPL-3.0-only\"},\"@account-abstraction/contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"ExecutionResult(uint256,uint256,uint48,uint48,bool,bytes)":[{"notice":"return value of simulateHandleOp"}],"FailedOp(uint256,string)":[{"notice":"a custom revert error of handleOps, to identify the offending op.  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it."}],"SenderAddressResult(address)":[{"notice":"return value of getSenderAddress"}],"SignatureValidationFailed(address)":[{"notice":"error case when a signature aggregator fails to verify the aggregated signature it had created."}],"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))":[{"notice":"Successful result from simulateValidation."}],"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))":[{"notice":"Successful result from simulateValidation, if the account returns a signature aggregator"}]},"events":{"AccountDeployed(bytes32,address,address,address)":{"notice":"account \"sender\" was deployed."},"BeforeExecution()":{"notice":"an event emitted by handleOps(), before starting the execution loop. any event emitted before this event, is part of the validation."},"SignatureAggregatorChanged(address)":{"notice":"signature aggregator used by the following UserOperationEvents within this bundle."},"StakeLocked(address,uint256,uint256)":{"notice":"Emitted when stake or unstake delay are modified"},"StakeUnlocked(address,uint256)":{"notice":"Emitted once a stake is scheduled for withdrawal"},"UserOperationRevertReason(bytes32,address,uint256,bytes)":{"notice":"An event emitted if the UserOperation \"callData\" reverted with non-zero length"}},"kind":"user","methods":{"addStake(uint32)":{"notice":"add to the account's stake - amount and delay any pending unstake is first cancelled."},"depositTo(address)":{"notice":"add to the deposit of the given account"},"getNonce(address,uint192)":{"notice":"Return the next nonce for this sender. Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop) But UserOp with different keys can come with arbitrary order."},"getSenderAddress(bytes)":{"notice":"Get counterfactual sender address.  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation. this method always revert, and returns the address in SenderAddressResult error"},"getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":{"notice":"generate a request Id - unique identifier for this request. the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid."},"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)":{"notice":"Execute a batch of UserOperation with Aggregators"},"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)":{"notice":"Execute a batch of UserOperation. no signature aggregator is used. if any account requires an aggregator (that is, it returned an aggregator when performing simulateValidation), then handleAggregatedOps() must be used instead."},"incrementNonce(uint192)":{"notice":"Manually increment the nonce of the sender. This method is exposed just for completeness.. Account does NOT need to call it, neither during validation, nor elsewhere, as the EntryPoint will update the nonce regardless. Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future UserOperations will not pay extra for the first transaction with a given key."},"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)":{"notice":"simulate full execution of a UserOperation (including both validation and target execution) this method will always revert with \"ExecutionResult\". it performs full validation of the UserOperation, but ignores signature error. an optional target address is called after the userop succeeds, and its value is returned (before the entire call is reverted) Note that in order to collect the the success/failure of the target call, it must be executed with trace enabled to track the emitted events."},"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":{"notice":"Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp."},"unlockStake()":{"notice":"attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay."},"withdrawStake(address)":{"notice":"withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass"},"withdrawTo(address,uint256)":{"notice":"withdraw from the deposit."}},"version":1}}},"@account-abstraction/contracts/interfaces/INonceManager.sol":{"INonceManager":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint192","name":"key","type":"uint192"}],"name":"getNonce","outputs":[{"internalType":"uint256","name":"nonce","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint192","name":"key","type":"uint192"}],"name":"incrementNonce","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"getNonce(address,uint192)":{"params":{"key":"the high 192 bit of the nonce","sender":"the account address"},"returns":{"nonce":"a full nonce to pass for next UserOp with this sender."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getNonce(address,uint192)":"35567e1a","incrementNonce(uint192)":"0bd28e3b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"incrementNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getNonce(address,uint192)\":{\"params\":{\"key\":\"the high 192 bit of the nonce\",\"sender\":\"the account address\"},\"returns\":{\"nonce\":\"a full nonce to pass for next UserOp with this sender.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getNonce(address,uint192)\":{\"notice\":\"Return the next nonce for this sender. Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop) But UserOp with different keys can come with arbitrary order.\"},\"incrementNonce(uint192)\":{\"notice\":\"Manually increment the nonce of the sender. This method is exposed just for completeness.. Account does NOT need to call it, neither during validation, nor elsewhere, as the EntryPoint will update the nonce regardless. Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future UserOperations will not pay extra for the first transaction with a given key.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@account-abstraction/contracts/interfaces/INonceManager.sol\":\"INonceManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@account-abstraction/contracts/interfaces/INonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface INonceManager {\\n\\n    /**\\n     * Return the next nonce for this sender.\\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\\n     * But UserOp with different keys can come with arbitrary order.\\n     *\\n     * @param sender the account address\\n     * @param key the high 192 bit of the nonce\\n     * @return nonce a full nonce to pass for next UserOp with this sender.\\n     */\\n    function getNonce(address sender, uint192 key)\\n    external view returns (uint256 nonce);\\n\\n    /**\\n     * Manually increment the nonce of the sender.\\n     * This method is exposed just for completeness..\\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\\n     * as the EntryPoint will update the nonce regardless.\\n     * Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future\\n     * UserOperations will not pay extra for the first transaction with a given key.\\n     */\\n    function incrementNonce(uint192 key) external;\\n}\\n\",\"keccak256\":\"0x509871e6c63663cdcc3eba19920fe84e991f38b289b1377ac3c3a6d9f22d7e12\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"getNonce(address,uint192)":{"notice":"Return the next nonce for this sender. Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop) But UserOp with different keys can come with arbitrary order."},"incrementNonce(uint192)":{"notice":"Manually increment the nonce of the sender. This method is exposed just for completeness.. Account does NOT need to call it, neither during validation, nor elsewhere, as the EntryPoint will update the nonce regardless. Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future UserOperations will not pay extra for the first transaction with a given key."}},"version":1}}},"@account-abstraction/contracts/interfaces/IStakeManager.sol":{"IStakeManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"totalDeposit","type":"uint256"}],"name":"Deposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"totalStaked","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"name":"StakeLocked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"withdrawTime","type":"uint256"}],"name":"StakeUnlocked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"withdrawAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakeWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"withdrawAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdrawn","type":"event"},{"inputs":[{"internalType":"uint32","name":"_unstakeDelaySec","type":"uint32"}],"name":"addStake","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"depositTo","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getDepositInfo","outputs":[{"components":[{"internalType":"uint112","name":"deposit","type":"uint112"},{"internalType":"bool","name":"staked","type":"bool"},{"internalType":"uint112","name":"stake","type":"uint112"},{"internalType":"uint32","name":"unstakeDelaySec","type":"uint32"},{"internalType":"uint48","name":"withdrawTime","type":"uint48"}],"internalType":"struct IStakeManager.DepositInfo","name":"info","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unlockStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"withdrawAddress","type":"address"}],"name":"withdrawStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"withdrawAddress","type":"address"},{"internalType":"uint256","name":"withdrawAmount","type":"uint256"}],"name":"withdrawTo","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"addStake(uint32)":{"params":{"_unstakeDelaySec":"the new lock duration before the deposit can be withdrawn."}},"balanceOf(address)":{"returns":{"_0":"the deposit (for gas payment) of the account"}},"getDepositInfo(address)":{"returns":{"info":"- full deposit information of given account"}},"withdrawStake(address)":{"params":{"withdrawAddress":"the address to send withdrawn value."}},"withdrawTo(address,uint256)":{"params":{"withdrawAddress":"the address to send withdrawn value.","withdrawAmount":"the amount to withdraw."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addStake(uint32)":"0396cb60","balanceOf(address)":"70a08231","depositTo(address)":"b760faf9","getDepositInfo(address)":"5287ce12","unlockStake()":"bb9fe6bf","withdrawStake(address)":"c23a5cea","withdrawTo(address,uint256)":"205c2878"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"name\":\"StakeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"StakeUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"deposit\",\"type\":\"uint112\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint112\",\"name\":\"stake\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"withdrawTime\",\"type\":\"uint48\"}],\"internalType\":\"struct IStakeManager.DepositInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addStake(uint32)\":{\"params\":{\"_unstakeDelaySec\":\"the new lock duration before the deposit can be withdrawn.\"}},\"balanceOf(address)\":{\"returns\":{\"_0\":\"the deposit (for gas payment) of the account\"}},\"getDepositInfo(address)\":{\"returns\":{\"info\":\"- full deposit information of given account\"}},\"withdrawStake(address)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\"}},\"withdrawTo(address,uint256)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\",\"withdrawAmount\":\"the amount to withdraw.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"StakeLocked(address,uint256,uint256)\":{\"notice\":\"Emitted when stake or unstake delay are modified\"},\"StakeUnlocked(address,uint256)\":{\"notice\":\"Emitted once a stake is scheduled for withdrawal\"}},\"kind\":\"user\",\"methods\":{\"addStake(uint32)\":{\"notice\":\"add to the account's stake - amount and delay any pending unstake is first cancelled.\"},\"depositTo(address)\":{\"notice\":\"add to the deposit of the given account\"},\"unlockStake()\":{\"notice\":\"attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay.\"},\"withdrawStake(address)\":{\"notice\":\"withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass\"},\"withdrawTo(address,uint256)\":{\"notice\":\"withdraw from the deposit.\"}},\"notice\":\"manage deposits and stakes. deposit is just a balance used to pay for UserOperations (either by a paymaster or an account) stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@account-abstraction/contracts/interfaces/IStakeManager.sol\":\"IStakeManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@account-abstraction/contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when stake or unstake delay are modified\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 unstakeDelaySec\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the entity's deposit\\n     * @param staked true if this entity is staked.\\n     * @param stake actual amount of ether staked for this entity.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 10^15 eth\\n     *    48 bit for full timestamp\\n     *    32 bit allows 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint48 withdrawTime;\\n    }\\n\\n    //API struct used by getStakeInfo and simulateValidation\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /// @return info - full deposit information of given account\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// @return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\",\"keccak256\":\"0xd227b02888cd4ac68daebcdfd992ec00f9fff66fa3b3bb16f656cd582fa3480f\",\"license\":\"GPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"StakeLocked(address,uint256,uint256)":{"notice":"Emitted when stake or unstake delay are modified"},"StakeUnlocked(address,uint256)":{"notice":"Emitted once a stake is scheduled for withdrawal"}},"kind":"user","methods":{"addStake(uint32)":{"notice":"add to the account's stake - amount and delay any pending unstake is first cancelled."},"depositTo(address)":{"notice":"add to the deposit of the given account"},"unlockStake()":{"notice":"attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay."},"withdrawStake(address)":{"notice":"withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass"},"withdrawTo(address,uint256)":{"notice":"withdraw from the deposit."}},"notice":"manage deposits and stakes. deposit is just a balance used to pay for UserOperations (either by a paymaster or an account) stake is value locked for at least \"unstakeDelay\" by the staked entity.","version":1}}},"@account-abstraction/contracts/interfaces/UserOperation.sol":{"UserOperationLib":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122093dba9e870766c84d8064e70d7143b973064762fbcfa928239e798ef0a3f766464736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP4 0xDB 0xA9 0xE8 PUSH17 0x766C84D8064E70D7143B973064762FBCFA SWAP3 DUP3 CODECOPY 0xE7 SWAP9 0xEF EXP EXTCODEHASH PUSH23 0x6464736F6C634300081300330000000000000000000000 ","sourceMap":"1630:2115:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1630:2115:8;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122093dba9e870766c84d8064e70d7143b973064762fbcfa928239e798ef0a3f766464736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP4 0xDB 0xA9 0xE8 PUSH17 0x766C84D8064E70D7143B973064762FBCFA SWAP3 DUP3 CODECOPY 0xE7 SWAP9 0xEF EXP EXTCODEHASH PUSH23 0x6464736F6C634300081300330000000000000000000000 ","sourceMap":"1630:2115:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"gasPrice(struct UserOperation calldata)":"infinite","getSender(struct UserOperation calldata)":"infinite","hash(struct UserOperation calldata)":"infinite","min(uint256,uint256)":"infinite","pack(struct UserOperation calldata)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Utility functions helpful when working with UserOperation structs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@account-abstraction/contracts/interfaces/UserOperation.sol\":\"UserOperationLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@account-abstraction/contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\",\"keccak256\":\"0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Utility functions helpful when working with UserOperation structs.","version":1}}},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol":{"ERC1967Proxy":{"abi":[{"inputs":[{"internalType":"address","name":"_logic","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"}],"stateMutability":"payable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"stateMutability":"payable","type":"fallback"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"details":"This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an implementation address that can be changed. This address is stored in storage in the location specified by https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the implementation behind the proxy.","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is upgraded."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{"constructor":{"details":"Initializes the upgradeable proxy with an initial implementation specified by `_logic`. If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity constructor."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1119":{"entryPoint":null,"id":1119,"parameterSlots":2,"returnSlots":0},"@_setImplementation_1187":{"entryPoint":278,"id":1187,"parameterSlots":1,"returnSlots":0},"@_upgradeToAndCall_1232":{"entryPoint":124,"id":1232,"parameterSlots":3,"returnSlots":0},"@_upgradeTo_1202":{"entryPoint":168,"id":1202,"parameterSlots":1,"returnSlots":0},"@_verifyCallResult_3397":{"entryPoint":645,"id":3397,"parameterSlots":3,"returnSlots":1},"@functionDelegateCall_3332":{"entryPoint":232,"id":3332,"parameterSlots":2,"returnSlots":1},"@functionDelegateCall_3367":{"entryPoint":430,"id":3367,"parameterSlots":3,"returnSlots":1},"@getAddressSlot_1857":{"entryPoint":null,"id":1857,"parameterSlots":1,"returnSlots":1},"@isContract_3122":{"entryPoint":null,"id":3122,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_addresst_bytes_memory_ptr_fromMemory":{"entryPoint":760,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":1021,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1049,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":966,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":724,"id":null,"parameterSlots":3,"returnSlots":0},"panic_error_0x01":{"entryPoint":999,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":702,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3342:26","statements":[{"nodeType":"YulBlock","src":"6:3:26","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:26"},"nodeType":"YulFunctionCall","src":"66:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:26"},"nodeType":"YulFunctionCall","src":"56:31:26"},"nodeType":"YulExpressionStatement","src":"56:31:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:26","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:26"},"nodeType":"YulFunctionCall","src":"96:15:26"},"nodeType":"YulExpressionStatement","src":"96:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:26"},"nodeType":"YulFunctionCall","src":"120:15:26"},"nodeType":"YulExpressionStatement","src":"120:15:26"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:26"},{"body":{"nodeType":"YulBlock","src":"212:184:26","statements":[{"nodeType":"YulVariableDeclaration","src":"222:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"231:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"226:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"291:63:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"316:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"321:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"312:3:26"},"nodeType":"YulFunctionCall","src":"312:11:26"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"335:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"340:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"331:3:26"},"nodeType":"YulFunctionCall","src":"331:11:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"325:5:26"},"nodeType":"YulFunctionCall","src":"325:18:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"305:6:26"},"nodeType":"YulFunctionCall","src":"305:39:26"},"nodeType":"YulExpressionStatement","src":"305:39:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"252:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"255:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"249:2:26"},"nodeType":"YulFunctionCall","src":"249:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"263:19:26","statements":[{"nodeType":"YulAssignment","src":"265:15:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"274:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"277:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"270:3:26"},"nodeType":"YulFunctionCall","src":"270:10:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"265:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"245:3:26","statements":[]},"src":"241:113:26"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"374:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"379:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"370:3:26"},"nodeType":"YulFunctionCall","src":"370:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"388:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"363:6:26"},"nodeType":"YulFunctionCall","src":"363:27:26"},"nodeType":"YulExpressionStatement","src":"363:27:26"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"190:3:26","type":""},{"name":"dst","nodeType":"YulTypedName","src":"195:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"200:6:26","type":""}],"src":"146:250:26"},{"body":{"nodeType":"YulBlock","src":"508:956:26","statements":[{"body":{"nodeType":"YulBlock","src":"554:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"563:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"566:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"556:6:26"},"nodeType":"YulFunctionCall","src":"556:12:26"},"nodeType":"YulExpressionStatement","src":"556:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"529:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"538:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"525:3:26"},"nodeType":"YulFunctionCall","src":"525:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"550:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"521:3:26"},"nodeType":"YulFunctionCall","src":"521:32:26"},"nodeType":"YulIf","src":"518:52:26"},{"nodeType":"YulVariableDeclaration","src":"579:29:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"598:9:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"592:5:26"},"nodeType":"YulFunctionCall","src":"592:16:26"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"583:5:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"671:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"680:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"683:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"673:6:26"},"nodeType":"YulFunctionCall","src":"673:12:26"},"nodeType":"YulExpressionStatement","src":"673:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"630:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"641:5:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"656:3:26","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"661:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"652:3:26"},"nodeType":"YulFunctionCall","src":"652:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"665:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"648:3:26"},"nodeType":"YulFunctionCall","src":"648:19:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"637:3:26"},"nodeType":"YulFunctionCall","src":"637:31:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"627:2:26"},"nodeType":"YulFunctionCall","src":"627:42:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"620:6:26"},"nodeType":"YulFunctionCall","src":"620:50:26"},"nodeType":"YulIf","src":"617:70:26"},{"nodeType":"YulAssignment","src":"696:15:26","value":{"name":"value","nodeType":"YulIdentifier","src":"706:5:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"696:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"720:39:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"744:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"755:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"740:3:26"},"nodeType":"YulFunctionCall","src":"740:18:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"734:5:26"},"nodeType":"YulFunctionCall","src":"734:25:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"724:6:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"768:28:26","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"786:2:26","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"790:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"782:3:26"},"nodeType":"YulFunctionCall","src":"782:10:26"},{"kind":"number","nodeType":"YulLiteral","src":"794:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"778:3:26"},"nodeType":"YulFunctionCall","src":"778:18:26"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"772:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"823:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"832:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"835:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"825:6:26"},"nodeType":"YulFunctionCall","src":"825:12:26"},"nodeType":"YulExpressionStatement","src":"825:12:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"811:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"819:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"808:2:26"},"nodeType":"YulFunctionCall","src":"808:14:26"},"nodeType":"YulIf","src":"805:34:26"},{"nodeType":"YulVariableDeclaration","src":"848:32:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"862:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"873:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"858:3:26"},"nodeType":"YulFunctionCall","src":"858:22:26"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"852:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"928:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"937:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"940:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"930:6:26"},"nodeType":"YulFunctionCall","src":"930:12:26"},"nodeType":"YulExpressionStatement","src":"930:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"907:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"911:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"903:3:26"},"nodeType":"YulFunctionCall","src":"903:13:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"918:7:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"899:3:26"},"nodeType":"YulFunctionCall","src":"899:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"892:6:26"},"nodeType":"YulFunctionCall","src":"892:35:26"},"nodeType":"YulIf","src":"889:55:26"},{"nodeType":"YulVariableDeclaration","src":"953:19:26","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"969:2:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"963:5:26"},"nodeType":"YulFunctionCall","src":"963:9:26"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"957:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"995:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"997:16:26"},"nodeType":"YulFunctionCall","src":"997:18:26"},"nodeType":"YulExpressionStatement","src":"997:18:26"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"987:2:26"},{"name":"_1","nodeType":"YulIdentifier","src":"991:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"984:2:26"},"nodeType":"YulFunctionCall","src":"984:10:26"},"nodeType":"YulIf","src":"981:36:26"},{"nodeType":"YulVariableDeclaration","src":"1026:17:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1040:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1036:3:26"},"nodeType":"YulFunctionCall","src":"1036:7:26"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"1030:2:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1052:23:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1072:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1066:5:26"},"nodeType":"YulFunctionCall","src":"1066:9:26"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1056:6:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1084:71:26","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1106:6:26"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1130:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"1134:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1126:3:26"},"nodeType":"YulFunctionCall","src":"1126:13:26"},{"name":"_4","nodeType":"YulIdentifier","src":"1141:2:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1122:3:26"},"nodeType":"YulFunctionCall","src":"1122:22:26"},{"kind":"number","nodeType":"YulLiteral","src":"1146:2:26","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1118:3:26"},"nodeType":"YulFunctionCall","src":"1118:31:26"},{"name":"_4","nodeType":"YulIdentifier","src":"1151:2:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1114:3:26"},"nodeType":"YulFunctionCall","src":"1114:40:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1102:3:26"},"nodeType":"YulFunctionCall","src":"1102:53:26"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1088:10:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1214:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1216:16:26"},"nodeType":"YulFunctionCall","src":"1216:18:26"},"nodeType":"YulExpressionStatement","src":"1216:18:26"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1173:10:26"},{"name":"_1","nodeType":"YulIdentifier","src":"1185:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1170:2:26"},"nodeType":"YulFunctionCall","src":"1170:18:26"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1193:10:26"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1205:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1190:2:26"},"nodeType":"YulFunctionCall","src":"1190:22:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1167:2:26"},"nodeType":"YulFunctionCall","src":"1167:46:26"},"nodeType":"YulIf","src":"1164:72:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1252:2:26","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1256:10:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1245:6:26"},"nodeType":"YulFunctionCall","src":"1245:22:26"},"nodeType":"YulExpressionStatement","src":"1245:22:26"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1283:6:26"},{"name":"_3","nodeType":"YulIdentifier","src":"1291:2:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1276:6:26"},"nodeType":"YulFunctionCall","src":"1276:18:26"},"nodeType":"YulExpressionStatement","src":"1276:18:26"},{"body":{"nodeType":"YulBlock","src":"1340:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1349:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1352:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1342:6:26"},"nodeType":"YulFunctionCall","src":"1342:12:26"},"nodeType":"YulExpressionStatement","src":"1342:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1317:2:26"},{"name":"_3","nodeType":"YulIdentifier","src":"1321:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1313:3:26"},"nodeType":"YulFunctionCall","src":"1313:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"1326:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1309:3:26"},"nodeType":"YulFunctionCall","src":"1309:20:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1331:7:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1306:2:26"},"nodeType":"YulFunctionCall","src":"1306:33:26"},"nodeType":"YulIf","src":"1303:53:26"},{"expression":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1404:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"1408:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1400:3:26"},"nodeType":"YulFunctionCall","src":"1400:11:26"},{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1417:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"1425:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1413:3:26"},"nodeType":"YulFunctionCall","src":"1413:15:26"},{"name":"_3","nodeType":"YulIdentifier","src":"1430:2:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"1365:34:26"},"nodeType":"YulFunctionCall","src":"1365:68:26"},"nodeType":"YulExpressionStatement","src":"1365:68:26"},{"nodeType":"YulAssignment","src":"1442:16:26","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1452:6:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1442:6:26"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"466:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"477:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"489:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"497:6:26","type":""}],"src":"401:1063:26"},{"body":{"nodeType":"YulBlock","src":"1518:176:26","statements":[{"nodeType":"YulAssignment","src":"1528:17:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"1540:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"1543:1:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1536:3:26"},"nodeType":"YulFunctionCall","src":"1536:9:26"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"1528:4:26"}]},{"body":{"nodeType":"YulBlock","src":"1577:111:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1598:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1605:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1610:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1601:3:26"},"nodeType":"YulFunctionCall","src":"1601:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1591:6:26"},"nodeType":"YulFunctionCall","src":"1591:31:26"},"nodeType":"YulExpressionStatement","src":"1591:31:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1642:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1645:4:26","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1635:6:26"},"nodeType":"YulFunctionCall","src":"1635:15:26"},"nodeType":"YulExpressionStatement","src":"1635:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1670:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1673:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1663:6:26"},"nodeType":"YulFunctionCall","src":"1663:15:26"},"nodeType":"YulExpressionStatement","src":"1663:15:26"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"1560:4:26"},{"name":"x","nodeType":"YulIdentifier","src":"1566:1:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1557:2:26"},"nodeType":"YulFunctionCall","src":"1557:11:26"},"nodeType":"YulIf","src":"1554:134:26"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"1500:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"1503:1:26","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"1509:4:26","type":""}],"src":"1469:225:26"},{"body":{"nodeType":"YulBlock","src":"1731:95:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1748:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1755:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1760:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1751:3:26"},"nodeType":"YulFunctionCall","src":"1751:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1741:6:26"},"nodeType":"YulFunctionCall","src":"1741:31:26"},"nodeType":"YulExpressionStatement","src":"1741:31:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1788:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1791:4:26","type":"","value":"0x01"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1781:6:26"},"nodeType":"YulFunctionCall","src":"1781:15:26"},"nodeType":"YulExpressionStatement","src":"1781:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1812:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1815:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1805:6:26"},"nodeType":"YulFunctionCall","src":"1805:15:26"},"nodeType":"YulExpressionStatement","src":"1805:15:26"}]},"name":"panic_error_0x01","nodeType":"YulFunctionDefinition","src":"1699:127:26"},{"body":{"nodeType":"YulBlock","src":"2005:235:26","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2022:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2033:2:26","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2015:6:26"},"nodeType":"YulFunctionCall","src":"2015:21:26"},"nodeType":"YulExpressionStatement","src":"2015:21:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2056:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2067:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2052:3:26"},"nodeType":"YulFunctionCall","src":"2052:18:26"},{"kind":"number","nodeType":"YulLiteral","src":"2072:2:26","type":"","value":"45"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2045:6:26"},"nodeType":"YulFunctionCall","src":"2045:30:26"},"nodeType":"YulExpressionStatement","src":"2045:30:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2095:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2106:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2091:3:26"},"nodeType":"YulFunctionCall","src":"2091:18:26"},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e","kind":"string","nodeType":"YulLiteral","src":"2111:34:26","type":"","value":"ERC1967: new implementation is n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2084:6:26"},"nodeType":"YulFunctionCall","src":"2084:62:26"},"nodeType":"YulExpressionStatement","src":"2084:62:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2166:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2177:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2162:3:26"},"nodeType":"YulFunctionCall","src":"2162:18:26"},{"hexValue":"6f74206120636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"2182:15:26","type":"","value":"ot a contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2155:6:26"},"nodeType":"YulFunctionCall","src":"2155:43:26"},"nodeType":"YulExpressionStatement","src":"2155:43:26"},{"nodeType":"YulAssignment","src":"2207:27:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2219:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2230:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2215:3:26"},"nodeType":"YulFunctionCall","src":"2215:19:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2207:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1982:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1996:4:26","type":""}],"src":"1831:409:26"},{"body":{"nodeType":"YulBlock","src":"2419:228:26","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2436:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2447:2:26","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2429:6:26"},"nodeType":"YulFunctionCall","src":"2429:21:26"},"nodeType":"YulExpressionStatement","src":"2429:21:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2470:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2481:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2466:3:26"},"nodeType":"YulFunctionCall","src":"2466:18:26"},{"kind":"number","nodeType":"YulLiteral","src":"2486:2:26","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2459:6:26"},"nodeType":"YulFunctionCall","src":"2459:30:26"},"nodeType":"YulExpressionStatement","src":"2459:30:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2509:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2520:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2505:3:26"},"nodeType":"YulFunctionCall","src":"2505:18:26"},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f","kind":"string","nodeType":"YulLiteral","src":"2525:34:26","type":"","value":"Address: delegate call to non-co"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2498:6:26"},"nodeType":"YulFunctionCall","src":"2498:62:26"},"nodeType":"YulExpressionStatement","src":"2498:62:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2580:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2591:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2576:3:26"},"nodeType":"YulFunctionCall","src":"2576:18:26"},{"hexValue":"6e7472616374","kind":"string","nodeType":"YulLiteral","src":"2596:8:26","type":"","value":"ntract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2569:6:26"},"nodeType":"YulFunctionCall","src":"2569:36:26"},"nodeType":"YulExpressionStatement","src":"2569:36:26"},{"nodeType":"YulAssignment","src":"2614:27:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2626:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2637:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2622:3:26"},"nodeType":"YulFunctionCall","src":"2622:19:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2614:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2396:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2410:4:26","type":""}],"src":"2245:402:26"},{"body":{"nodeType":"YulBlock","src":"2789:150:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2799:27:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2819:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2813:5:26"},"nodeType":"YulFunctionCall","src":"2813:13:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2803:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2874:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2882:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2870:3:26"},"nodeType":"YulFunctionCall","src":"2870:17:26"},{"name":"pos","nodeType":"YulIdentifier","src":"2889:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"2894:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2835:34:26"},"nodeType":"YulFunctionCall","src":"2835:66:26"},"nodeType":"YulExpressionStatement","src":"2835:66:26"},{"nodeType":"YulAssignment","src":"2910:23:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2921:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"2926:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2917:3:26"},"nodeType":"YulFunctionCall","src":"2917:16:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2910:3:26"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"2765:3:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2770:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2781:3:26","type":""}],"src":"2652:287:26"},{"body":{"nodeType":"YulBlock","src":"3065:275:26","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3082:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3093:2:26","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3075:6:26"},"nodeType":"YulFunctionCall","src":"3075:21:26"},"nodeType":"YulExpressionStatement","src":"3075:21:26"},{"nodeType":"YulVariableDeclaration","src":"3105:27:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3125:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3119:5:26"},"nodeType":"YulFunctionCall","src":"3119:13:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3109:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3152:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3163:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3148:3:26"},"nodeType":"YulFunctionCall","src":"3148:18:26"},{"name":"length","nodeType":"YulIdentifier","src":"3168:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3141:6:26"},"nodeType":"YulFunctionCall","src":"3141:34:26"},"nodeType":"YulExpressionStatement","src":"3141:34:26"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3223:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3231:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3219:3:26"},"nodeType":"YulFunctionCall","src":"3219:15:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3240:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3251:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3236:3:26"},"nodeType":"YulFunctionCall","src":"3236:18:26"},{"name":"length","nodeType":"YulIdentifier","src":"3256:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"3184:34:26"},"nodeType":"YulFunctionCall","src":"3184:79:26"},"nodeType":"YulExpressionStatement","src":"3184:79:26"},{"nodeType":"YulAssignment","src":"3272:62:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3288:9:26"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3307:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3315:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3303:3:26"},"nodeType":"YulFunctionCall","src":"3303:15:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3324:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3320:3:26"},"nodeType":"YulFunctionCall","src":"3320:7:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3299:3:26"},"nodeType":"YulFunctionCall","src":"3299:29:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3284:3:26"},"nodeType":"YulFunctionCall","src":"3284:45:26"},{"kind":"number","nodeType":"YulLiteral","src":"3331:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3280:3:26"},"nodeType":"YulFunctionCall","src":"3280:54:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3272:4:26"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3034:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3045:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3056:4:26","type":""}],"src":"2944:396:26"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        let offset := mload(add(headStart, 32))\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := mload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(_2, 32), add(memPtr, 32), _3)\n        value1 := memPtr\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x01()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x01)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC1967: new implementation is n\")\n        mstore(add(headStart, 96), \"ot a contract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: delegate call to non-co\")\n        mstore(add(headStart, 96), \"ntract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}","id":26,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405260405161055f38038061055f833981016040819052610022916102f8565b61004d60017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd6103c6565b60008051602061051883398151915214610069576100696103e7565b6100758282600061007c565b505061044c565b610085836100a8565b6000825111806100925750805b156100a3576100a183836100e8565b505b505050565b6100b181610116565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061010d8383604051806060016040528060278152602001610538602791396101ae565b90505b92915050565b803b61017f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b60008051602061051883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060833b61020d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610176565b600080856001600160a01b03168560405161022891906103fd565b600060405180830381855af49150503d8060008114610263576040519150601f19603f3d011682016040523d82523d6000602084013e610268565b606091505b509092509050610279828286610285565b925050505b9392505050565b6060831561029457508161027e565b8251156102a45782518084602001fd5b8160405162461bcd60e51b81526004016101769190610419565b634e487b7160e01b600052604160045260246000fd5b60005b838110156102ef5781810151838201526020016102d7565b50506000910152565b6000806040838503121561030b57600080fd5b82516001600160a01b038116811461032257600080fd5b60208401519092506001600160401b038082111561033f57600080fd5b818501915085601f83011261035357600080fd5b815181811115610365576103656102be565b604051601f8201601f19908116603f0116810190838211818310171561038d5761038d6102be565b816040528281528860208487010111156103a657600080fd5b6103b78360208301602088016102d4565b80955050505050509250929050565b8181038181111561011057634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052600160045260246000fd5b6000825161040f8184602087016102d4565b9190910192915050565b60208152600082518060208401526104388160408501602087016102d4565b601f01601f19169190910160400192915050565b60be8061045a6000396000f3fe608060405236601057600e6013565b005b600e5b601f601b6021565b6065565b565b600060607f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156083573d6000f35b3d6000fdfea26469706673582212200659177648e7221cbada3677e497c843b81c481a12709122f21b78dc3b9eee0d64736f6c63430008130033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x55F CODESIZE SUB DUP1 PUSH2 0x55F DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x22 SWAP2 PUSH2 0x2F8 JUMP JUMPDEST PUSH2 0x4D PUSH1 0x1 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBD PUSH2 0x3C6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x518 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE EQ PUSH2 0x69 JUMPI PUSH2 0x69 PUSH2 0x3E7 JUMP JUMPDEST PUSH2 0x75 DUP3 DUP3 PUSH1 0x0 PUSH2 0x7C JUMP JUMPDEST POP POP PUSH2 0x44C JUMP JUMPDEST PUSH2 0x85 DUP4 PUSH2 0xA8 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x92 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0xA3 JUMPI PUSH2 0xA1 DUP4 DUP4 PUSH2 0xE8 JUMP JUMPDEST POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xB1 DUP2 PUSH2 0x116 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x10D DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x538 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x1AE JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 EXTCODESIZE PUSH2 0x17F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x518 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 DUP4 EXTCODESIZE PUSH2 0x20D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x176 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x228 SWAP2 SWAP1 PUSH2 0x3FD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x263 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x268 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x279 DUP3 DUP3 DUP7 PUSH2 0x285 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x294 JUMPI POP DUP2 PUSH2 0x27E JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x2A4 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x176 SWAP2 SWAP1 PUSH2 0x419 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2EF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2D7 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x30B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x33F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x365 JUMPI PUSH2 0x365 PUSH2 0x2BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x38D JUMPI PUSH2 0x38D PUSH2 0x2BE JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x3A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B7 DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2D4 JUMP JUMPDEST DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x110 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x40F DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2D4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x438 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2D4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xBE DUP1 PUSH2 0x45A PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE PUSH1 0x10 JUMPI PUSH1 0xE PUSH1 0x13 JUMP JUMPDEST STOP JUMPDEST PUSH1 0xE JUMPDEST PUSH1 0x1F PUSH1 0x1B PUSH1 0x21 JUMP JUMPDEST PUSH1 0x65 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH1 0x83 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD MSIZE OR PUSH23 0x48E7221CBADA3677E497C843B81C481A12709122F21B78 0xDC EXTCODESIZE SWAP15 0xEE 0xD PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x65640000000000000000000000 ","sourceMap":"486:830:9:-:0;;;879:217;;;;;;;;;;;;;;;;;;:::i;:::-;984:54;1037:1;992:41;984:54;:::i;:::-;-1:-1:-1;;;;;;;;;;;952:87:9;945:95;;;;:::i;:::-;1050:39;1068:6;1076:5;1083;1050:17;:39::i;:::-;879:217;;486:830;;2091:295:10;2229:29;2240:17;2229:10;:29::i;:::-;2286:1;2272:4;:11;:15;:28;;;;2291:9;2272:28;2268:112;;;2316:53;2345:17;2364:4;2316:28;:53::i;:::-;;2268:112;2091:295;;;:::o;1805:152::-;1871:37;1890:17;1871:18;:37::i;:::-;1923:27;;-1:-1:-1;;;;;1923:27:10;;;;;;;;1805:152;:::o;6172:198:25:-;6255:12;6286:77;6307:6;6315:4;6286:77;;;;;;;;;;;;;;;;;:20;:77::i;:::-;6279:84;;6172:198;;;;;:::o;1440:259:10:-;1034:20:25;;1513:95:10;;;;-1:-1:-1;;;1513:95:10;;2033:2:26;1513:95:10;;;2015:21:26;2072:2;2052:18;;;2045:30;2111:34;2091:18;;;2084:62;-1:-1:-1;;;2162:18:26;;;2155:43;2215:19;;1513:95:10;;;;;;;;;-1:-1:-1;;;;;;;;;;;1618:74:10;;-1:-1:-1;;;;;;1618:74:10;-1:-1:-1;;;;;1618:74:10;;;;;;;;;;1440:259::o;6556:388:25:-;6697:12;1034:20;;6721:69;;;;-1:-1:-1;;;6721:69:25;;2447:2:26;6721:69:25;;;2429:21:26;2486:2;2466:18;;;2459:30;2525:34;2505:18;;;2498:62;-1:-1:-1;;;2576:18:26;;;2569:36;2622:19;;6721:69:25;2245:402:26;6721:69:25;6802:12;6816:23;6843:6;-1:-1:-1;;;;;6843:19:25;6863:4;6843:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6801:67:25;;-1:-1:-1;6801:67:25;-1:-1:-1;6885:52:25;6801:67;;6924:12;6885:17;:52::i;:::-;6878:59;;;;6556:388;;;;;;:::o;6950:692::-;7096:12;7124:7;7120:516;;;-1:-1:-1;7154:10:25;7147:17;;7120:516;7265:17;;:21;7261:365;;7459:10;7453:17;7519:15;7506:10;7502:2;7498:19;7491:44;7261:365;7598:12;7591:20;;-1:-1:-1;;;7591:20:25;;;;;;;;:::i;14:127:26:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:250;231:1;241:113;255:6;252:1;249:13;241:113;;;331:11;;;325:18;312:11;;;305:39;277:2;270:10;241:113;;;-1:-1:-1;;388:1:26;370:16;;363:27;146:250::o;401:1063::-;489:6;497;550:2;538:9;529:7;525:23;521:32;518:52;;;566:1;563;556:12;518:52;592:16;;-1:-1:-1;;;;;637:31:26;;627:42;;617:70;;683:1;680;673:12;617:70;755:2;740:18;;734:25;706:5;;-1:-1:-1;;;;;;808:14:26;;;805:34;;;835:1;832;825:12;805:34;873:6;862:9;858:22;848:32;;918:7;911:4;907:2;903:13;899:27;889:55;;940:1;937;930:12;889:55;969:2;963:9;991:2;987;984:10;981:36;;;997:18;;:::i;:::-;1072:2;1066:9;1040:2;1126:13;;-1:-1:-1;;1122:22:26;;;1146:2;1118:31;1114:40;1102:53;;;1170:18;;;1190:22;;;1167:46;1164:72;;;1216:18;;:::i;:::-;1256:10;1252:2;1245:22;1291:2;1283:6;1276:18;1331:7;1326:2;1321;1317;1313:11;1309:20;1306:33;1303:53;;;1352:1;1349;1342:12;1303:53;1365:68;1430:2;1425;1417:6;1413:15;1408:2;1404;1400:11;1365:68;:::i;:::-;1452:6;1442:16;;;;;;;401:1063;;;;;:::o;1469:225::-;1536:9;;;1557:11;;;1554:134;;;1610:10;1605:3;1601:20;1598:1;1591:31;1645:4;1642:1;1635:15;1673:4;1670:1;1663:15;1699:127;1760:10;1755:3;1751:20;1748:1;1741:31;1791:4;1788:1;1781:15;1815:4;1812:1;1805:15;2652:287;2781:3;2819:6;2813:13;2835:66;2894:6;2889:3;2882:4;2874:6;2870:17;2835:66;:::i;:::-;2917:16;;;;;2652:287;-1:-1:-1;;2652:287:26:o;2944:396::-;3093:2;3082:9;3075:21;3056:4;3125:6;3119:13;3168:6;3163:2;3152:9;3148:18;3141:34;3184:79;3256:6;3251:2;3240:9;3236:18;3231:2;3223:6;3219:15;3184:79;:::i;:::-;3324:2;3303:15;-1:-1:-1;;3299:29:26;3284:45;;;;3331:2;3280:54;;2944:396;-1:-1:-1;;2944:396:26:o;:::-;486:830:9;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_1519":{"entryPoint":null,"id":1519,"parameterSlots":0,"returnSlots":0},"@_1527":{"entryPoint":null,"id":1527,"parameterSlots":0,"returnSlots":0},"@_beforeFallback_1532":{"entryPoint":null,"id":1532,"parameterSlots":0,"returnSlots":0},"@_delegate_1492":{"entryPoint":101,"id":1492,"parameterSlots":1,"returnSlots":0},"@_fallback_1511":{"entryPoint":19,"id":1511,"parameterSlots":0,"returnSlots":0},"@_getImplementation_1163":{"entryPoint":null,"id":1163,"parameterSlots":0,"returnSlots":1},"@_implementation_1131":{"entryPoint":33,"id":1131,"parameterSlots":0,"returnSlots":1},"@getAddressSlot_1857":{"entryPoint":null,"id":1857,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608060405236601057600e6013565b005b600e5b601f601b6021565b6065565b565b600060607f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156083573d6000f35b3d6000fdfea26469706673582212200659177648e7221cbada3677e497c843b81c481a12709122f21b78dc3b9eee0d64736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE PUSH1 0x10 JUMPI PUSH1 0xE PUSH1 0x13 JUMP JUMPDEST STOP JUMPDEST PUSH1 0xE JUMPDEST PUSH1 0x1F PUSH1 0x1B PUSH1 0x21 JUMP JUMPDEST PUSH1 0x65 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH1 0x83 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD MSIZE OR PUSH23 0x48E7221CBADA3677E497C843B81C481A12709122F21B78 0xDC EXTCODESIZE SWAP15 0xEE 0xD PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"486:830:9:-:0;;;;;;2833:11:11;:9;:11::i;:::-;486:830:9;;2610:11:11;2257:110;2332:28;2342:17;:15;:17::i;:::-;2332:9;:28::i;:::-;2257:110::o;1174:140:9:-;1241:12;1272:35;938:66:10;1288:54;;;;1209:140;1272:35:9;1265:42;;1174:140;:::o;883:895:11:-;1221:14;1218:1;1215;1202:34;1435:1;1432;1416:14;1413:1;1397:14;1390:5;1377:60;1511:16;1508:1;1505;1490:38;1549:6;1616:66;;;;1731:16;1728:1;1721:27;1616:66;1651:16;1648:1;1641:27"},"gasEstimates":{"creation":{"codeDepositCost":"38000","executionCost":"infinite","totalCost":"infinite"},"external":{"":"infinite"},"internal":{"_implementation()":"2144"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an implementation address that can be changed. This address is stored in storage in the location specified by https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the implementation behind the proxy.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is upgraded.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the upgradeable proxy with an initial implementation specified by `_logic`. If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity constructor.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":\"ERC1967Proxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xca2eb23a188f213d914fad982985d07e491dbc9960a387d4469bfce5c48911b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"node_modules/@openzeppelin/contracts/proxy/utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdd7ab1894aa38a7e0b4a74436913db828e303be8b0dda4b064d6630ea2a05644\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x8ddea9f930f26e588ea606f44c90d2623560c908e38614a03a4ca78aea8f9202\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5615339d191e77be7e46319b67856f9355786f705b7b3c4a7237ab70c1864ab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d15d280d1f868f59a8264dc73f7ea8c51f10d78aac864b2f2ad29412d187ff5\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol":{"ERC1967Upgrade":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"delegatecall","details":"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is upgraded."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"stateVariables":{"_ADMIN_SLOT":{"details":"Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."},"_BEACON_SLOT":{"details":"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"_IMPLEMENTATION_SLOT":{"details":"Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"delegatecall\",\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is upgraded.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":\"ERC1967Upgrade\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"node_modules/@openzeppelin/contracts/proxy/utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdd7ab1894aa38a7e0b4a74436913db828e303be8b0dda4b064d6630ea2a05644\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5615339d191e77be7e46319b67856f9355786f705b7b3c4a7237ab70c1864ab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d15d280d1f868f59a8264dc73f7ea8c51f10d78aac864b2f2ad29412d187ff5\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/proxy/Proxy.sol":{"Proxy":{"abi":[{"stateMutability":"payable","type":"fallback"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"details":"This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/Proxy.sol\":\"Proxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x8ddea9f930f26e588ea606f44c90d2623560c908e38614a03a4ca78aea8f9202\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/proxy/beacon/IBeacon.sol":{"IBeacon":{"abi":[{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This is the interface that {BeaconProxy} expects of its beacon.","kind":"dev","methods":{"implementation()":{"details":"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"implementation()":"5c60da1b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":\"IBeacon\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5615339d191e77be7e46319b67856f9355786f705b7b3c4a7237ab70c1864ab1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/proxy/utils/Initializable.sol":{"Initializable":{"abi":[],"devdoc":{"details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.","kind":"dev","methods":{},"stateVariables":{"_initialized":{"details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1549,"contract":"@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_bool"},{"astId":1552,"contract":"@openzeppelin/contracts/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol":{"UUPSUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is upgraded."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{"upgradeTo(address)":{"details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is upgraded.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":\"UUPSUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"node_modules/@openzeppelin/contracts/proxy/utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdd7ab1894aa38a7e0b4a74436913db828e303be8b0dda4b064d6630ea2a05644\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5615339d191e77be7e46319b67856f9355786f705b7b3c4a7237ab70c1864ab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0xe3a447af30d1f68b3b8644e5a694a8618259ac5152dce599ba88a3805f9621b0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d15d280d1f868f59a8264dc73f7ea8c51f10d78aac864b2f2ad29412d187ff5\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/proxy/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"IERC1155Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"_Available since v3.1._","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match ids array)"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"_Available since v3.1._\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":\"IERC1155Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol":{"IERC777Recipient":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"},{"internalType":"bytes","name":"operatorData","type":"bytes"}],"name":"tokensReceived","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC777TokensRecipient standard as defined in the EIP. Accounts can be notified of {IERC777} tokens being sent to them by having a contract implement this interface (contract holders can be their own implementer) and registering it on the https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry]. See {IERC1820Registry} and {ERC1820Implementer}.","kind":"dev","methods":{"tokensReceived(address,address,address,uint256,bytes,bytes)":{"details":"Called by an {IERC777} token contract whenever tokens are being moved or created into a registered account (`to`). The type of operation is conveyed by `from` being the zero address or not. This call occurs _after_ the token contract's state is updated, so {IERC777-balanceOf}, etc., can be used to query the post-operation state. This function may revert to prevent the operation from being executed."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"tokensReceived(address,address,address,uint256,bytes,bytes)":"0023de29"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC777TokensRecipient standard as defined in the EIP. Accounts can be notified of {IERC777} tokens being sent to them by having a contract implement this interface (contract holders can be their own implementer) and registering it on the https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry]. See {IERC1820Registry} and {ERC1820Implementer}.\",\"kind\":\"dev\",\"methods\":{\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"details\":\"Called by an {IERC777} token contract whenever tokens are being moved or created into a registered account (`to`). The type of operation is conveyed by `from` being the zero address or not. This call occurs _after_ the token contract's state is updated, so {IERC777-balanceOf}, etc., can be used to query the post-operation state. This function may revert to prevent the operation from being executed.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":\"IERC777Recipient\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0fd59f83d16f090c27a8105db0f4ad05b0f5d127f9878b82ebf0ad2bbc4e3f03\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Create2.sol":{"Create2":{"abi":[],"devdoc":{"details":"Helper to make usage of the `CREATE2` EVM opcode easier and safer. `CREATE2` can be used to compute in advance the address where a smart contract will be deployed, which allows for interesting new mechanisms known as 'counterfactual interactions'. See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more information.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205bd6a5e9c5c415e343d9d87abcf71f480a7ad787c2ced5daf1b71ccbe01217b464736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPDEST 0xD6 0xA5 0xE9 0xC5 0xC4 ISZERO 0xE3 NUMBER 0xD9 0xD8 PUSH27 0xBCF71F480A7AD787C2CED5DAF1B71CCBE01217B464736F6C634300 ADDMOD SGT STOP CALLER ","sourceMap":"426:2003:18:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;426:2003:18;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205bd6a5e9c5c415e343d9d87abcf71f480a7ad787c2ced5daf1b71ccbe01217b464736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPDEST 0xD6 0xA5 0xE9 0xC5 0xC4 ISZERO 0xE3 NUMBER 0xD9 0xD8 PUSH27 0xBCF71F480A7AD787C2CED5DAF1B71CCBE01217B464736F6C634300 ADDMOD SGT STOP CALLER ","sourceMap":"426:2003:18:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"computeAddress(bytes32,bytes32)":"infinite","computeAddress(bytes32,bytes32,address)":"infinite","deploy(uint256,bytes32,bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Helper to make usage of the `CREATE2` EVM opcode easier and safer. `CREATE2` can be used to compute in advance the address where a smart contract will be deployed, which allows for interesting new mechanisms known as 'counterfactual interactions'. See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more information.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Create2.sol\":\"Create2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0x27f9465d84949f059ed37b23c82f4a9fc16c1b8d6fbd69837a0f920875e2af83\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ff3f21f0bef962437ef3174b3d472c53e105a89aac64e89c8065684c424de4e364736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT EXTCODEHASH 0x21 CREATE 0xBE 0xF9 PUSH3 0x437EF3 OR 0x4B RETURNDATASIZE SELFBALANCE 0x2C MSTORE8 0xE1 SDIV 0xA8 SWAP11 0xAC PUSH5 0xE89C806568 0x4C TIMESTAMP 0x4D 0xE4 0xE3 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"1207:1219:19:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1207:1219:19;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ff3f21f0bef962437ef3174b3d472c53e105a89aac64e89c8065684c424de4e364736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT EXTCODEHASH 0x21 CREATE 0xBE 0xF9 PUSH3 0x437EF3 OR 0x4B RETURNDATASIZE SELFBALANCE 0x2C MSTORE8 0xE1 SDIV 0xA8 SWAP11 0xAC PUSH5 0xE89C806568 0x4C TIMESTAMP 0x4D 0xE4 0xE3 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"1207:1219:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d15d280d1f868f59a8264dc73f7ea8c51f10d78aac864b2f2ad29412d187ff5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204eb5d0260d9f76ae40a9a0fcf4f886ef63c9ce5c964be214b013a87dc80ea14e64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E 0xB5 0xD0 0x26 0xD SWAP16 PUSH23 0xAE40A9A0FCF4F886EF63C9CE5C964BE214B013A87DC80E LOG1 0x4E PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"264:5577:20:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;264:5577:20;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204eb5d0260d9f76ae40a9a0fcf4f886ef63c9ce5c964be214b013a87dc80ea14e64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E 0xB5 0xD0 0x26 0xD SWAP16 PUSH23 0xAE40A9A0FCF4F886EF63C9CE5C964BE214B013A87DC80E LOG1 0x4E PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"264:5577:20:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return recover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return recover(hash, r, vs);\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x828774372910d18e7337bc31a288d786748af4cd9da80222467e486ed1d569ab\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"EnumerableSet":{"abi":[],"devdoc":{"details":"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a99d5f9c83d75956a3dca2e4d595c9840175f4f92cfd99aa52f62308090e470c64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 SWAP14 0x5F SWAP13 DUP4 0xD7 MSIZE JUMP LOG3 0xDC LOG2 0xE4 0xD5 SWAP6 0xC9 DUP5 ADD PUSH22 0xF4F92CFD99AA52F62308090E470C64736F6C63430008 SGT STOP CALLER ","sourceMap":"745:8464:22:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;745:8464:22;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a99d5f9c83d75956a3dca2e4d595c9840175f4f92cfd99aa52f62308090e470c64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 SWAP14 0x5F SWAP13 DUP4 0xD7 MSIZE JUMP LOG3 0xDC LOG2 0xE4 0xD5 SWAP6 0xC9 DUP5 ADD PUSH22 0xF4F92CFD99AA52F62308090E470C64736F6C63430008 SGT STOP CALLER ","sourceMap":"745:8464:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_add(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_at(struct EnumerableSet.Set storage pointer,uint256)":"infinite","_contains(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_length(struct EnumerableSet.Set storage pointer)":"infinite","_remove(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","add(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","add(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","add(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.AddressSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.Bytes32Set storage pointer,uint256)":"infinite","at(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","contains(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","contains(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","contains(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","length(struct EnumerableSet.AddressSet storage pointer)":"infinite","length(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","length(struct EnumerableSet.UintSet storage pointer)":"infinite","remove(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","remove(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","remove(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Wallet.sol":{"Wallet":{"abi":[{"inputs":[{"internalType":"contract IEntryPoint","name":"anEntryPoint","type":"address"},{"internalType":"address","name":"ourWalletFactory","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IEntryPoint","name":"entryPoint","type":"address"},{"indexed":false,"internalType":"address[]","name":"owners","type":"address[]"}],"name":"WalletInitialized","type":"event"},{"inputs":[],"name":"addDeposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"name":"encodeSignatures","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"entryPoint","outputs":[{"internalType":"contract IEntryPoint","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"dest","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"func","type":"bytes"}],"name":"execute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"dests","type":"address[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes[]","name":"funcs","type":"bytes[]"}],"name":"executeBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getDeposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"initialOwners","type":"address[]"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"owners","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"tokensReceived","outputs":[],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"userOp","type":"tuple"},{"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"internalType":"uint256","name":"missingAccountFunds","type":"uint256"}],"name":"validateUserOp","outputs":[{"internalType":"uint256","name":"validationData","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"walletFactory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is upgraded."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"upgradeTo(address)":{"details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2668":{"entryPoint":null,"id":2668,"parameterSlots":2,"returnSlots":0},"abi_decode_tuple_t_contract$_IEntryPoint_$758t_address_fromMemory":{"entryPoint":101,"id":null,"parameterSlots":2,"returnSlots":2},"validator_revert_contract_IEntryPoint":{"entryPoint":76,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:595:26","statements":[{"nodeType":"YulBlock","src":"6:3:26","statements":[]},{"body":{"nodeType":"YulBlock","src":"72:86:26","statements":[{"body":{"nodeType":"YulBlock","src":"136:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"145:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"148:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"138:6:26"},"nodeType":"YulFunctionCall","src":"138:12:26"},"nodeType":"YulExpressionStatement","src":"138:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"95:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"106:5:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"121:3:26","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"126:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"117:3:26"},"nodeType":"YulFunctionCall","src":"117:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"130:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"113:3:26"},"nodeType":"YulFunctionCall","src":"113:19:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"102:3:26"},"nodeType":"YulFunctionCall","src":"102:31:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"92:2:26"},"nodeType":"YulFunctionCall","src":"92:42:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"85:6:26"},"nodeType":"YulFunctionCall","src":"85:50:26"},"nodeType":"YulIf","src":"82:70:26"}]},"name":"validator_revert_contract_IEntryPoint","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"61:5:26","type":""}],"src":"14:144:26"},{"body":{"nodeType":"YulBlock","src":"280:313:26","statements":[{"body":{"nodeType":"YulBlock","src":"326:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"335:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"338:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"328:6:26"},"nodeType":"YulFunctionCall","src":"328:12:26"},"nodeType":"YulExpressionStatement","src":"328:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"301:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"310:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"297:3:26"},"nodeType":"YulFunctionCall","src":"297:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"322:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"293:3:26"},"nodeType":"YulFunctionCall","src":"293:32:26"},"nodeType":"YulIf","src":"290:52:26"},{"nodeType":"YulVariableDeclaration","src":"351:29:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"370:9:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"364:5:26"},"nodeType":"YulFunctionCall","src":"364:16:26"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"355:5:26","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"427:5:26"}],"functionName":{"name":"validator_revert_contract_IEntryPoint","nodeType":"YulIdentifier","src":"389:37:26"},"nodeType":"YulFunctionCall","src":"389:44:26"},"nodeType":"YulExpressionStatement","src":"389:44:26"},{"nodeType":"YulAssignment","src":"442:15:26","value":{"name":"value","nodeType":"YulIdentifier","src":"452:5:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"442:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"466:40:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"491:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"502:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"487:3:26"},"nodeType":"YulFunctionCall","src":"487:18:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"481:5:26"},"nodeType":"YulFunctionCall","src":"481:25:26"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"470:7:26","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"553:7:26"}],"functionName":{"name":"validator_revert_contract_IEntryPoint","nodeType":"YulIdentifier","src":"515:37:26"},"nodeType":"YulFunctionCall","src":"515:46:26"},"nodeType":"YulExpressionStatement","src":"515:46:26"},{"nodeType":"YulAssignment","src":"570:17:26","value":{"name":"value_1","nodeType":"YulIdentifier","src":"580:7:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"570:6:26"}]}]},"name":"abi_decode_tuple_t_contract$_IEntryPoint_$758t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"238:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"249:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"261:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"269:6:26","type":""}],"src":"163:430:26"}]},"contents":"{\n    { }\n    function validator_revert_contract_IEntryPoint(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IEntryPoint_$758t_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_IEntryPoint(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_IEntryPoint(value_1)\n        value1 := value_1\n    }\n}","id":26,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60c06040523480156200001157600080fd5b506040516200260338038062002603833981016040819052620000349162000065565b6001600160a01b0391821660a05216608052620000a4565b6001600160a01b03811681146200006257600080fd5b50565b600080604083850312156200007957600080fd5b825162000086816200004c565b602084015190925062000099816200004c565b809150509250929050565b60805160a0516124ec62000117600039600081816103340152818161060e0152818161089b01528181610a8f01528181610c0901528181610cc701528181610d0e0152818161106b015261138b0152600081816103e70152818161064d01528181610ace0152610d4d01526124ec6000f3fe60806040526004361061012c5760003560e01c80634f1ef286116100a5578063bc197c8111610074578063c5c0369911610059578063c5c03699146103d5578063d087d28814610409578063f23a6e611461041e57600080fd5b8063bc197c8114610378578063c399ec88146103c057600080fd5b80634f1ef286146102f2578063a224cee714610305578063b0d691fe14610325578063b61d27f61461035857600080fd5b80631d06d40d116100fc5780633a871cdd116100e15780633a871cdd1461029c57806347e1da2a146102ca5780634a58db19146102ea57600080fd5b80631d06d40d1461024f5780633659cfe61461027c57600080fd5b806223de291461013857806301ffc9a71461015f578063025e7c2714610194578063150b7a02146101d957600080fd5b3661013357005b600080fd5b34801561014457600080fd5b5061015d610153366004611b23565b5050505050505050565b005b34801561016b57600080fd5b5061017f61017a366004611bce565b610464565b60405190151581526020015b60405180910390f35b3480156101a057600080fd5b506101b46101af366004611c10565b610549565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161018b565b3480156101e557600080fd5b5061021e6101f4366004611c29565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161018b565b34801561025b57600080fd5b5061026f61026a366004611dc8565b610580565b60405161018b9190611eec565b34801561028857600080fd5b5061015d610297366004611eff565b6105a9565b3480156102a857600080fd5b506102bc6102b7366004611f1a565b6105d0565b60405190815260200161018b565b3480156102d657600080fd5b5061015d6102e5366004611fb3565b6105f6565b61015d610899565b61015d61030036600461204d565b61093f565b34801561031157600080fd5b5061015d61032036600461209b565b610958565b34801561033157600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006101b4565b34801561036457600080fd5b5061015d610373366004612133565b610a77565b34801561038457600080fd5b5061021e61039336600461218d565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b3480156103cc57600080fd5b506102bc610bc3565b3480156103e157600080fd5b506101b47f000000000000000000000000000000000000000000000000000000000000000081565b34801561041557600080fd5b506102bc610c7a565b34801561042a57600080fd5b5061021e610439366004612227565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f150b7a020000000000000000000000000000000000000000000000000000000014806104f757507fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000145b8061054357507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b6001818154811061055957600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b606081604051602001610593919061228d565b6040516020818303038152906040529050919050565b6105b281610cf6565b6105cd81604051806020016040528060008152506000610dfb565b50565b60006105da611053565b6105e484846110f4565b90506105ef82611222565b9392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148061066f57503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016145b610700576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f6f6e6c7920656e74727920706f696e74206f722077616c6c657420666163746f60448201527f72792063616e2063616c6c00000000000000000000000000000000000000000060648201526084015b60405180910390fd5b848114610769576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f77726f6e67206172726179206c656e677468730000000000000000000000000060448201526064016106f7565b8281146107d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f77726f6e672076616c756573206c656e6774687300000000000000000000000060448201526064016106f7565b60005b858110156108905761087e8787838181106107f2576107f261230d565b90506020020160208101906108079190611eff565b8686848181106108195761081961230d565b905060200201358585858181106108325761083261230d565b9050602002810190610844919061233c565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061128d92505050565b80610888816123a1565b9150506107d5565b50505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006040517fb760faf900000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff919091169063b760faf99034906024016000604051808303818588803b15801561092457600080fd5b505af1158015610938573d6000803e3d6000fd5b5050505050565b61094882610cf6565b61095482826001610dfb565b5050565b600054610100900460ff1680610971575060005460ff16155b6109fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016106f7565b600054610100900460ff16158015610a3c57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b610a458261130a565b801561095457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555050565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480610af057503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016145b610b7c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f6f6e6c7920656e74727920706f696e74206f722077616c6c657420666163746f60448201527f72792063616e2063616c6c00000000000000000000000000000000000000000060648201526084016106f7565b610bbd848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061128d92505050565b50505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a08231906024015b602060405180830381865afa158015610c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c759190612400565b905090565b6040517f35567e1a0000000000000000000000000000000000000000000000000000000081523060048201526000602482018190529073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906335567e1a90604401610c34565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480610d6f57503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016145b6105cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f6f6e6c7920656e74727920706f696e74206f722077616c6c657420666163746f60448201527f72792063616e2063616c6c00000000000000000000000000000000000000000060648201526084016106f7565b6000610e3b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b9050610e46846113fa565b600083511180610e535750815b15610e6457610e6284846114ee565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166109385780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117815560405173ffffffffffffffffffffffffffffffffffffffff83166024820152610f5a908690604401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f3659cfe6000000000000000000000000000000000000000000000000000000001790526114ee565b5080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681557f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff83811691161461104a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201527f757274686572207570677261646573000000000000000000000000000000000060648201526084016106f7565b61093885611513565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146110f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e740000000060448201526064016106f7565b565b60008061114e836040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b9050600061116061014086018661233c565b81019061116d9190611dc8565b905060005b600154811015611216576111a88282815181106111915761119161230d565b60200260200101518461156090919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff16600182815481106111d1576111d161230d565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16146112045760019350505050610543565b8061120e816123a1565b915050611172565b50600095945050505050565b80156105cd5760405160009033907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90849084818181858888f193505050503d8060008114610938576040519150601f19603f3d011682016040523d82523d6000602084013e610938565b6000808473ffffffffffffffffffffffffffffffffffffffff1684846040516112b69190612419565b60006040518083038185875af1925050503d80600081146112f3576040519150601f19603f3d011682016040523d82523d6000602084013e6112f8565b606091505b50915091508161093857805160208201fd5b6000815111611375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f206f776e657273000000000000000000000000000000000000000000000060448201526064016106f7565b8051611388906001906020840190611a12565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f8afffd56adb385a94a6b7426d4e3f51e2f9de8984c19093c2ddccf8fcfddfe8d826040516113ef9190612435565b60405180910390a250565b803b611488576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016106f7565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60606105ef83836040518060600160405280602781526020016124906027913961161c565b61151c816113fa565b60405173ffffffffffffffffffffffffffffffffffffffff8216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600081516041036115935760208201516040830151606084015160001a6115898682858561172e565b9350505050610543565b81516040036115ba57602082015160408301516115b1858383611986565b92505050610543565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106f7565b6060833b6116ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016106f7565b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516116d49190612419565b600060405180830381855af49150503d806000811461170f576040519150601f19603f3d011682016040523d82523d6000602084013e611714565b606091505b50915091506117248282866119bf565b9695505050505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156117e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106f7565b8360ff16601b14806117f557508360ff16601c145b611881576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106f7565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156118d5573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661197d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106f7565b95945050505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821660ff83901c601b016117248682878561172e565b606083156119ce5750816105ef565b8251156119de5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f79190611eec565b828054828255906000526020600020908101928215611a8c579160200282015b82811115611a8c57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190611a32565b50611a98929150611a9c565b5090565b5b80821115611a985760008155600101611a9d565b803573ffffffffffffffffffffffffffffffffffffffff81168114611ad557600080fd5b919050565b60008083601f840112611aec57600080fd5b50813567ffffffffffffffff811115611b0457600080fd5b602083019150836020828501011115611b1c57600080fd5b9250929050565b60008060008060008060008060c0898b031215611b3f57600080fd5b611b4889611ab1565b9750611b5660208a01611ab1565b9650611b6460408a01611ab1565b955060608901359450608089013567ffffffffffffffff80821115611b8857600080fd5b611b948c838d01611ada565b909650945060a08b0135915080821115611bad57600080fd5b50611bba8b828c01611ada565b999c989b5096995094979396929594505050565b600060208284031215611be057600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146105ef57600080fd5b600060208284031215611c2257600080fd5b5035919050565b600080600080600060808688031215611c4157600080fd5b611c4a86611ab1565b9450611c5860208701611ab1565b935060408601359250606086013567ffffffffffffffff811115611c7b57600080fd5b611c8788828901611ada565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611d0e57611d0e611c98565b604052919050565b600067ffffffffffffffff821115611d3057611d30611c98565b5060051b60200190565b600082601f830112611d4b57600080fd5b813567ffffffffffffffff811115611d6557611d65611c98565b611d9660207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611cc7565b818152846020838601011115611dab57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020808385031215611ddb57600080fd5b823567ffffffffffffffff80821115611df357600080fd5b818501915085601f830112611e0757600080fd5b8135611e1a611e1582611d16565b611cc7565b81815260059190911b83018401908481019088831115611e3957600080fd5b8585015b83811015611e7157803585811115611e555760008081fd5b611e638b89838a0101611d3a565b845250918601918601611e3d565b5098975050505050505050565b60005b83811015611e99578181015183820152602001611e81565b50506000910152565b60008151808452611eba816020860160208601611e7e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006105ef6020830184611ea2565b600060208284031215611f1157600080fd5b6105ef82611ab1565b600080600060608486031215611f2f57600080fd5b833567ffffffffffffffff811115611f4657600080fd5b84016101608187031215611f5957600080fd5b95602085013595506040909401359392505050565b60008083601f840112611f8057600080fd5b50813567ffffffffffffffff811115611f9857600080fd5b6020830191508360208260051b8501011115611b1c57600080fd5b60008060008060008060608789031215611fcc57600080fd5b863567ffffffffffffffff80821115611fe457600080fd5b611ff08a838b01611f6e565b9098509650602089013591508082111561200957600080fd5b6120158a838b01611f6e565b9096509450604089013591508082111561202e57600080fd5b5061203b89828a01611f6e565b979a9699509497509295939492505050565b6000806040838503121561206057600080fd5b61206983611ab1565b9150602083013567ffffffffffffffff81111561208557600080fd5b61209185828601611d3a565b9150509250929050565b600060208083850312156120ae57600080fd5b823567ffffffffffffffff8111156120c557600080fd5b8301601f810185136120d657600080fd5b80356120e4611e1582611d16565b81815260059190911b8201830190838101908783111561210357600080fd5b928401925b828410156121285761211984611ab1565b82529284019290840190612108565b979650505050505050565b6000806000806060858703121561214957600080fd5b61215285611ab1565b935060208501359250604085013567ffffffffffffffff81111561217557600080fd5b61218187828801611ada565b95989497509550505050565b60008060008060008060008060a0898b0312156121a957600080fd5b6121b289611ab1565b97506121c060208a01611ab1565b9650604089013567ffffffffffffffff808211156121dd57600080fd5b6121e98c838d01611f6e565b909850965060608b013591508082111561220257600080fd5b61220e8c838d01611f6e565b909650945060808b0135915080821115611bad57600080fd5b60008060008060008060a0878903121561224057600080fd5b61224987611ab1565b955061225760208801611ab1565b94506040870135935060608701359250608087013567ffffffffffffffff81111561228157600080fd5b61203b89828a01611ada565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612300577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526122ee858351611ea2565b945092850192908501906001016122b4565b5092979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261237157600080fd5b83018035915067ffffffffffffffff82111561238c57600080fd5b602001915036819003821315611b1c57600080fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036123f9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b60006020828403121561241257600080fd5b5051919050565b6000825161242b818460208701611e7e565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561248357835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101612451565b5090969550505050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122031f6eef3ac86d98f98d57a8938e28d1c235d7ac68ea2eb09a7f7e5e54fd1fe4364736f6c63430008130033","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2603 CODESIZE SUB DUP1 PUSH3 0x2603 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x65 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0xA0 MSTORE AND PUSH1 0x80 MSTORE PUSH3 0xA4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH3 0x86 DUP2 PUSH3 0x4C JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x99 DUP2 PUSH3 0x4C JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x24EC PUSH3 0x117 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x334 ADD MSTORE DUP2 DUP2 PUSH2 0x60E ADD MSTORE DUP2 DUP2 PUSH2 0x89B ADD MSTORE DUP2 DUP2 PUSH2 0xA8F ADD MSTORE DUP2 DUP2 PUSH2 0xC09 ADD MSTORE DUP2 DUP2 PUSH2 0xCC7 ADD MSTORE DUP2 DUP2 PUSH2 0xD0E ADD MSTORE DUP2 DUP2 PUSH2 0x106B ADD MSTORE PUSH2 0x138B ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x3E7 ADD MSTORE DUP2 DUP2 PUSH2 0x64D ADD MSTORE DUP2 DUP2 PUSH2 0xACE ADD MSTORE PUSH2 0xD4D ADD MSTORE PUSH2 0x24EC PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4F1EF286 GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0xBC197C81 GT PUSH2 0x74 JUMPI DUP1 PUSH4 0xC5C03699 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xC5C03699 EQ PUSH2 0x3D5 JUMPI DUP1 PUSH4 0xD087D288 EQ PUSH2 0x409 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x41E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x378 JUMPI DUP1 PUSH4 0xC399EC88 EQ PUSH2 0x3C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0xA224CEE7 EQ PUSH2 0x305 JUMPI DUP1 PUSH4 0xB0D691FE EQ PUSH2 0x325 JUMPI DUP1 PUSH4 0xB61D27F6 EQ PUSH2 0x358 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1D06D40D GT PUSH2 0xFC JUMPI DUP1 PUSH4 0x3A871CDD GT PUSH2 0xE1 JUMPI DUP1 PUSH4 0x3A871CDD EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0x47E1DA2A EQ PUSH2 0x2CA JUMPI DUP1 PUSH4 0x4A58DB19 EQ PUSH2 0x2EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1D06D40D EQ PUSH2 0x24F JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x27C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x23DE29 EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0x25E7C27 EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x1D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x133 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D PUSH2 0x153 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B23 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17F PUSH2 0x17A CALLDATASIZE PUSH1 0x4 PUSH2 0x1BCE JUMP JUMPDEST PUSH2 0x464 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B4 PUSH2 0x1AF CALLDATASIZE PUSH1 0x4 PUSH2 0x1C10 JUMP JUMPDEST PUSH2 0x549 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x18B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21E PUSH2 0x1F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C29 JUMP JUMPDEST PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x18B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26F PUSH2 0x26A CALLDATASIZE PUSH1 0x4 PUSH2 0x1DC8 JUMP JUMPDEST PUSH2 0x580 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18B SWAP2 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x288 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EFF JUMP JUMPDEST PUSH2 0x5A9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x2B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F1A JUMP JUMPDEST PUSH2 0x5D0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x18B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D PUSH2 0x2E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FB3 JUMP JUMPDEST PUSH2 0x5F6 JUMP JUMPDEST PUSH2 0x15D PUSH2 0x899 JUMP JUMPDEST PUSH2 0x15D PUSH2 0x300 CALLDATASIZE PUSH1 0x4 PUSH2 0x204D JUMP JUMPDEST PUSH2 0x93F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x311 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D PUSH2 0x320 CALLDATASIZE PUSH1 0x4 PUSH2 0x209B JUMP JUMPDEST PUSH2 0x958 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x331 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x0 PUSH2 0x1B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x364 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D PUSH2 0x373 CALLDATASIZE PUSH1 0x4 PUSH2 0x2133 JUMP JUMPDEST PUSH2 0xA77 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x384 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21E PUSH2 0x393 CALLDATASIZE PUSH1 0x4 PUSH2 0x218D JUMP JUMPDEST PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0xBC3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B4 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x415 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0xC7A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21E PUSH2 0x439 CALLDATASIZE PUSH1 0x4 PUSH2 0x2227 JUMP JUMPDEST PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x4F7 JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x4E2312E000000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x543 JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x593 SWAP2 SWAP1 PUSH2 0x228D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5B2 DUP2 PUSH2 0xCF6 JUMP JUMPDEST PUSH2 0x5CD DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH1 0x0 PUSH2 0xDFB JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5DA PUSH2 0x1053 JUMP JUMPDEST PUSH2 0x5E4 DUP5 DUP5 PUSH2 0x10F4 JUMP JUMPDEST SWAP1 POP PUSH2 0x5EF DUP3 PUSH2 0x1222 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0x66F JUMPI POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ JUMPDEST PUSH2 0x700 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C7920656E74727920706F696E74206F722077616C6C657420666163746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72792063616E2063616C6C000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 DUP2 EQ PUSH2 0x769 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x77726F6E67206172726179206C656E6774687300000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6F7 JUMP JUMPDEST DUP3 DUP2 EQ PUSH2 0x7D2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x77726F6E672076616C756573206C656E67746873000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x890 JUMPI PUSH2 0x87E DUP8 DUP8 DUP4 DUP2 DUP2 LT PUSH2 0x7F2 JUMPI PUSH2 0x7F2 PUSH2 0x230D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x807 SWAP2 SWAP1 PUSH2 0x1EFF JUMP JUMPDEST DUP7 DUP7 DUP5 DUP2 DUP2 LT PUSH2 0x819 JUMPI PUSH2 0x819 PUSH2 0x230D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0x832 JUMPI PUSH2 0x832 PUSH2 0x230D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x844 SWAP2 SWAP1 PUSH2 0x233C JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x128D SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x888 DUP2 PUSH2 0x23A1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x7D5 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0xB760FAF900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0xB760FAF9 SWAP1 CALLVALUE SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x924 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x938 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x948 DUP3 PUSH2 0xCF6 JUMP JUMPDEST PUSH2 0x954 DUP3 DUP3 PUSH1 0x1 PUSH2 0xDFB JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x971 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x9FD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xA3C JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 AND PUSH2 0x101 OR SWAP1 SSTORE JUMPDEST PUSH2 0xA45 DUP3 PUSH2 0x130A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x954 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND SWAP1 SSTORE POP POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0xAF0 JUMPI POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ JUMPDEST PUSH2 0xB7C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C7920656E74727920706F696E74206F722077616C6C657420666163746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72792063616E2063616C6C000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH2 0xBBD DUP5 DUP5 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x128D SWAP3 POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC51 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC75 SWAP2 SWAP1 PUSH2 0x2400 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x35567E1A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x24 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x35567E1A SWAP1 PUSH1 0x44 ADD PUSH2 0xC34 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0xD6F JUMPI POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ JUMPDEST PUSH2 0x5CD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C7920656E74727920706F696E74206F722077616C6C657420666163746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72792063616E2063616C6C000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE3B PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0xE46 DUP5 PUSH2 0x13FA JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT DUP1 PUSH2 0xE53 JUMPI POP DUP2 JUMPDEST ISZERO PUSH2 0xE64 JUMPI PUSH2 0xE62 DUP5 DUP5 PUSH2 0x14EE JUMP JUMPDEST POP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x938 JUMPI DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR DUP2 SSTORE PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0xF5A SWAP1 DUP7 SWAP1 PUSH1 0x44 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x3659CFE600000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x14EE JUMP JUMPDEST POP DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 SSTORE PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 AND EQ PUSH2 0x104A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A207570677261646520627265616B732066 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7572746865722075706772616465730000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH2 0x938 DUP6 PUSH2 0x1513 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x10F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6163636F756E743A206E6F742066726F6D20456E747279506F696E7400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6F7 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x114E DUP4 PUSH1 0x40 MLOAD PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3C DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x5C ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1160 PUSH2 0x140 DUP7 ADD DUP7 PUSH2 0x233C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x116D SWAP2 SWAP1 PUSH2 0x1DC8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x1 SLOAD DUP2 LT ISZERO PUSH2 0x1216 JUMPI PUSH2 0x11A8 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1191 JUMPI PUSH2 0x1191 PUSH2 0x230D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH2 0x1560 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x11D1 JUMPI PUSH2 0x11D1 PUSH2 0x230D JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1204 JUMPI PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x543 JUMP JUMPDEST DUP1 PUSH2 0x120E DUP2 PUSH2 0x23A1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1172 JUMP JUMPDEST POP PUSH1 0x0 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5CD JUMPI PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 CALLER SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP5 SWAP1 DUP5 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x938 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x938 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x12B6 SWAP2 SWAP1 PUSH2 0x2419 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x12F3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x12F8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x938 JUMPI DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x1375 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6E6F206F776E6572730000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6F7 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1388 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x1A12 JUMP JUMPDEST POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8AFFFD56ADB385A94A6B7426D4E3F51E2F9DE8984C19093C2DDCCF8FCFDDFE8D DUP3 PUSH1 0x40 MLOAD PUSH2 0x13EF SWAP2 SWAP1 PUSH2 0x2435 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST DUP1 EXTCODESIZE PUSH2 0x1488 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5EF DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2490 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x161C JUMP JUMPDEST PUSH2 0x151C DUP2 PUSH2 0x13FA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x41 SUB PUSH2 0x1593 JUMPI PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0x1589 DUP7 DUP3 DUP6 DUP6 PUSH2 0x172E JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x543 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 SUB PUSH2 0x15BA JUMPI PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x15B1 DUP6 DUP4 DUP4 PUSH2 0x1986 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x543 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x60 DUP4 EXTCODESIZE PUSH2 0x16AC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E74726163740000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x16D4 SWAP2 SWAP1 PUSH2 0x2419 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x170F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1714 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1724 DUP3 DUP3 DUP7 PUSH2 0x19BF JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP3 GT ISZERO PUSH2 0x17E0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST DUP4 PUSH1 0xFF AND PUSH1 0x1B EQ DUP1 PUSH2 0x17F5 JUMPI POP DUP4 PUSH1 0xFF AND PUSH1 0x1C EQ JUMPDEST PUSH2 0x1881 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202776272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP9 SWAP1 MSTORE PUSH1 0xFF DUP8 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18D5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD SWAP2 POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x197D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6F7 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0xFF DUP4 SWAP1 SHR PUSH1 0x1B ADD PUSH2 0x1724 DUP7 DUP3 DUP8 DUP6 PUSH2 0x172E JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x19CE JUMPI POP DUP2 PUSH2 0x5EF JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x19DE JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6F7 SWAP2 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x1A8C JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1A8C JUMPI DUP3 MLOAD DUP3 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1A32 JUMP JUMPDEST POP PUSH2 0x1A98 SWAP3 SWAP2 POP PUSH2 0x1A9C JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1A98 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1A9D JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1AD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1AEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1B1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x1B3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B48 DUP10 PUSH2 0x1AB1 JUMP JUMPDEST SWAP8 POP PUSH2 0x1B56 PUSH1 0x20 DUP11 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP7 POP PUSH2 0x1B64 PUSH1 0x40 DUP11 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1B88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B94 DUP13 DUP4 DUP14 ADD PUSH2 0x1ADA JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0xA0 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1BAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BBA DUP12 DUP3 DUP13 ADD PUSH2 0x1ADA JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x5EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1C41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C4A DUP7 PUSH2 0x1AB1 JUMP JUMPDEST SWAP5 POP PUSH2 0x1C58 PUSH1 0x20 DUP8 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C87 DUP9 DUP3 DUP10 ADD PUSH2 0x1ADA JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1D0E JUMPI PUSH2 0x1D0E PUSH2 0x1C98 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1D30 JUMPI PUSH2 0x1D30 PUSH2 0x1C98 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D65 JUMPI PUSH2 0x1D65 PUSH2 0x1C98 JUMP JUMPDEST PUSH2 0x1D96 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x1CC7 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1DAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1DDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1DF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1E1A PUSH2 0x1E15 DUP3 PUSH2 0x1D16 JUMP JUMPDEST PUSH2 0x1CC7 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP9 DUP4 GT ISZERO PUSH2 0x1E39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 ADD JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1E71 JUMPI DUP1 CALLDATALOAD DUP6 DUP2 GT ISZERO PUSH2 0x1E55 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1E63 DUP12 DUP10 DUP4 DUP11 ADD ADD PUSH2 0x1D3A JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x1E3D JUMP JUMPDEST POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1E99 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1E81 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1EBA DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1E7E JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x5EF PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1EA2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5EF DUP3 PUSH2 0x1AB1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1F2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 ADD PUSH2 0x160 DUP2 DUP8 SUB SLT ISZERO PUSH2 0x1F59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 SWAP1 SWAP5 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1F80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1B1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1FCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1FE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FF0 DUP11 DUP4 DUP12 ADD PUSH2 0x1F6E JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2009 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2015 DUP11 DUP4 DUP12 ADD PUSH2 0x1F6E JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x202E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x203B DUP10 DUP3 DUP11 ADD PUSH2 0x1F6E JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2060 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2069 DUP4 PUSH2 0x1AB1 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2085 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2091 DUP6 DUP3 DUP7 ADD PUSH2 0x1D3A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x20AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x20C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x20D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x20E4 PUSH2 0x1E15 DUP3 PUSH2 0x1D16 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD DUP4 ADD SWAP1 DUP4 DUP2 ADD SWAP1 DUP8 DUP4 GT ISZERO PUSH2 0x2103 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 DUP5 ADD SWAP3 JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0x2128 JUMPI PUSH2 0x2119 DUP5 PUSH2 0x1AB1 JUMP JUMPDEST DUP3 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH2 0x2108 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2149 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2152 DUP6 PUSH2 0x1AB1 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2175 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2181 DUP8 DUP3 DUP9 ADD PUSH2 0x1ADA JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x21A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x21B2 DUP10 PUSH2 0x1AB1 JUMP JUMPDEST SWAP8 POP PUSH2 0x21C0 PUSH1 0x20 DUP11 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x21DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x21E9 DUP13 DUP4 DUP14 ADD PUSH2 0x1F6E JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x220E DUP13 DUP4 DUP14 ADD PUSH2 0x1F6E JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1BAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x2240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2249 DUP8 PUSH2 0x1AB1 JUMP JUMPDEST SWAP6 POP PUSH2 0x2257 PUSH1 0x20 DUP9 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x203B DUP10 DUP3 DUP11 ADD PUSH2 0x1ADA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2300 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x22EE DUP6 DUP4 MLOAD PUSH2 0x1EA2 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x22B4 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x238C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x1B1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x23F9 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2412 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x242B DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1E7E JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2483 JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2451 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x7066735822122031F6EE RETURN 0xAC DUP7 0xD9 DUP16 SWAP9 0xD5 PUSH27 0x8938E28D1C235D7AC68EA2EB09A7F7E5E54FD1FE4364736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"518:3116:23:-:0;;;1088:149;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1162:26:23;;;;;1198:32;;;518:3116;;14:144:26;-1:-1:-1;;;;;102:31:26;;92:42;;82:70;;148:1;145;138:12;82:70;14:144;:::o;163:430::-;261:6;269;322:2;310:9;301:7;297:23;293:32;290:52;;;338:1;335;328:12;290:52;370:9;364:16;389:44;427:5;389:44;:::i;:::-;502:2;487:18;;481:25;452:5;;-1:-1:-1;515:46:26;481:25;515:46;:::i;:::-;580:7;570:17;;;163:430;;;;;:::o;:::-;518:3116:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_2937":{"entryPoint":null,"id":2937,"parameterSlots":0,"returnSlots":0},"@_authorizeUpgrade_2933":{"entryPoint":3318,"id":2933,"parameterSlots":1,"returnSlots":0},"@_call_2869":{"entryPoint":4749,"id":2869,"parameterSlots":3,"returnSlots":0},"@_getImplementation_1163":{"entryPoint":null,"id":1163,"parameterSlots":0,"returnSlots":1},"@_initialize_2843":{"entryPoint":4874,"id":2843,"parameterSlots":1,"returnSlots":0},"@_payPrefund_264":{"entryPoint":4642,"id":264,"parameterSlots":1,"returnSlots":0},"@_requireFromEntryPoint_213":{"entryPoint":4179,"id":213,"parameterSlots":0,"returnSlots":0},"@_setImplementation_1187":{"entryPoint":5114,"id":1187,"parameterSlots":1,"returnSlots":0},"@_upgradeToAndCallSecure_1317":{"entryPoint":3579,"id":1317,"parameterSlots":3,"returnSlots":0},"@_upgradeTo_1202":{"entryPoint":5395,"id":1202,"parameterSlots":1,"returnSlots":0},"@_validateNonce_231":{"entryPoint":null,"id":231,"parameterSlots":1,"returnSlots":0},"@_validateSignature_2819":{"entryPoint":4340,"id":2819,"parameterSlots":2,"returnSlots":1},"@_verifyCallResult_3397":{"entryPoint":6591,"id":3397,"parameterSlots":3,"returnSlots":1},"@addDeposit_2924":{"entryPoint":2201,"id":2924,"parameterSlots":0,"returnSlots":0},"@encodeSignatures_2883":{"entryPoint":1408,"id":2883,"parameterSlots":1,"returnSlots":1},"@entryPoint_2893":{"entryPoint":null,"id":2893,"parameterSlots":0,"returnSlots":1},"@executeBatch_2757":{"entryPoint":1526,"id":2757,"parameterSlots":6,"returnSlots":0},"@execute_2699":{"entryPoint":2679,"id":2699,"parameterSlots":4,"returnSlots":0},"@functionDelegateCall_3332":{"entryPoint":5358,"id":3332,"parameterSlots":2,"returnSlots":1},"@functionDelegateCall_3367":{"entryPoint":5660,"id":3367,"parameterSlots":3,"returnSlots":1},"@getAddressSlot_1857":{"entryPoint":null,"id":1857,"parameterSlots":1,"returnSlots":1},"@getBooleanSlot_1868":{"entryPoint":null,"id":1868,"parameterSlots":1,"returnSlots":1},"@getDeposit_2908":{"entryPoint":3011,"id":2908,"parameterSlots":0,"returnSlots":1},"@getNonce_155":{"entryPoint":3194,"id":155,"parameterSlots":0,"returnSlots":1},"@initialize_2681":{"entryPoint":2392,"id":2681,"parameterSlots":1,"returnSlots":0},"@isContract_3122":{"entryPoint":null,"id":3122,"parameterSlots":1,"returnSlots":1},"@onERC1155BatchReceived_92":{"entryPoint":null,"id":92,"parameterSlots":8,"returnSlots":1},"@onERC1155Received_69":{"entryPoint":null,"id":69,"parameterSlots":6,"returnSlots":1},"@onERC721Received_48":{"entryPoint":null,"id":48,"parameterSlots":5,"returnSlots":1},"@owners_2623":{"entryPoint":1353,"id":2623,"parameterSlots":0,"returnSlots":0},"@recover_1952":{"entryPoint":5472,"id":1952,"parameterSlots":2,"returnSlots":1},"@recover_1979":{"entryPoint":6534,"id":1979,"parameterSlots":3,"returnSlots":1},"@recover_2036":{"entryPoint":5934,"id":2036,"parameterSlots":4,"returnSlots":1},"@supportsInterface_122":{"entryPoint":1124,"id":122,"parameterSlots":1,"returnSlots":1},"@toEthSignedMessageHash_2053":{"entryPoint":null,"id":2053,"parameterSlots":1,"returnSlots":1},"@tokensReceived_29":{"entryPoint":null,"id":29,"parameterSlots":8,"returnSlots":0},"@upgradeToAndCall_1634":{"entryPoint":2367,"id":1634,"parameterSlots":2,"returnSlots":0},"@upgradeTo_1615":{"entryPoint":1449,"id":1615,"parameterSlots":1,"returnSlots":0},"@validateUserOp_196":{"entryPoint":1488,"id":196,"parameterSlots":3,"returnSlots":1},"@walletFactory_2617":{"entryPoint":null,"id":2617,"parameterSlots":0,"returnSlots":0},"abi_decode_address":{"entryPoint":6833,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_address_dyn_calldata":{"entryPoint":8046,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bytes":{"entryPoint":7482,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes_calldata":{"entryPoint":6874,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":7935,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_addresst_uint256t_bytes_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":6947,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":8589,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":7209,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr":{"entryPoint":8743,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_addresst_bytes_memory_ptr":{"entryPoint":8269,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":8499,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr":{"entryPoint":8115,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":8347,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr":{"entryPoint":7624,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":7118,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_struct$_UserOperation_$909_calldata_ptrt_bytes32t_uint256":{"entryPoint":7962,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint256":{"entryPoint":7184,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":9216,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes":{"entryPoint":7842,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":9241,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73_t_bytes32__to_t_string_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_rational_0_by_1__to_t_address_t_uint192__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":9269,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":8845,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":7916,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IEntryPoint_$758__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_046f63b53432b31c38dcec6b5f05e3d65602d684f9163a89310aaaf94e08558e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_200ffcddc5999f8f8cc5e29beb35e90fc602bae6d6023fa77e27cdc95bdcc448__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2425ea74e68e4bcd365d89824a06e1475543dcbb6a12bf699e5abf6b11b9b6ed__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24902e8dc56a5c691f0b6047c774684c122d74c2b2b5241f387104478768b569__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_788f6686002b78bf87a5d2bb43a41d3facc8f0725c661cc11a8fea8d1d606572__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f684c2c0c9ec797849b62669189fe025e9077c00ba7812987ce38c0071ad7a50__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"access_calldata_tail_t_bytes_calldata_ptr":{"entryPoint":9020,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_memory":{"entryPoint":7367,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_bytes_dyn":{"entryPoint":7446,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":7806,"id":null,"parameterSlots":3,"returnSlots":0},"increment_t_uint256":{"entryPoint":9121,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x32":{"entryPoint":8973,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":7320,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:22785:26","statements":[{"nodeType":"YulBlock","src":"6:3:26","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:147:26","statements":[{"nodeType":"YulAssignment","src":"73:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:26"},"nodeType":"YulFunctionCall","src":"82:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:26"}]},{"body":{"nodeType":"YulBlock","src":"188:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"197:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"200:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"190:6:26"},"nodeType":"YulFunctionCall","src":"190:12:26"},"nodeType":"YulExpressionStatement","src":"190:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"142:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:26"},"nodeType":"YulFunctionCall","src":"131:54:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:26"},"nodeType":"YulFunctionCall","src":"121:65:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:26"},"nodeType":"YulFunctionCall","src":"114:73:26"},"nodeType":"YulIf","src":"111:93:26"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:26","type":""}],"src":"14:196:26"},{"body":{"nodeType":"YulBlock","src":"287:275:26","statements":[{"body":{"nodeType":"YulBlock","src":"336:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"345:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"348:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"338:6:26"},"nodeType":"YulFunctionCall","src":"338:12:26"},"nodeType":"YulExpressionStatement","src":"338:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"315:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"323:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"311:3:26"},"nodeType":"YulFunctionCall","src":"311:17:26"},{"name":"end","nodeType":"YulIdentifier","src":"330:3:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"307:3:26"},"nodeType":"YulFunctionCall","src":"307:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"300:6:26"},"nodeType":"YulFunctionCall","src":"300:35:26"},"nodeType":"YulIf","src":"297:55:26"},{"nodeType":"YulAssignment","src":"361:30:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"384:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"371:12:26"},"nodeType":"YulFunctionCall","src":"371:20:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"361:6:26"}]},{"body":{"nodeType":"YulBlock","src":"434:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"443:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"446:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"436:6:26"},"nodeType":"YulFunctionCall","src":"436:12:26"},"nodeType":"YulExpressionStatement","src":"436:12:26"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"406:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"414:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"403:2:26"},"nodeType":"YulFunctionCall","src":"403:30:26"},"nodeType":"YulIf","src":"400:50:26"},{"nodeType":"YulAssignment","src":"459:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"475:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"483:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"471:3:26"},"nodeType":"YulFunctionCall","src":"471:17:26"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"459:8:26"}]},{"body":{"nodeType":"YulBlock","src":"540:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"549:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"552:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"542:6:26"},"nodeType":"YulFunctionCall","src":"542:12:26"},"nodeType":"YulExpressionStatement","src":"542:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"511:6:26"},{"name":"length","nodeType":"YulIdentifier","src":"519:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"507:3:26"},"nodeType":"YulFunctionCall","src":"507:19:26"},{"kind":"number","nodeType":"YulLiteral","src":"528:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"503:3:26"},"nodeType":"YulFunctionCall","src":"503:30:26"},{"name":"end","nodeType":"YulIdentifier","src":"535:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"500:2:26"},"nodeType":"YulFunctionCall","src":"500:39:26"},"nodeType":"YulIf","src":"497:59:26"}]},"name":"abi_decode_bytes_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"250:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"258:3:26","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"266:8:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"276:6:26","type":""}],"src":"215:347:26"},{"body":{"nodeType":"YulBlock","src":"760:817:26","statements":[{"body":{"nodeType":"YulBlock","src":"807:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"816:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"819:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"809:6:26"},"nodeType":"YulFunctionCall","src":"809:12:26"},"nodeType":"YulExpressionStatement","src":"809:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"781:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"790:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"777:3:26"},"nodeType":"YulFunctionCall","src":"777:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"802:3:26","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"773:3:26"},"nodeType":"YulFunctionCall","src":"773:33:26"},"nodeType":"YulIf","src":"770:53:26"},{"nodeType":"YulAssignment","src":"832:39:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"861:9:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"842:18:26"},"nodeType":"YulFunctionCall","src":"842:29:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"832:6:26"}]},{"nodeType":"YulAssignment","src":"880:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"913:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"924:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"909:3:26"},"nodeType":"YulFunctionCall","src":"909:18:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"890:18:26"},"nodeType":"YulFunctionCall","src":"890:38:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"880:6:26"}]},{"nodeType":"YulAssignment","src":"937:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"970:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"981:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"966:3:26"},"nodeType":"YulFunctionCall","src":"966:18:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"947:18:26"},"nodeType":"YulFunctionCall","src":"947:38:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"937:6:26"}]},{"nodeType":"YulAssignment","src":"994:42:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1021:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1032:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1017:3:26"},"nodeType":"YulFunctionCall","src":"1017:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1004:12:26"},"nodeType":"YulFunctionCall","src":"1004:32:26"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"994:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"1045:47:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1076:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1087:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1072:3:26"},"nodeType":"YulFunctionCall","src":"1072:19:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1059:12:26"},"nodeType":"YulFunctionCall","src":"1059:33:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1049:6:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1101:28:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1111:18:26","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1105:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1156:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1165:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1168:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1158:6:26"},"nodeType":"YulFunctionCall","src":"1158:12:26"},"nodeType":"YulExpressionStatement","src":"1158:12:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1144:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"1152:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1141:2:26"},"nodeType":"YulFunctionCall","src":"1141:14:26"},"nodeType":"YulIf","src":"1138:34:26"},{"nodeType":"YulVariableDeclaration","src":"1181:84:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1237:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"1248:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1233:3:26"},"nodeType":"YulFunctionCall","src":"1233:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1257:7:26"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"1207:25:26"},"nodeType":"YulFunctionCall","src":"1207:58:26"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"1185:8:26","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"1195:8:26","type":""}]},{"nodeType":"YulAssignment","src":"1274:18:26","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"1284:8:26"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1274:6:26"}]},{"nodeType":"YulAssignment","src":"1301:18:26","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"1311:8:26"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"1301:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"1328:49:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1361:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1372:3:26","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1357:3:26"},"nodeType":"YulFunctionCall","src":"1357:19:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1344:12:26"},"nodeType":"YulFunctionCall","src":"1344:33:26"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1332:8:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1406:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1415:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1418:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1408:6:26"},"nodeType":"YulFunctionCall","src":"1408:12:26"},"nodeType":"YulExpressionStatement","src":"1408:12:26"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1392:8:26"},{"name":"_1","nodeType":"YulIdentifier","src":"1402:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1389:2:26"},"nodeType":"YulFunctionCall","src":"1389:16:26"},"nodeType":"YulIf","src":"1386:36:26"},{"nodeType":"YulVariableDeclaration","src":"1431:86:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1487:9:26"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1498:8:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1483:3:26"},"nodeType":"YulFunctionCall","src":"1483:24:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1509:7:26"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"1457:25:26"},"nodeType":"YulFunctionCall","src":"1457:60:26"},"variables":[{"name":"value6_1","nodeType":"YulTypedName","src":"1435:8:26","type":""},{"name":"value7_1","nodeType":"YulTypedName","src":"1445:8:26","type":""}]},{"nodeType":"YulAssignment","src":"1526:18:26","value":{"name":"value6_1","nodeType":"YulIdentifier","src":"1536:8:26"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"1526:6:26"}]},{"nodeType":"YulAssignment","src":"1553:18:26","value":{"name":"value7_1","nodeType":"YulIdentifier","src":"1563:8:26"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"1553:6:26"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_addresst_uint256t_bytes_calldata_ptrt_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"670:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"681:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"693:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"701:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"709:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"717:6:26","type":""},{"name":"value4","nodeType":"YulTypedName","src":"725:6:26","type":""},{"name":"value5","nodeType":"YulTypedName","src":"733:6:26","type":""},{"name":"value6","nodeType":"YulTypedName","src":"741:6:26","type":""},{"name":"value7","nodeType":"YulTypedName","src":"749:6:26","type":""}],"src":"567:1010:26"},{"body":{"nodeType":"YulBlock","src":"1651:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"1697:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1706:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1709:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1699:6:26"},"nodeType":"YulFunctionCall","src":"1699:12:26"},"nodeType":"YulExpressionStatement","src":"1699:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1672:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"1681:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1668:3:26"},"nodeType":"YulFunctionCall","src":"1668:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"1693:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1664:3:26"},"nodeType":"YulFunctionCall","src":"1664:32:26"},"nodeType":"YulIf","src":"1661:52:26"},{"nodeType":"YulVariableDeclaration","src":"1722:36:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1748:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1735:12:26"},"nodeType":"YulFunctionCall","src":"1735:23:26"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1726:5:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1868:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1877:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1880:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1870:6:26"},"nodeType":"YulFunctionCall","src":"1870:12:26"},"nodeType":"YulExpressionStatement","src":"1870:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1780:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1791:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"1798:66:26","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1787:3:26"},"nodeType":"YulFunctionCall","src":"1787:78:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1777:2:26"},"nodeType":"YulFunctionCall","src":"1777:89:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1770:6:26"},"nodeType":"YulFunctionCall","src":"1770:97:26"},"nodeType":"YulIf","src":"1767:117:26"},{"nodeType":"YulAssignment","src":"1893:15:26","value":{"name":"value","nodeType":"YulIdentifier","src":"1903:5:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1893:6:26"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1617:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1628:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1640:6:26","type":""}],"src":"1582:332:26"},{"body":{"nodeType":"YulBlock","src":"2014:92:26","statements":[{"nodeType":"YulAssignment","src":"2024:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2036:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2047:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2032:3:26"},"nodeType":"YulFunctionCall","src":"2032:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2024:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2066:9:26"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2091:6:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2084:6:26"},"nodeType":"YulFunctionCall","src":"2084:14:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2077:6:26"},"nodeType":"YulFunctionCall","src":"2077:22:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2059:6:26"},"nodeType":"YulFunctionCall","src":"2059:41:26"},"nodeType":"YulExpressionStatement","src":"2059:41:26"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1983:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1994:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2005:4:26","type":""}],"src":"1919:187:26"},{"body":{"nodeType":"YulBlock","src":"2181:110:26","statements":[{"body":{"nodeType":"YulBlock","src":"2227:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2236:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2239:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2229:6:26"},"nodeType":"YulFunctionCall","src":"2229:12:26"},"nodeType":"YulExpressionStatement","src":"2229:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2202:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"2211:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2198:3:26"},"nodeType":"YulFunctionCall","src":"2198:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"2223:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2194:3:26"},"nodeType":"YulFunctionCall","src":"2194:32:26"},"nodeType":"YulIf","src":"2191:52:26"},{"nodeType":"YulAssignment","src":"2252:33:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2275:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2262:12:26"},"nodeType":"YulFunctionCall","src":"2262:23:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2252:6:26"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2147:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2158:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2170:6:26","type":""}],"src":"2111:180:26"},{"body":{"nodeType":"YulBlock","src":"2397:125:26","statements":[{"nodeType":"YulAssignment","src":"2407:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2419:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2430:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2415:3:26"},"nodeType":"YulFunctionCall","src":"2415:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2407:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2449:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2464:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2472:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2460:3:26"},"nodeType":"YulFunctionCall","src":"2460:55:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2442:6:26"},"nodeType":"YulFunctionCall","src":"2442:74:26"},"nodeType":"YulExpressionStatement","src":"2442:74:26"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2366:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2377:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2388:4:26","type":""}],"src":"2296:226:26"},{"body":{"nodeType":"YulBlock","src":"2667:486:26","statements":[{"body":{"nodeType":"YulBlock","src":"2714:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2723:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2726:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2716:6:26"},"nodeType":"YulFunctionCall","src":"2716:12:26"},"nodeType":"YulExpressionStatement","src":"2716:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2688:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"2697:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2684:3:26"},"nodeType":"YulFunctionCall","src":"2684:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"2709:3:26","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2680:3:26"},"nodeType":"YulFunctionCall","src":"2680:33:26"},"nodeType":"YulIf","src":"2677:53:26"},{"nodeType":"YulAssignment","src":"2739:39:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2768:9:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2749:18:26"},"nodeType":"YulFunctionCall","src":"2749:29:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2739:6:26"}]},{"nodeType":"YulAssignment","src":"2787:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2820:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2831:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2816:3:26"},"nodeType":"YulFunctionCall","src":"2816:18:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2797:18:26"},"nodeType":"YulFunctionCall","src":"2797:38:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2787:6:26"}]},{"nodeType":"YulAssignment","src":"2844:42:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2871:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2882:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2867:3:26"},"nodeType":"YulFunctionCall","src":"2867:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2854:12:26"},"nodeType":"YulFunctionCall","src":"2854:32:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2844:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"2895:46:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2926:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2937:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2922:3:26"},"nodeType":"YulFunctionCall","src":"2922:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2909:12:26"},"nodeType":"YulFunctionCall","src":"2909:32:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2899:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"2984:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2993:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2996:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2986:6:26"},"nodeType":"YulFunctionCall","src":"2986:12:26"},"nodeType":"YulExpressionStatement","src":"2986:12:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2956:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2964:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2953:2:26"},"nodeType":"YulFunctionCall","src":"2953:30:26"},"nodeType":"YulIf","src":"2950:50:26"},{"nodeType":"YulVariableDeclaration","src":"3009:84:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3065:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3076:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3061:3:26"},"nodeType":"YulFunctionCall","src":"3061:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3085:7:26"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"3035:25:26"},"nodeType":"YulFunctionCall","src":"3035:58:26"},"variables":[{"name":"value3_1","nodeType":"YulTypedName","src":"3013:8:26","type":""},{"name":"value4_1","nodeType":"YulTypedName","src":"3023:8:26","type":""}]},{"nodeType":"YulAssignment","src":"3102:18:26","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"3112:8:26"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3102:6:26"}]},{"nodeType":"YulAssignment","src":"3129:18:26","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"3139:8:26"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"3129:6:26"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2601:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2612:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2624:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2632:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2640:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2648:6:26","type":""},{"name":"value4","nodeType":"YulTypedName","src":"2656:6:26","type":""}],"src":"2527:626:26"},{"body":{"nodeType":"YulBlock","src":"3257:149:26","statements":[{"nodeType":"YulAssignment","src":"3267:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3279:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3290:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3275:3:26"},"nodeType":"YulFunctionCall","src":"3275:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3267:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3309:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3324:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3332:66:26","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3320:3:26"},"nodeType":"YulFunctionCall","src":"3320:79:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3302:6:26"},"nodeType":"YulFunctionCall","src":"3302:98:26"},"nodeType":"YulExpressionStatement","src":"3302:98:26"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3226:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3237:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3248:4:26","type":""}],"src":"3158:248:26"},{"body":{"nodeType":"YulBlock","src":"3443:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3460:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3463:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3453:6:26"},"nodeType":"YulFunctionCall","src":"3453:88:26"},"nodeType":"YulExpressionStatement","src":"3453:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3557:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3560:4:26","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3550:6:26"},"nodeType":"YulFunctionCall","src":"3550:15:26"},"nodeType":"YulExpressionStatement","src":"3550:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3581:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3584:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3574:6:26"},"nodeType":"YulFunctionCall","src":"3574:15:26"},"nodeType":"YulExpressionStatement","src":"3574:15:26"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3411:184:26"},{"body":{"nodeType":"YulBlock","src":"3645:289:26","statements":[{"nodeType":"YulAssignment","src":"3655:19:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3671:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3665:5:26"},"nodeType":"YulFunctionCall","src":"3665:9:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3655:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"3683:117:26","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3705:6:26"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"3721:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"3727:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3717:3:26"},"nodeType":"YulFunctionCall","src":"3717:13:26"},{"kind":"number","nodeType":"YulLiteral","src":"3732:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3713:3:26"},"nodeType":"YulFunctionCall","src":"3713:86:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3701:3:26"},"nodeType":"YulFunctionCall","src":"3701:99:26"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"3687:10:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3875:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3877:16:26"},"nodeType":"YulFunctionCall","src":"3877:18:26"},"nodeType":"YulExpressionStatement","src":"3877:18:26"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3818:10:26"},{"kind":"number","nodeType":"YulLiteral","src":"3830:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3815:2:26"},"nodeType":"YulFunctionCall","src":"3815:34:26"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3854:10:26"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3866:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3851:2:26"},"nodeType":"YulFunctionCall","src":"3851:22:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3812:2:26"},"nodeType":"YulFunctionCall","src":"3812:62:26"},"nodeType":"YulIf","src":"3809:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3913:2:26","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3917:10:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3906:6:26"},"nodeType":"YulFunctionCall","src":"3906:22:26"},"nodeType":"YulExpressionStatement","src":"3906:22:26"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"3625:4:26","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3634:6:26","type":""}],"src":"3600:334:26"},{"body":{"nodeType":"YulBlock","src":"4006:114:26","statements":[{"body":{"nodeType":"YulBlock","src":"4050:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4052:16:26"},"nodeType":"YulFunctionCall","src":"4052:18:26"},"nodeType":"YulExpressionStatement","src":"4052:18:26"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4022:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"4030:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4019:2:26"},"nodeType":"YulFunctionCall","src":"4019:30:26"},"nodeType":"YulIf","src":"4016:56:26"},{"nodeType":"YulAssignment","src":"4081:33:26","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4097:1:26","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"4100:6:26"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4093:3:26"},"nodeType":"YulFunctionCall","src":"4093:14:26"},{"kind":"number","nodeType":"YulLiteral","src":"4109:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4089:3:26"},"nodeType":"YulFunctionCall","src":"4089:25:26"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"4081:4:26"}]}]},"name":"array_allocation_size_array_bytes_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"3986:6:26","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"3997:4:26","type":""}],"src":"3939:181:26"},{"body":{"nodeType":"YulBlock","src":"4177:537:26","statements":[{"body":{"nodeType":"YulBlock","src":"4226:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4235:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4238:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4228:6:26"},"nodeType":"YulFunctionCall","src":"4228:12:26"},"nodeType":"YulExpressionStatement","src":"4228:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4205:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"4213:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4201:3:26"},"nodeType":"YulFunctionCall","src":"4201:17:26"},{"name":"end","nodeType":"YulIdentifier","src":"4220:3:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4197:3:26"},"nodeType":"YulFunctionCall","src":"4197:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4190:6:26"},"nodeType":"YulFunctionCall","src":"4190:35:26"},"nodeType":"YulIf","src":"4187:55:26"},{"nodeType":"YulVariableDeclaration","src":"4251:30:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4274:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4261:12:26"},"nodeType":"YulFunctionCall","src":"4261:20:26"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4255:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"4320:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4322:16:26"},"nodeType":"YulFunctionCall","src":"4322:18:26"},"nodeType":"YulExpressionStatement","src":"4322:18:26"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4296:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"4300:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4293:2:26"},"nodeType":"YulFunctionCall","src":"4293:26:26"},"nodeType":"YulIf","src":"4290:52:26"},{"nodeType":"YulVariableDeclaration","src":"4351:129:26","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4394:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"4398:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4390:3:26"},"nodeType":"YulFunctionCall","src":"4390:13:26"},{"kind":"number","nodeType":"YulLiteral","src":"4405:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4386:3:26"},"nodeType":"YulFunctionCall","src":"4386:86:26"},{"kind":"number","nodeType":"YulLiteral","src":"4474:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4382:3:26"},"nodeType":"YulFunctionCall","src":"4382:97:26"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"4366:15:26"},"nodeType":"YulFunctionCall","src":"4366:114:26"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"4355:7:26","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"4496:7:26"},{"name":"_1","nodeType":"YulIdentifier","src":"4505:2:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4489:6:26"},"nodeType":"YulFunctionCall","src":"4489:19:26"},"nodeType":"YulExpressionStatement","src":"4489:19:26"},{"body":{"nodeType":"YulBlock","src":"4556:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4565:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4568:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4558:6:26"},"nodeType":"YulFunctionCall","src":"4558:12:26"},"nodeType":"YulExpressionStatement","src":"4558:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4531:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"4539:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4527:3:26"},"nodeType":"YulFunctionCall","src":"4527:15:26"},{"kind":"number","nodeType":"YulLiteral","src":"4544:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4523:3:26"},"nodeType":"YulFunctionCall","src":"4523:26:26"},{"name":"end","nodeType":"YulIdentifier","src":"4551:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4520:2:26"},"nodeType":"YulFunctionCall","src":"4520:35:26"},"nodeType":"YulIf","src":"4517:55:26"},{"expression":{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"4598:7:26"},{"kind":"number","nodeType":"YulLiteral","src":"4607:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4594:3:26"},"nodeType":"YulFunctionCall","src":"4594:18:26"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4618:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"4626:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4614:3:26"},"nodeType":"YulFunctionCall","src":"4614:17:26"},{"name":"_1","nodeType":"YulIdentifier","src":"4633:2:26"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4581:12:26"},"nodeType":"YulFunctionCall","src":"4581:55:26"},"nodeType":"YulExpressionStatement","src":"4581:55:26"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"4660:7:26"},{"name":"_1","nodeType":"YulIdentifier","src":"4669:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4656:3:26"},"nodeType":"YulFunctionCall","src":"4656:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"4674:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4652:3:26"},"nodeType":"YulFunctionCall","src":"4652:27:26"},{"kind":"number","nodeType":"YulLiteral","src":"4681:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4645:6:26"},"nodeType":"YulFunctionCall","src":"4645:38:26"},"nodeType":"YulExpressionStatement","src":"4645:38:26"},{"nodeType":"YulAssignment","src":"4692:16:26","value":{"name":"array_1","nodeType":"YulIdentifier","src":"4701:7:26"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4692:5:26"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4151:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"4159:3:26","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"4167:5:26","type":""}],"src":"4125:589:26"},{"body":{"nodeType":"YulBlock","src":"4823:1025:26","statements":[{"nodeType":"YulVariableDeclaration","src":"4833:12:26","value":{"kind":"number","nodeType":"YulLiteral","src":"4843:2:26","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4837:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"4890:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4899:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4902:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4892:6:26"},"nodeType":"YulFunctionCall","src":"4892:12:26"},"nodeType":"YulExpressionStatement","src":"4892:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4865:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"4874:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4861:3:26"},"nodeType":"YulFunctionCall","src":"4861:23:26"},{"name":"_1","nodeType":"YulIdentifier","src":"4886:2:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4857:3:26"},"nodeType":"YulFunctionCall","src":"4857:32:26"},"nodeType":"YulIf","src":"4854:52:26"},{"nodeType":"YulVariableDeclaration","src":"4915:37:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4942:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4929:12:26"},"nodeType":"YulFunctionCall","src":"4929:23:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4919:6:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4961:28:26","value":{"kind":"number","nodeType":"YulLiteral","src":"4971:18:26","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"4965:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"5016:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5025:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5028:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5018:6:26"},"nodeType":"YulFunctionCall","src":"5018:12:26"},"nodeType":"YulExpressionStatement","src":"5018:12:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5004:6:26"},{"name":"_2","nodeType":"YulIdentifier","src":"5012:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5001:2:26"},"nodeType":"YulFunctionCall","src":"5001:14:26"},"nodeType":"YulIf","src":"4998:34:26"},{"nodeType":"YulVariableDeclaration","src":"5041:32:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5055:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"5066:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5051:3:26"},"nodeType":"YulFunctionCall","src":"5051:22:26"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"5045:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"5121:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5130:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5133:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5123:6:26"},"nodeType":"YulFunctionCall","src":"5123:12:26"},"nodeType":"YulExpressionStatement","src":"5123:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"5100:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"5104:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5096:3:26"},"nodeType":"YulFunctionCall","src":"5096:13:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5111:7:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5092:3:26"},"nodeType":"YulFunctionCall","src":"5092:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5085:6:26"},"nodeType":"YulFunctionCall","src":"5085:35:26"},"nodeType":"YulIf","src":"5082:55:26"},{"nodeType":"YulVariableDeclaration","src":"5146:26:26","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"5169:2:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5156:12:26"},"nodeType":"YulFunctionCall","src":"5156:16:26"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"5150:2:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5181:69:26","value":{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"5246:2:26"}],"functionName":{"name":"array_allocation_size_array_bytes_dyn","nodeType":"YulIdentifier","src":"5208:37:26"},"nodeType":"YulFunctionCall","src":"5208:41:26"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"5192:15:26"},"nodeType":"YulFunctionCall","src":"5192:58:26"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"5185:3:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5259:16:26","value":{"name":"dst","nodeType":"YulIdentifier","src":"5272:3:26"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"5263:5:26","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5291:3:26"},{"name":"_4","nodeType":"YulIdentifier","src":"5296:2:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5284:6:26"},"nodeType":"YulFunctionCall","src":"5284:15:26"},"nodeType":"YulExpressionStatement","src":"5284:15:26"},{"nodeType":"YulAssignment","src":"5308:19:26","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5319:3:26"},{"name":"_1","nodeType":"YulIdentifier","src":"5324:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5315:3:26"},"nodeType":"YulFunctionCall","src":"5315:12:26"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5308:3:26"}]},{"nodeType":"YulVariableDeclaration","src":"5336:42:26","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"5358:2:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5366:1:26","type":"","value":"5"},{"name":"_4","nodeType":"YulIdentifier","src":"5369:2:26"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5362:3:26"},"nodeType":"YulFunctionCall","src":"5362:10:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5354:3:26"},"nodeType":"YulFunctionCall","src":"5354:19:26"},{"name":"_1","nodeType":"YulIdentifier","src":"5375:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5350:3:26"},"nodeType":"YulFunctionCall","src":"5350:28:26"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"5340:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"5410:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5419:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5422:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5412:6:26"},"nodeType":"YulFunctionCall","src":"5412:12:26"},"nodeType":"YulExpressionStatement","src":"5412:12:26"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"5393:6:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5401:7:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5390:2:26"},"nodeType":"YulFunctionCall","src":"5390:19:26"},"nodeType":"YulIf","src":"5387:39:26"},{"nodeType":"YulVariableDeclaration","src":"5435:22:26","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"5450:2:26"},{"name":"_1","nodeType":"YulIdentifier","src":"5454:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5446:3:26"},"nodeType":"YulFunctionCall","src":"5446:11:26"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"5439:3:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"5522:296:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5536:36:26","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5568:3:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5555:12:26"},"nodeType":"YulFunctionCall","src":"5555:17:26"},"variables":[{"name":"innerOffset","nodeType":"YulTypedName","src":"5540:11:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"5620:74:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5638:11:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5648:1:26","type":"","value":"0"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"5642:2:26","type":""}]},{"expression":{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"5673:2:26"},{"name":"_5","nodeType":"YulIdentifier","src":"5677:2:26"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5666:6:26"},"nodeType":"YulFunctionCall","src":"5666:14:26"},"nodeType":"YulExpressionStatement","src":"5666:14:26"}]},"condition":{"arguments":[{"name":"innerOffset","nodeType":"YulIdentifier","src":"5591:11:26"},{"name":"_2","nodeType":"YulIdentifier","src":"5604:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5588:2:26"},"nodeType":"YulFunctionCall","src":"5588:19:26"},"nodeType":"YulIf","src":"5585:109:26"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5714:3:26"},{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"5744:2:26"},{"name":"innerOffset","nodeType":"YulIdentifier","src":"5748:11:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5740:3:26"},"nodeType":"YulFunctionCall","src":"5740:20:26"},{"name":"_1","nodeType":"YulIdentifier","src":"5762:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5736:3:26"},"nodeType":"YulFunctionCall","src":"5736:29:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5767:7:26"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"5719:16:26"},"nodeType":"YulFunctionCall","src":"5719:56:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5707:6:26"},"nodeType":"YulFunctionCall","src":"5707:69:26"},"nodeType":"YulExpressionStatement","src":"5707:69:26"},{"nodeType":"YulAssignment","src":"5789:19:26","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5800:3:26"},{"name":"_1","nodeType":"YulIdentifier","src":"5805:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5796:3:26"},"nodeType":"YulFunctionCall","src":"5796:12:26"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5789:3:26"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5477:3:26"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"5482:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5474:2:26"},"nodeType":"YulFunctionCall","src":"5474:15:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5490:23:26","statements":[{"nodeType":"YulAssignment","src":"5492:19:26","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5503:3:26"},{"name":"_1","nodeType":"YulIdentifier","src":"5508:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5499:3:26"},"nodeType":"YulFunctionCall","src":"5499:12:26"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"5492:3:26"}]}]},"pre":{"nodeType":"YulBlock","src":"5470:3:26","statements":[]},"src":"5466:352:26"},{"nodeType":"YulAssignment","src":"5827:15:26","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"5837:5:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5827:6:26"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4789:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4800:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4812:6:26","type":""}],"src":"4719:1129:26"},{"body":{"nodeType":"YulBlock","src":"5919:184:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5929:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5938:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"5933:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"5998:63:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6023:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"6028:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6019:3:26"},"nodeType":"YulFunctionCall","src":"6019:11:26"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6042:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"6047:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6038:3:26"},"nodeType":"YulFunctionCall","src":"6038:11:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6032:5:26"},"nodeType":"YulFunctionCall","src":"6032:18:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6012:6:26"},"nodeType":"YulFunctionCall","src":"6012:39:26"},"nodeType":"YulExpressionStatement","src":"6012:39:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5959:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"5962:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5956:2:26"},"nodeType":"YulFunctionCall","src":"5956:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5970:19:26","statements":[{"nodeType":"YulAssignment","src":"5972:15:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5981:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"5984:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5977:3:26"},"nodeType":"YulFunctionCall","src":"5977:10:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"5972:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"5952:3:26","statements":[]},"src":"5948:113:26"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6081:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"6086:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6077:3:26"},"nodeType":"YulFunctionCall","src":"6077:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"6095:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6070:6:26"},"nodeType":"YulFunctionCall","src":"6070:27:26"},"nodeType":"YulExpressionStatement","src":"6070:27:26"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"5897:3:26","type":""},{"name":"dst","nodeType":"YulTypedName","src":"5902:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"5907:6:26","type":""}],"src":"5853:250:26"},{"body":{"nodeType":"YulBlock","src":"6157:280:26","statements":[{"nodeType":"YulVariableDeclaration","src":"6167:26:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6187:5:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6181:5:26"},"nodeType":"YulFunctionCall","src":"6181:12:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6171:6:26","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6209:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"6214:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6202:6:26"},"nodeType":"YulFunctionCall","src":"6202:19:26"},"nodeType":"YulExpressionStatement","src":"6202:19:26"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6269:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"6276:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6265:3:26"},"nodeType":"YulFunctionCall","src":"6265:16:26"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6287:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"6292:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6283:3:26"},"nodeType":"YulFunctionCall","src":"6283:14:26"},{"name":"length","nodeType":"YulIdentifier","src":"6299:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"6230:34:26"},"nodeType":"YulFunctionCall","src":"6230:76:26"},"nodeType":"YulExpressionStatement","src":"6230:76:26"},{"nodeType":"YulAssignment","src":"6315:116:26","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6330:3:26"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6343:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"6351:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6339:3:26"},"nodeType":"YulFunctionCall","src":"6339:15:26"},{"kind":"number","nodeType":"YulLiteral","src":"6356:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6335:3:26"},"nodeType":"YulFunctionCall","src":"6335:88:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6326:3:26"},"nodeType":"YulFunctionCall","src":"6326:98:26"},{"kind":"number","nodeType":"YulLiteral","src":"6426:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6322:3:26"},"nodeType":"YulFunctionCall","src":"6322:109:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6315:3:26"}]}]},"name":"abi_encode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6134:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6141:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6149:3:26","type":""}],"src":"6108:329:26"},{"body":{"nodeType":"YulBlock","src":"6561:98:26","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6578:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"6589:2:26","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6571:6:26"},"nodeType":"YulFunctionCall","src":"6571:21:26"},"nodeType":"YulExpressionStatement","src":"6571:21:26"},{"nodeType":"YulAssignment","src":"6601:52:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6626:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6638:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"6649:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6634:3:26"},"nodeType":"YulFunctionCall","src":"6634:18:26"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"6609:16:26"},"nodeType":"YulFunctionCall","src":"6609:44:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6601:4:26"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6530:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6541:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6552:4:26","type":""}],"src":"6442:217:26"},{"body":{"nodeType":"YulBlock","src":"6734:116:26","statements":[{"body":{"nodeType":"YulBlock","src":"6780:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6789:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6792:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6782:6:26"},"nodeType":"YulFunctionCall","src":"6782:12:26"},"nodeType":"YulExpressionStatement","src":"6782:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6755:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"6764:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6751:3:26"},"nodeType":"YulFunctionCall","src":"6751:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"6776:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6747:3:26"},"nodeType":"YulFunctionCall","src":"6747:32:26"},"nodeType":"YulIf","src":"6744:52:26"},{"nodeType":"YulAssignment","src":"6805:39:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6834:9:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6815:18:26"},"nodeType":"YulFunctionCall","src":"6815:29:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6805:6:26"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6700:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6711:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6723:6:26","type":""}],"src":"6664:186:26"},{"body":{"nodeType":"YulBlock","src":"6991:392:26","statements":[{"body":{"nodeType":"YulBlock","src":"7037:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7046:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7049:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7039:6:26"},"nodeType":"YulFunctionCall","src":"7039:12:26"},"nodeType":"YulExpressionStatement","src":"7039:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7012:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"7021:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7008:3:26"},"nodeType":"YulFunctionCall","src":"7008:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"7033:2:26","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7004:3:26"},"nodeType":"YulFunctionCall","src":"7004:32:26"},"nodeType":"YulIf","src":"7001:52:26"},{"nodeType":"YulVariableDeclaration","src":"7062:37:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7089:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7076:12:26"},"nodeType":"YulFunctionCall","src":"7076:23:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7066:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"7142:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7151:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7154:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7144:6:26"},"nodeType":"YulFunctionCall","src":"7144:12:26"},"nodeType":"YulExpressionStatement","src":"7144:12:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7114:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"7122:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7111:2:26"},"nodeType":"YulFunctionCall","src":"7111:30:26"},"nodeType":"YulIf","src":"7108:50:26"},{"nodeType":"YulVariableDeclaration","src":"7167:32:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7181:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"7192:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7177:3:26"},"nodeType":"YulFunctionCall","src":"7177:22:26"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7171:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"7238:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7247:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7250:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7240:6:26"},"nodeType":"YulFunctionCall","src":"7240:12:26"},"nodeType":"YulExpressionStatement","src":"7240:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7219:7:26"},{"name":"_1","nodeType":"YulIdentifier","src":"7228:2:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7215:3:26"},"nodeType":"YulFunctionCall","src":"7215:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"7233:3:26","type":"","value":"352"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7211:3:26"},"nodeType":"YulFunctionCall","src":"7211:26:26"},"nodeType":"YulIf","src":"7208:46:26"},{"nodeType":"YulAssignment","src":"7263:12:26","value":{"name":"_1","nodeType":"YulIdentifier","src":"7273:2:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7263:6:26"}]},{"nodeType":"YulAssignment","src":"7284:42:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7311:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"7322:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7307:3:26"},"nodeType":"YulFunctionCall","src":"7307:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7294:12:26"},"nodeType":"YulFunctionCall","src":"7294:32:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7284:6:26"}]},{"nodeType":"YulAssignment","src":"7335:42:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7362:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"7373:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7358:3:26"},"nodeType":"YulFunctionCall","src":"7358:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7345:12:26"},"nodeType":"YulFunctionCall","src":"7345:32:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7335:6:26"}]}]},"name":"abi_decode_tuple_t_struct$_UserOperation_$909_calldata_ptrt_bytes32t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6941:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6952:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6964:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6972:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6980:6:26","type":""}],"src":"6855:528:26"},{"body":{"nodeType":"YulBlock","src":"7489:76:26","statements":[{"nodeType":"YulAssignment","src":"7499:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7511:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"7522:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7507:3:26"},"nodeType":"YulFunctionCall","src":"7507:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7499:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7541:9:26"},{"name":"value0","nodeType":"YulIdentifier","src":"7552:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7534:6:26"},"nodeType":"YulFunctionCall","src":"7534:25:26"},"nodeType":"YulExpressionStatement","src":"7534:25:26"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7458:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7469:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7480:4:26","type":""}],"src":"7388:177:26"},{"body":{"nodeType":"YulBlock","src":"7654:283:26","statements":[{"body":{"nodeType":"YulBlock","src":"7703:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7712:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7715:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7705:6:26"},"nodeType":"YulFunctionCall","src":"7705:12:26"},"nodeType":"YulExpressionStatement","src":"7705:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7682:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"7690:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7678:3:26"},"nodeType":"YulFunctionCall","src":"7678:17:26"},{"name":"end","nodeType":"YulIdentifier","src":"7697:3:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7674:3:26"},"nodeType":"YulFunctionCall","src":"7674:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7667:6:26"},"nodeType":"YulFunctionCall","src":"7667:35:26"},"nodeType":"YulIf","src":"7664:55:26"},{"nodeType":"YulAssignment","src":"7728:30:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7751:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7738:12:26"},"nodeType":"YulFunctionCall","src":"7738:20:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"7728:6:26"}]},{"body":{"nodeType":"YulBlock","src":"7801:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7810:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7813:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7803:6:26"},"nodeType":"YulFunctionCall","src":"7803:12:26"},"nodeType":"YulExpressionStatement","src":"7803:12:26"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7773:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"7781:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7770:2:26"},"nodeType":"YulFunctionCall","src":"7770:30:26"},"nodeType":"YulIf","src":"7767:50:26"},{"nodeType":"YulAssignment","src":"7826:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7842:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"7850:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7838:3:26"},"nodeType":"YulFunctionCall","src":"7838:17:26"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"7826:8:26"}]},{"body":{"nodeType":"YulBlock","src":"7915:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7924:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7927:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7917:6:26"},"nodeType":"YulFunctionCall","src":"7917:12:26"},"nodeType":"YulExpressionStatement","src":"7917:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7878:6:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7890:1:26","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"7893:6:26"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7886:3:26"},"nodeType":"YulFunctionCall","src":"7886:14:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7874:3:26"},"nodeType":"YulFunctionCall","src":"7874:27:26"},{"kind":"number","nodeType":"YulLiteral","src":"7903:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7870:3:26"},"nodeType":"YulFunctionCall","src":"7870:38:26"},{"name":"end","nodeType":"YulIdentifier","src":"7910:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7867:2:26"},"nodeType":"YulFunctionCall","src":"7867:47:26"},"nodeType":"YulIf","src":"7864:67:26"}]},"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7617:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"7625:3:26","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"7633:8:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"7643:6:26","type":""}],"src":"7570:367:26"},{"body":{"nodeType":"YulBlock","src":"8162:879:26","statements":[{"body":{"nodeType":"YulBlock","src":"8208:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8217:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8220:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8210:6:26"},"nodeType":"YulFunctionCall","src":"8210:12:26"},"nodeType":"YulExpressionStatement","src":"8210:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8183:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"8192:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8179:3:26"},"nodeType":"YulFunctionCall","src":"8179:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"8204:2:26","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8175:3:26"},"nodeType":"YulFunctionCall","src":"8175:32:26"},"nodeType":"YulIf","src":"8172:52:26"},{"nodeType":"YulVariableDeclaration","src":"8233:37:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8260:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8247:12:26"},"nodeType":"YulFunctionCall","src":"8247:23:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8237:6:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8279:28:26","value":{"kind":"number","nodeType":"YulLiteral","src":"8289:18:26","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8283:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"8334:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8343:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8346:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8336:6:26"},"nodeType":"YulFunctionCall","src":"8336:12:26"},"nodeType":"YulExpressionStatement","src":"8336:12:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8322:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"8330:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8319:2:26"},"nodeType":"YulFunctionCall","src":"8319:14:26"},"nodeType":"YulIf","src":"8316:34:26"},{"nodeType":"YulVariableDeclaration","src":"8359:96:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8427:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"8438:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8423:3:26"},"nodeType":"YulFunctionCall","src":"8423:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8447:7:26"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"8385:37:26"},"nodeType":"YulFunctionCall","src":"8385:70:26"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"8363:8:26","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"8373:8:26","type":""}]},{"nodeType":"YulAssignment","src":"8464:18:26","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"8474:8:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8464:6:26"}]},{"nodeType":"YulAssignment","src":"8491:18:26","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"8501:8:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8491:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"8518:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8551:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"8562:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8547:3:26"},"nodeType":"YulFunctionCall","src":"8547:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8534:12:26"},"nodeType":"YulFunctionCall","src":"8534:32:26"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"8522:8:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"8595:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8604:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8607:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8597:6:26"},"nodeType":"YulFunctionCall","src":"8597:12:26"},"nodeType":"YulExpressionStatement","src":"8597:12:26"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"8581:8:26"},{"name":"_1","nodeType":"YulIdentifier","src":"8591:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8578:2:26"},"nodeType":"YulFunctionCall","src":"8578:16:26"},"nodeType":"YulIf","src":"8575:36:26"},{"nodeType":"YulVariableDeclaration","src":"8620:98:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8688:9:26"},{"name":"offset_1","nodeType":"YulIdentifier","src":"8699:8:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8684:3:26"},"nodeType":"YulFunctionCall","src":"8684:24:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8710:7:26"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"8646:37:26"},"nodeType":"YulFunctionCall","src":"8646:72:26"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"8624:8:26","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"8634:8:26","type":""}]},{"nodeType":"YulAssignment","src":"8727:18:26","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"8737:8:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8727:6:26"}]},{"nodeType":"YulAssignment","src":"8754:18:26","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"8764:8:26"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"8754:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"8781:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8814:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"8825:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8810:3:26"},"nodeType":"YulFunctionCall","src":"8810:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8797:12:26"},"nodeType":"YulFunctionCall","src":"8797:32:26"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"8785:8:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"8858:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8867:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8870:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8860:6:26"},"nodeType":"YulFunctionCall","src":"8860:12:26"},"nodeType":"YulExpressionStatement","src":"8860:12:26"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"8844:8:26"},{"name":"_1","nodeType":"YulIdentifier","src":"8854:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8841:2:26"},"nodeType":"YulFunctionCall","src":"8841:16:26"},"nodeType":"YulIf","src":"8838:36:26"},{"nodeType":"YulVariableDeclaration","src":"8883:98:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8951:9:26"},{"name":"offset_2","nodeType":"YulIdentifier","src":"8962:8:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8947:3:26"},"nodeType":"YulFunctionCall","src":"8947:24:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8973:7:26"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"8909:37:26"},"nodeType":"YulFunctionCall","src":"8909:72:26"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"8887:8:26","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"8897:8:26","type":""}]},{"nodeType":"YulAssignment","src":"8990:18:26","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"9000:8:26"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"8990:6:26"}]},{"nodeType":"YulAssignment","src":"9017:18:26","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"9027:8:26"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"9017:6:26"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8088:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8099:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8111:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8119:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8127:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8135:6:26","type":""},{"name":"value4","nodeType":"YulTypedName","src":"8143:6:26","type":""},{"name":"value5","nodeType":"YulTypedName","src":"8151:6:26","type":""}],"src":"7942:1099:26"},{"body":{"nodeType":"YulBlock","src":"9142:298:26","statements":[{"body":{"nodeType":"YulBlock","src":"9188:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9197:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9200:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9190:6:26"},"nodeType":"YulFunctionCall","src":"9190:12:26"},"nodeType":"YulExpressionStatement","src":"9190:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9163:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"9172:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9159:3:26"},"nodeType":"YulFunctionCall","src":"9159:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"9184:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9155:3:26"},"nodeType":"YulFunctionCall","src":"9155:32:26"},"nodeType":"YulIf","src":"9152:52:26"},{"nodeType":"YulAssignment","src":"9213:39:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9242:9:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"9223:18:26"},"nodeType":"YulFunctionCall","src":"9223:29:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9213:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"9261:46:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9292:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"9303:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9288:3:26"},"nodeType":"YulFunctionCall","src":"9288:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9275:12:26"},"nodeType":"YulFunctionCall","src":"9275:32:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9265:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"9350:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9359:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9362:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9352:6:26"},"nodeType":"YulFunctionCall","src":"9352:12:26"},"nodeType":"YulExpressionStatement","src":"9352:12:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9322:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"9330:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9319:2:26"},"nodeType":"YulFunctionCall","src":"9319:30:26"},"nodeType":"YulIf","src":"9316:50:26"},{"nodeType":"YulAssignment","src":"9375:59:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9406:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"9417:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9402:3:26"},"nodeType":"YulFunctionCall","src":"9402:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9426:7:26"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"9385:16:26"},"nodeType":"YulFunctionCall","src":"9385:49:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9375:6:26"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9100:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9111:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9123:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9131:6:26","type":""}],"src":"9046:394:26"},{"body":{"nodeType":"YulBlock","src":"9540:800:26","statements":[{"nodeType":"YulVariableDeclaration","src":"9550:12:26","value":{"kind":"number","nodeType":"YulLiteral","src":"9560:2:26","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9554:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"9607:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9616:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9619:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9609:6:26"},"nodeType":"YulFunctionCall","src":"9609:12:26"},"nodeType":"YulExpressionStatement","src":"9609:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9582:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"9591:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9578:3:26"},"nodeType":"YulFunctionCall","src":"9578:23:26"},{"name":"_1","nodeType":"YulIdentifier","src":"9603:2:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9574:3:26"},"nodeType":"YulFunctionCall","src":"9574:32:26"},"nodeType":"YulIf","src":"9571:52:26"},{"nodeType":"YulVariableDeclaration","src":"9632:37:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9659:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9646:12:26"},"nodeType":"YulFunctionCall","src":"9646:23:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9636:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"9712:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9721:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9724:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9714:6:26"},"nodeType":"YulFunctionCall","src":"9714:12:26"},"nodeType":"YulExpressionStatement","src":"9714:12:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9684:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"9692:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9681:2:26"},"nodeType":"YulFunctionCall","src":"9681:30:26"},"nodeType":"YulIf","src":"9678:50:26"},{"nodeType":"YulVariableDeclaration","src":"9737:32:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9751:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"9762:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9747:3:26"},"nodeType":"YulFunctionCall","src":"9747:22:26"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"9741:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"9817:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9826:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9829:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9819:6:26"},"nodeType":"YulFunctionCall","src":"9819:12:26"},"nodeType":"YulExpressionStatement","src":"9819:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"9796:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"9800:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9792:3:26"},"nodeType":"YulFunctionCall","src":"9792:13:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9807:7:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9788:3:26"},"nodeType":"YulFunctionCall","src":"9788:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9781:6:26"},"nodeType":"YulFunctionCall","src":"9781:35:26"},"nodeType":"YulIf","src":"9778:55:26"},{"nodeType":"YulVariableDeclaration","src":"9842:26:26","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"9865:2:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9852:12:26"},"nodeType":"YulFunctionCall","src":"9852:16:26"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"9846:2:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9877:69:26","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"9942:2:26"}],"functionName":{"name":"array_allocation_size_array_bytes_dyn","nodeType":"YulIdentifier","src":"9904:37:26"},"nodeType":"YulFunctionCall","src":"9904:41:26"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"9888:15:26"},"nodeType":"YulFunctionCall","src":"9888:58:26"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"9881:3:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9955:16:26","value":{"name":"dst","nodeType":"YulIdentifier","src":"9968:3:26"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"9959:5:26","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9987:3:26"},{"name":"_3","nodeType":"YulIdentifier","src":"9992:2:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9980:6:26"},"nodeType":"YulFunctionCall","src":"9980:15:26"},"nodeType":"YulExpressionStatement","src":"9980:15:26"},{"nodeType":"YulAssignment","src":"10004:19:26","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10015:3:26"},{"name":"_1","nodeType":"YulIdentifier","src":"10020:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10011:3:26"},"nodeType":"YulFunctionCall","src":"10011:12:26"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"10004:3:26"}]},{"nodeType":"YulVariableDeclaration","src":"10032:42:26","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"10054:2:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10062:1:26","type":"","value":"5"},{"name":"_3","nodeType":"YulIdentifier","src":"10065:2:26"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10058:3:26"},"nodeType":"YulFunctionCall","src":"10058:10:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10050:3:26"},"nodeType":"YulFunctionCall","src":"10050:19:26"},{"name":"_1","nodeType":"YulIdentifier","src":"10071:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10046:3:26"},"nodeType":"YulFunctionCall","src":"10046:28:26"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"10036:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"10106:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10115:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10118:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10108:6:26"},"nodeType":"YulFunctionCall","src":"10108:12:26"},"nodeType":"YulExpressionStatement","src":"10108:12:26"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"10089:6:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10097:7:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10086:2:26"},"nodeType":"YulFunctionCall","src":"10086:19:26"},"nodeType":"YulIf","src":"10083:39:26"},{"nodeType":"YulVariableDeclaration","src":"10131:22:26","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"10146:2:26"},{"name":"_1","nodeType":"YulIdentifier","src":"10150:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10142:3:26"},"nodeType":"YulFunctionCall","src":"10142:11:26"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"10135:3:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"10218:92:26","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10239:3:26"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10263:3:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"10244:18:26"},"nodeType":"YulFunctionCall","src":"10244:23:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10232:6:26"},"nodeType":"YulFunctionCall","src":"10232:36:26"},"nodeType":"YulExpressionStatement","src":"10232:36:26"},{"nodeType":"YulAssignment","src":"10281:19:26","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10292:3:26"},{"name":"_1","nodeType":"YulIdentifier","src":"10297:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10288:3:26"},"nodeType":"YulFunctionCall","src":"10288:12:26"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"10281:3:26"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10173:3:26"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"10178:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10170:2:26"},"nodeType":"YulFunctionCall","src":"10170:15:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10186:23:26","statements":[{"nodeType":"YulAssignment","src":"10188:19:26","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10199:3:26"},{"name":"_1","nodeType":"YulIdentifier","src":"10204:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10195:3:26"},"nodeType":"YulFunctionCall","src":"10195:12:26"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"10188:3:26"}]}]},"pre":{"nodeType":"YulBlock","src":"10166:3:26","statements":[]},"src":"10162:148:26"},{"nodeType":"YulAssignment","src":"10319:15:26","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"10329:5:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10319:6:26"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9506:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9517:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9529:6:26","type":""}],"src":"9445:895:26"},{"body":{"nodeType":"YulBlock","src":"10465:125:26","statements":[{"nodeType":"YulAssignment","src":"10475:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10487:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"10498:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10483:3:26"},"nodeType":"YulFunctionCall","src":"10483:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10475:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10517:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10532:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"10540:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10528:3:26"},"nodeType":"YulFunctionCall","src":"10528:55:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10510:6:26"},"nodeType":"YulFunctionCall","src":"10510:74:26"},"nodeType":"YulExpressionStatement","src":"10510:74:26"}]},"name":"abi_encode_tuple_t_contract$_IEntryPoint_$758__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10434:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10445:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10456:4:26","type":""}],"src":"10345:245:26"},{"body":{"nodeType":"YulBlock","src":"10718:428:26","statements":[{"body":{"nodeType":"YulBlock","src":"10764:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10773:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10776:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10766:6:26"},"nodeType":"YulFunctionCall","src":"10766:12:26"},"nodeType":"YulExpressionStatement","src":"10766:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10739:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"10748:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10735:3:26"},"nodeType":"YulFunctionCall","src":"10735:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"10760:2:26","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10731:3:26"},"nodeType":"YulFunctionCall","src":"10731:32:26"},"nodeType":"YulIf","src":"10728:52:26"},{"nodeType":"YulAssignment","src":"10789:39:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10818:9:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"10799:18:26"},"nodeType":"YulFunctionCall","src":"10799:29:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10789:6:26"}]},{"nodeType":"YulAssignment","src":"10837:42:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10864:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"10875:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10860:3:26"},"nodeType":"YulFunctionCall","src":"10860:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10847:12:26"},"nodeType":"YulFunctionCall","src":"10847:32:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10837:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"10888:46:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10919:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"10930:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10915:3:26"},"nodeType":"YulFunctionCall","src":"10915:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10902:12:26"},"nodeType":"YulFunctionCall","src":"10902:32:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10892:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"10977:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10986:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10989:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10979:6:26"},"nodeType":"YulFunctionCall","src":"10979:12:26"},"nodeType":"YulExpressionStatement","src":"10979:12:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10949:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"10957:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10946:2:26"},"nodeType":"YulFunctionCall","src":"10946:30:26"},"nodeType":"YulIf","src":"10943:50:26"},{"nodeType":"YulVariableDeclaration","src":"11002:84:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11058:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"11069:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11054:3:26"},"nodeType":"YulFunctionCall","src":"11054:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11078:7:26"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"11028:25:26"},"nodeType":"YulFunctionCall","src":"11028:58:26"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"11006:8:26","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"11016:8:26","type":""}]},{"nodeType":"YulAssignment","src":"11095:18:26","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"11105:8:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"11095:6:26"}]},{"nodeType":"YulAssignment","src":"11122:18:26","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"11132:8:26"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"11122:6:26"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10660:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10671:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10683:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10691:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10699:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"10707:6:26","type":""}],"src":"10595:551:26"},{"body":{"nodeType":"YulBlock","src":"11378:983:26","statements":[{"body":{"nodeType":"YulBlock","src":"11425:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11434:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11437:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11427:6:26"},"nodeType":"YulFunctionCall","src":"11427:12:26"},"nodeType":"YulExpressionStatement","src":"11427:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11399:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"11408:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11395:3:26"},"nodeType":"YulFunctionCall","src":"11395:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"11420:3:26","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11391:3:26"},"nodeType":"YulFunctionCall","src":"11391:33:26"},"nodeType":"YulIf","src":"11388:53:26"},{"nodeType":"YulAssignment","src":"11450:39:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11479:9:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"11460:18:26"},"nodeType":"YulFunctionCall","src":"11460:29:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11450:6:26"}]},{"nodeType":"YulAssignment","src":"11498:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11531:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11542:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11527:3:26"},"nodeType":"YulFunctionCall","src":"11527:18:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"11508:18:26"},"nodeType":"YulFunctionCall","src":"11508:38:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11498:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"11555:46:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11586:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11597:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11582:3:26"},"nodeType":"YulFunctionCall","src":"11582:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11569:12:26"},"nodeType":"YulFunctionCall","src":"11569:32:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11559:6:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11610:28:26","value":{"kind":"number","nodeType":"YulLiteral","src":"11620:18:26","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"11614:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"11665:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11674:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11677:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11667:6:26"},"nodeType":"YulFunctionCall","src":"11667:12:26"},"nodeType":"YulExpressionStatement","src":"11667:12:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11653:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"11661:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11650:2:26"},"nodeType":"YulFunctionCall","src":"11650:14:26"},"nodeType":"YulIf","src":"11647:34:26"},{"nodeType":"YulVariableDeclaration","src":"11690:96:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11758:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"11769:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11754:3:26"},"nodeType":"YulFunctionCall","src":"11754:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11778:7:26"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"11716:37:26"},"nodeType":"YulFunctionCall","src":"11716:70:26"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"11694:8:26","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"11704:8:26","type":""}]},{"nodeType":"YulAssignment","src":"11795:18:26","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"11805:8:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"11795:6:26"}]},{"nodeType":"YulAssignment","src":"11822:18:26","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"11832:8:26"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"11822:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"11849:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11882:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11893:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11878:3:26"},"nodeType":"YulFunctionCall","src":"11878:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11865:12:26"},"nodeType":"YulFunctionCall","src":"11865:32:26"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"11853:8:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"11926:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11935:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11938:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11928:6:26"},"nodeType":"YulFunctionCall","src":"11928:12:26"},"nodeType":"YulExpressionStatement","src":"11928:12:26"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"11912:8:26"},{"name":"_1","nodeType":"YulIdentifier","src":"11922:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11909:2:26"},"nodeType":"YulFunctionCall","src":"11909:16:26"},"nodeType":"YulIf","src":"11906:36:26"},{"nodeType":"YulVariableDeclaration","src":"11951:98:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12019:9:26"},{"name":"offset_1","nodeType":"YulIdentifier","src":"12030:8:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12015:3:26"},"nodeType":"YulFunctionCall","src":"12015:24:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12041:7:26"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"11977:37:26"},"nodeType":"YulFunctionCall","src":"11977:72:26"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"11955:8:26","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"11965:8:26","type":""}]},{"nodeType":"YulAssignment","src":"12058:18:26","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"12068:8:26"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"12058:6:26"}]},{"nodeType":"YulAssignment","src":"12085:18:26","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"12095:8:26"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"12085:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"12112:49:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12145:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12156:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12141:3:26"},"nodeType":"YulFunctionCall","src":"12141:19:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12128:12:26"},"nodeType":"YulFunctionCall","src":"12128:33:26"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"12116:8:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"12190:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12199:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12202:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12192:6:26"},"nodeType":"YulFunctionCall","src":"12192:12:26"},"nodeType":"YulExpressionStatement","src":"12192:12:26"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"12176:8:26"},{"name":"_1","nodeType":"YulIdentifier","src":"12186:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12173:2:26"},"nodeType":"YulFunctionCall","src":"12173:16:26"},"nodeType":"YulIf","src":"12170:36:26"},{"nodeType":"YulVariableDeclaration","src":"12215:86:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12271:9:26"},{"name":"offset_2","nodeType":"YulIdentifier","src":"12282:8:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12267:3:26"},"nodeType":"YulFunctionCall","src":"12267:24:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12293:7:26"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"12241:25:26"},"nodeType":"YulFunctionCall","src":"12241:60:26"},"variables":[{"name":"value6_1","nodeType":"YulTypedName","src":"12219:8:26","type":""},{"name":"value7_1","nodeType":"YulTypedName","src":"12229:8:26","type":""}]},{"nodeType":"YulAssignment","src":"12310:18:26","value":{"name":"value6_1","nodeType":"YulIdentifier","src":"12320:8:26"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"12310:6:26"}]},{"nodeType":"YulAssignment","src":"12337:18:26","value":{"name":"value7_1","nodeType":"YulIdentifier","src":"12347:8:26"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"12337:6:26"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11288:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11299:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11311:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11319:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11327:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11335:6:26","type":""},{"name":"value4","nodeType":"YulTypedName","src":"11343:6:26","type":""},{"name":"value5","nodeType":"YulTypedName","src":"11351:6:26","type":""},{"name":"value6","nodeType":"YulTypedName","src":"11359:6:26","type":""},{"name":"value7","nodeType":"YulTypedName","src":"11367:6:26","type":""}],"src":"11151:1210:26"},{"body":{"nodeType":"YulBlock","src":"12523:538:26","statements":[{"body":{"nodeType":"YulBlock","src":"12570:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12579:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12582:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12572:6:26"},"nodeType":"YulFunctionCall","src":"12572:12:26"},"nodeType":"YulExpressionStatement","src":"12572:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12544:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"12553:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12540:3:26"},"nodeType":"YulFunctionCall","src":"12540:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"12565:3:26","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12536:3:26"},"nodeType":"YulFunctionCall","src":"12536:33:26"},"nodeType":"YulIf","src":"12533:53:26"},{"nodeType":"YulAssignment","src":"12595:39:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12624:9:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"12605:18:26"},"nodeType":"YulFunctionCall","src":"12605:29:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12595:6:26"}]},{"nodeType":"YulAssignment","src":"12643:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12676:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12687:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12672:3:26"},"nodeType":"YulFunctionCall","src":"12672:18:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"12653:18:26"},"nodeType":"YulFunctionCall","src":"12653:38:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12643:6:26"}]},{"nodeType":"YulAssignment","src":"12700:42:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12727:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12738:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12723:3:26"},"nodeType":"YulFunctionCall","src":"12723:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12710:12:26"},"nodeType":"YulFunctionCall","src":"12710:32:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"12700:6:26"}]},{"nodeType":"YulAssignment","src":"12751:42:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12778:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12789:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12774:3:26"},"nodeType":"YulFunctionCall","src":"12774:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12761:12:26"},"nodeType":"YulFunctionCall","src":"12761:32:26"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"12751:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"12802:47:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12833:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12844:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12829:3:26"},"nodeType":"YulFunctionCall","src":"12829:19:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12816:12:26"},"nodeType":"YulFunctionCall","src":"12816:33:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12806:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"12892:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12901:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12904:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12894:6:26"},"nodeType":"YulFunctionCall","src":"12894:12:26"},"nodeType":"YulExpressionStatement","src":"12894:12:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12864:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"12872:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12861:2:26"},"nodeType":"YulFunctionCall","src":"12861:30:26"},"nodeType":"YulIf","src":"12858:50:26"},{"nodeType":"YulVariableDeclaration","src":"12917:84:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12973:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"12984:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12969:3:26"},"nodeType":"YulFunctionCall","src":"12969:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12993:7:26"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"12943:25:26"},"nodeType":"YulFunctionCall","src":"12943:58:26"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"12921:8:26","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"12931:8:26","type":""}]},{"nodeType":"YulAssignment","src":"13010:18:26","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"13020:8:26"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"13010:6:26"}]},{"nodeType":"YulAssignment","src":"13037:18:26","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"13047:8:26"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"13037:6:26"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12449:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12460:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12472:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12480:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12488:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12496:6:26","type":""},{"name":"value4","nodeType":"YulTypedName","src":"12504:6:26","type":""},{"name":"value5","nodeType":"YulTypedName","src":"12512:6:26","type":""}],"src":"12366:695:26"},{"body":{"nodeType":"YulBlock","src":"13235:690:26","statements":[{"nodeType":"YulVariableDeclaration","src":"13245:12:26","value":{"kind":"number","nodeType":"YulLiteral","src":"13255:2:26","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"13249:2:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13266:32:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13284:9:26"},{"name":"_1","nodeType":"YulIdentifier","src":"13295:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13280:3:26"},"nodeType":"YulFunctionCall","src":"13280:18:26"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"13270:6:26","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13314:9:26"},{"name":"_1","nodeType":"YulIdentifier","src":"13325:2:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13307:6:26"},"nodeType":"YulFunctionCall","src":"13307:21:26"},"nodeType":"YulExpressionStatement","src":"13307:21:26"},{"nodeType":"YulVariableDeclaration","src":"13337:17:26","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"13348:6:26"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"13341:3:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13363:27:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13383:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13377:5:26"},"nodeType":"YulFunctionCall","src":"13377:13:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"13367:6:26","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"13406:6:26"},{"name":"length","nodeType":"YulIdentifier","src":"13414:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13399:6:26"},"nodeType":"YulFunctionCall","src":"13399:22:26"},"nodeType":"YulExpressionStatement","src":"13399:22:26"},{"nodeType":"YulAssignment","src":"13430:25:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13441:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"13452:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13437:3:26"},"nodeType":"YulFunctionCall","src":"13437:18:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13430:3:26"}]},{"nodeType":"YulVariableDeclaration","src":"13464:53:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13486:9:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13501:1:26","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"13504:6:26"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13497:3:26"},"nodeType":"YulFunctionCall","src":"13497:14:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13482:3:26"},"nodeType":"YulFunctionCall","src":"13482:30:26"},{"kind":"number","nodeType":"YulLiteral","src":"13514:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13478:3:26"},"nodeType":"YulFunctionCall","src":"13478:39:26"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"13468:6:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13526:29:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13544:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"13552:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13540:3:26"},"nodeType":"YulFunctionCall","src":"13540:15:26"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"13530:6:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13564:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"13573:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"13568:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"13632:264:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13653:3:26"},{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"13666:6:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"13674:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13662:3:26"},"nodeType":"YulFunctionCall","src":"13662:22:26"},{"kind":"number","nodeType":"YulLiteral","src":"13686:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13658:3:26"},"nodeType":"YulFunctionCall","src":"13658:95:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13646:6:26"},"nodeType":"YulFunctionCall","src":"13646:108:26"},"nodeType":"YulExpressionStatement","src":"13646:108:26"},{"nodeType":"YulAssignment","src":"13767:49:26","value":{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"13800:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13794:5:26"},"nodeType":"YulFunctionCall","src":"13794:13:26"},{"name":"tail_2","nodeType":"YulIdentifier","src":"13809:6:26"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"13777:16:26"},"nodeType":"YulFunctionCall","src":"13777:39:26"},"variableNames":[{"name":"tail_2","nodeType":"YulIdentifier","src":"13767:6:26"}]},{"nodeType":"YulAssignment","src":"13829:25:26","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"13843:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"13851:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13839:3:26"},"nodeType":"YulFunctionCall","src":"13839:15:26"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"13829:6:26"}]},{"nodeType":"YulAssignment","src":"13867:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13878:3:26"},{"name":"_1","nodeType":"YulIdentifier","src":"13883:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13874:3:26"},"nodeType":"YulFunctionCall","src":"13874:12:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13867:3:26"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"13594:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"13597:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13591:2:26"},"nodeType":"YulFunctionCall","src":"13591:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"13605:18:26","statements":[{"nodeType":"YulAssignment","src":"13607:14:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"13616:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"13619:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13612:3:26"},"nodeType":"YulFunctionCall","src":"13612:9:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"13607:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"13587:3:26","statements":[]},"src":"13583:313:26"},{"nodeType":"YulAssignment","src":"13905:14:26","value":{"name":"tail_2","nodeType":"YulIdentifier","src":"13913:6:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13905:4:26"}]}]},"name":"abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13204:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13215:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13226:4:26","type":""}],"src":"13066:859:26"},{"body":{"nodeType":"YulBlock","src":"14104:233:26","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14121:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14132:2:26","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14114:6:26"},"nodeType":"YulFunctionCall","src":"14114:21:26"},"nodeType":"YulExpressionStatement","src":"14114:21:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14155:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14166:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14151:3:26"},"nodeType":"YulFunctionCall","src":"14151:18:26"},{"kind":"number","nodeType":"YulLiteral","src":"14171:2:26","type":"","value":"43"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14144:6:26"},"nodeType":"YulFunctionCall","src":"14144:30:26"},"nodeType":"YulExpressionStatement","src":"14144:30:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14194:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14205:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14190:3:26"},"nodeType":"YulFunctionCall","src":"14190:18:26"},{"hexValue":"6f6e6c7920656e74727920706f696e74206f722077616c6c657420666163746f","kind":"string","nodeType":"YulLiteral","src":"14210:34:26","type":"","value":"only entry point or wallet facto"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14183:6:26"},"nodeType":"YulFunctionCall","src":"14183:62:26"},"nodeType":"YulExpressionStatement","src":"14183:62:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14265:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14276:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14261:3:26"},"nodeType":"YulFunctionCall","src":"14261:18:26"},{"hexValue":"72792063616e2063616c6c","kind":"string","nodeType":"YulLiteral","src":"14281:13:26","type":"","value":"ry can call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14254:6:26"},"nodeType":"YulFunctionCall","src":"14254:41:26"},"nodeType":"YulExpressionStatement","src":"14254:41:26"},{"nodeType":"YulAssignment","src":"14304:27:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14316:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14327:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14312:3:26"},"nodeType":"YulFunctionCall","src":"14312:19:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14304:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_24902e8dc56a5c691f0b6047c774684c122d74c2b2b5241f387104478768b569__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14081:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14095:4:26","type":""}],"src":"13930:407:26"},{"body":{"nodeType":"YulBlock","src":"14516:169:26","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14533:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14544:2:26","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14526:6:26"},"nodeType":"YulFunctionCall","src":"14526:21:26"},"nodeType":"YulExpressionStatement","src":"14526:21:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14567:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14578:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14563:3:26"},"nodeType":"YulFunctionCall","src":"14563:18:26"},{"kind":"number","nodeType":"YulLiteral","src":"14583:2:26","type":"","value":"19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14556:6:26"},"nodeType":"YulFunctionCall","src":"14556:30:26"},"nodeType":"YulExpressionStatement","src":"14556:30:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14606:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14617:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14602:3:26"},"nodeType":"YulFunctionCall","src":"14602:18:26"},{"hexValue":"77726f6e67206172726179206c656e67746873","kind":"string","nodeType":"YulLiteral","src":"14622:21:26","type":"","value":"wrong array lengths"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14595:6:26"},"nodeType":"YulFunctionCall","src":"14595:49:26"},"nodeType":"YulExpressionStatement","src":"14595:49:26"},{"nodeType":"YulAssignment","src":"14653:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14665:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14676:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14661:3:26"},"nodeType":"YulFunctionCall","src":"14661:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14653:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_046f63b53432b31c38dcec6b5f05e3d65602d684f9163a89310aaaf94e08558e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14493:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14507:4:26","type":""}],"src":"14342:343:26"},{"body":{"nodeType":"YulBlock","src":"14864:170:26","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14881:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14892:2:26","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14874:6:26"},"nodeType":"YulFunctionCall","src":"14874:21:26"},"nodeType":"YulExpressionStatement","src":"14874:21:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14915:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14926:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14911:3:26"},"nodeType":"YulFunctionCall","src":"14911:18:26"},{"kind":"number","nodeType":"YulLiteral","src":"14931:2:26","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14904:6:26"},"nodeType":"YulFunctionCall","src":"14904:30:26"},"nodeType":"YulExpressionStatement","src":"14904:30:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14954:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14965:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14950:3:26"},"nodeType":"YulFunctionCall","src":"14950:18:26"},{"hexValue":"77726f6e672076616c756573206c656e67746873","kind":"string","nodeType":"YulLiteral","src":"14970:22:26","type":"","value":"wrong values lengths"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14943:6:26"},"nodeType":"YulFunctionCall","src":"14943:50:26"},"nodeType":"YulExpressionStatement","src":"14943:50:26"},{"nodeType":"YulAssignment","src":"15002:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15014:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"15025:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15010:3:26"},"nodeType":"YulFunctionCall","src":"15010:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15002:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_200ffcddc5999f8f8cc5e29beb35e90fc602bae6d6023fa77e27cdc95bdcc448__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14841:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14855:4:26","type":""}],"src":"14690:344:26"},{"body":{"nodeType":"YulBlock","src":"15071:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15088:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15091:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15081:6:26"},"nodeType":"YulFunctionCall","src":"15081:88:26"},"nodeType":"YulExpressionStatement","src":"15081:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15185:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15188:4:26","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15178:6:26"},"nodeType":"YulFunctionCall","src":"15178:15:26"},"nodeType":"YulExpressionStatement","src":"15178:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15209:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15212:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15202:6:26"},"nodeType":"YulFunctionCall","src":"15202:15:26"},"nodeType":"YulExpressionStatement","src":"15202:15:26"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"15039:184:26"},{"body":{"nodeType":"YulBlock","src":"15322:486:26","statements":[{"nodeType":"YulVariableDeclaration","src":"15332:51:26","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"15371:11:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15358:12:26"},"nodeType":"YulFunctionCall","src":"15358:25:26"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"15336:18:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"15531:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15540:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15543:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15533:6:26"},"nodeType":"YulFunctionCall","src":"15533:12:26"},"nodeType":"YulExpressionStatement","src":"15533:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"15406:18:26"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"15434:12:26"},"nodeType":"YulFunctionCall","src":"15434:14:26"},{"name":"base_ref","nodeType":"YulIdentifier","src":"15450:8:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15430:3:26"},"nodeType":"YulFunctionCall","src":"15430:29:26"},{"kind":"number","nodeType":"YulLiteral","src":"15461:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15426:3:26"},"nodeType":"YulFunctionCall","src":"15426:102:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15402:3:26"},"nodeType":"YulFunctionCall","src":"15402:127:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15395:6:26"},"nodeType":"YulFunctionCall","src":"15395:135:26"},"nodeType":"YulIf","src":"15392:155:26"},{"nodeType":"YulVariableDeclaration","src":"15556:47:26","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"15574:8:26"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"15584:18:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15570:3:26"},"nodeType":"YulFunctionCall","src":"15570:33:26"},"variables":[{"name":"addr_1","nodeType":"YulTypedName","src":"15560:6:26","type":""}]},{"nodeType":"YulAssignment","src":"15612:30:26","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"15635:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15622:12:26"},"nodeType":"YulFunctionCall","src":"15622:20:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"15612:6:26"}]},{"body":{"nodeType":"YulBlock","src":"15685:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15694:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15697:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15687:6:26"},"nodeType":"YulFunctionCall","src":"15687:12:26"},"nodeType":"YulExpressionStatement","src":"15687:12:26"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"15657:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"15665:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15654:2:26"},"nodeType":"YulFunctionCall","src":"15654:30:26"},"nodeType":"YulIf","src":"15651:50:26"},{"nodeType":"YulAssignment","src":"15710:25:26","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"15722:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"15730:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15718:3:26"},"nodeType":"YulFunctionCall","src":"15718:17:26"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"15710:4:26"}]},{"body":{"nodeType":"YulBlock","src":"15786:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15795:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15798:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15788:6:26"},"nodeType":"YulFunctionCall","src":"15788:12:26"},"nodeType":"YulExpressionStatement","src":"15788:12:26"}]},"condition":{"arguments":[{"name":"addr","nodeType":"YulIdentifier","src":"15751:4:26"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"15761:12:26"},"nodeType":"YulFunctionCall","src":"15761:14:26"},{"name":"length","nodeType":"YulIdentifier","src":"15777:6:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15757:3:26"},"nodeType":"YulFunctionCall","src":"15757:27:26"}],"functionName":{"name":"sgt","nodeType":"YulIdentifier","src":"15747:3:26"},"nodeType":"YulFunctionCall","src":"15747:38:26"},"nodeType":"YulIf","src":"15744:58:26"}]},"name":"access_calldata_tail_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"15279:8:26","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"15289:11:26","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"15305:4:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"15311:6:26","type":""}],"src":"15228:580:26"},{"body":{"nodeType":"YulBlock","src":"15860:302:26","statements":[{"body":{"nodeType":"YulBlock","src":"15959:168:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15980:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15983:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15973:6:26"},"nodeType":"YulFunctionCall","src":"15973:88:26"},"nodeType":"YulExpressionStatement","src":"15973:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16081:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"16084:4:26","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16074:6:26"},"nodeType":"YulFunctionCall","src":"16074:15:26"},"nodeType":"YulExpressionStatement","src":"16074:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16109:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16112:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16102:6:26"},"nodeType":"YulFunctionCall","src":"16102:15:26"},"nodeType":"YulExpressionStatement","src":"16102:15:26"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15876:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"15883:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15873:2:26"},"nodeType":"YulFunctionCall","src":"15873:77:26"},"nodeType":"YulIf","src":"15870:257:26"},{"nodeType":"YulAssignment","src":"16136:20:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16147:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"16154:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16143:3:26"},"nodeType":"YulFunctionCall","src":"16143:13:26"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"16136:3:26"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15842:5:26","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"15852:3:26","type":""}],"src":"15813:349:26"},{"body":{"nodeType":"YulBlock","src":"16341:236:26","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16358:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"16369:2:26","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16351:6:26"},"nodeType":"YulFunctionCall","src":"16351:21:26"},"nodeType":"YulExpressionStatement","src":"16351:21:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16392:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"16403:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16388:3:26"},"nodeType":"YulFunctionCall","src":"16388:18:26"},{"kind":"number","nodeType":"YulLiteral","src":"16408:2:26","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16381:6:26"},"nodeType":"YulFunctionCall","src":"16381:30:26"},"nodeType":"YulExpressionStatement","src":"16381:30:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16431:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"16442:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16427:3:26"},"nodeType":"YulFunctionCall","src":"16427:18:26"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"16447:34:26","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16420:6:26"},"nodeType":"YulFunctionCall","src":"16420:62:26"},"nodeType":"YulExpressionStatement","src":"16420:62:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16502:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"16513:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16498:3:26"},"nodeType":"YulFunctionCall","src":"16498:18:26"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"16518:16:26","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16491:6:26"},"nodeType":"YulFunctionCall","src":"16491:44:26"},"nodeType":"YulExpressionStatement","src":"16491:44:26"},{"nodeType":"YulAssignment","src":"16544:27:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16556:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"16567:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16552:3:26"},"nodeType":"YulFunctionCall","src":"16552:19:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16544:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16318:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16332:4:26","type":""}],"src":"16167:410:26"},{"body":{"nodeType":"YulBlock","src":"16663:103:26","statements":[{"body":{"nodeType":"YulBlock","src":"16709:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16718:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16721:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16711:6:26"},"nodeType":"YulFunctionCall","src":"16711:12:26"},"nodeType":"YulExpressionStatement","src":"16711:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"16684:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"16693:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16680:3:26"},"nodeType":"YulFunctionCall","src":"16680:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"16705:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"16676:3:26"},"nodeType":"YulFunctionCall","src":"16676:32:26"},"nodeType":"YulIf","src":"16673:52:26"},{"nodeType":"YulAssignment","src":"16734:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16750:9:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16744:5:26"},"nodeType":"YulFunctionCall","src":"16744:16:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"16734:6:26"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16629:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"16640:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"16652:6:26","type":""}],"src":"16582:184:26"},{"body":{"nodeType":"YulBlock","src":"16908:225:26","statements":[{"nodeType":"YulAssignment","src":"16918:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16930:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"16941:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16926:3:26"},"nodeType":"YulFunctionCall","src":"16926:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16918:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16960:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16975:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"16983:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16971:3:26"},"nodeType":"YulFunctionCall","src":"16971:55:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16953:6:26"},"nodeType":"YulFunctionCall","src":"16953:74:26"},"nodeType":"YulExpressionStatement","src":"16953:74:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17047:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"17058:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17043:3:26"},"nodeType":"YulFunctionCall","src":"17043:18:26"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17067:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"17075:50:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17063:3:26"},"nodeType":"YulFunctionCall","src":"17063:63:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17036:6:26"},"nodeType":"YulFunctionCall","src":"17036:91:26"},"nodeType":"YulExpressionStatement","src":"17036:91:26"}]},"name":"abi_encode_tuple_t_address_t_rational_0_by_1__to_t_address_t_uint192__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16869:9:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16880:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16888:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16899:4:26","type":""}],"src":"16771:362:26"},{"body":{"nodeType":"YulBlock","src":"17312:237:26","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17329:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"17340:2:26","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17322:6:26"},"nodeType":"YulFunctionCall","src":"17322:21:26"},"nodeType":"YulExpressionStatement","src":"17322:21:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17363:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"17374:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17359:3:26"},"nodeType":"YulFunctionCall","src":"17359:18:26"},{"kind":"number","nodeType":"YulLiteral","src":"17379:2:26","type":"","value":"47"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17352:6:26"},"nodeType":"YulFunctionCall","src":"17352:30:26"},"nodeType":"YulExpressionStatement","src":"17352:30:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17402:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"17413:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17398:3:26"},"nodeType":"YulFunctionCall","src":"17398:18:26"},{"hexValue":"45524331393637557067726164653a207570677261646520627265616b732066","kind":"string","nodeType":"YulLiteral","src":"17418:34:26","type":"","value":"ERC1967Upgrade: upgrade breaks f"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17391:6:26"},"nodeType":"YulFunctionCall","src":"17391:62:26"},"nodeType":"YulExpressionStatement","src":"17391:62:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17473:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"17484:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17469:3:26"},"nodeType":"YulFunctionCall","src":"17469:18:26"},{"hexValue":"757274686572207570677261646573","kind":"string","nodeType":"YulLiteral","src":"17489:17:26","type":"","value":"urther upgrades"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17462:6:26"},"nodeType":"YulFunctionCall","src":"17462:45:26"},"nodeType":"YulExpressionStatement","src":"17462:45:26"},{"nodeType":"YulAssignment","src":"17516:27:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17528:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"17539:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17524:3:26"},"nodeType":"YulFunctionCall","src":"17524:19:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17516:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_2425ea74e68e4bcd365d89824a06e1475543dcbb6a12bf699e5abf6b11b9b6ed__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17289:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17303:4:26","type":""}],"src":"17138:411:26"},{"body":{"nodeType":"YulBlock","src":"17728:178:26","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17745:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"17756:2:26","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17738:6:26"},"nodeType":"YulFunctionCall","src":"17738:21:26"},"nodeType":"YulExpressionStatement","src":"17738:21:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17779:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"17790:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17775:3:26"},"nodeType":"YulFunctionCall","src":"17775:18:26"},{"kind":"number","nodeType":"YulLiteral","src":"17795:2:26","type":"","value":"28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17768:6:26"},"nodeType":"YulFunctionCall","src":"17768:30:26"},"nodeType":"YulExpressionStatement","src":"17768:30:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17818:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"17829:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17814:3:26"},"nodeType":"YulFunctionCall","src":"17814:18:26"},{"hexValue":"6163636f756e743a206e6f742066726f6d20456e747279506f696e74","kind":"string","nodeType":"YulLiteral","src":"17834:30:26","type":"","value":"account: not from EntryPoint"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17807:6:26"},"nodeType":"YulFunctionCall","src":"17807:58:26"},"nodeType":"YulExpressionStatement","src":"17807:58:26"},{"nodeType":"YulAssignment","src":"17874:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17886:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"17897:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17882:3:26"},"nodeType":"YulFunctionCall","src":"17882:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17874:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_f684c2c0c9ec797849b62669189fe025e9077c00ba7812987ce38c0071ad7a50__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17705:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17719:4:26","type":""}],"src":"17554:352:26"},{"body":{"nodeType":"YulBlock","src":"18102:14:26","statements":[{"nodeType":"YulAssignment","src":"18104:10:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"18111:3:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18104:3:26"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18086:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18094:3:26","type":""}],"src":"17911:205:26"},{"body":{"nodeType":"YulBlock","src":"18258:150:26","statements":[{"nodeType":"YulVariableDeclaration","src":"18268:27:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18288:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18282:5:26"},"nodeType":"YulFunctionCall","src":"18282:13:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"18272:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18343:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"18351:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18339:3:26"},"nodeType":"YulFunctionCall","src":"18339:17:26"},{"name":"pos","nodeType":"YulIdentifier","src":"18358:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"18363:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"18304:34:26"},"nodeType":"YulFunctionCall","src":"18304:66:26"},"nodeType":"YulExpressionStatement","src":"18304:66:26"},{"nodeType":"YulAssignment","src":"18379:23:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18390:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"18395:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18386:3:26"},"nodeType":"YulFunctionCall","src":"18386:16:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18379:3:26"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18234:3:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18239:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18250:3:26","type":""}],"src":"18121:287:26"},{"body":{"nodeType":"YulBlock","src":"18587:158:26","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18604:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"18615:2:26","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18597:6:26"},"nodeType":"YulFunctionCall","src":"18597:21:26"},"nodeType":"YulExpressionStatement","src":"18597:21:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18638:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"18649:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18634:3:26"},"nodeType":"YulFunctionCall","src":"18634:18:26"},{"kind":"number","nodeType":"YulLiteral","src":"18654:1:26","type":"","value":"9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18627:6:26"},"nodeType":"YulFunctionCall","src":"18627:29:26"},"nodeType":"YulExpressionStatement","src":"18627:29:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18676:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"18687:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18672:3:26"},"nodeType":"YulFunctionCall","src":"18672:18:26"},{"hexValue":"6e6f206f776e657273","kind":"string","nodeType":"YulLiteral","src":"18692:11:26","type":"","value":"no owners"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18665:6:26"},"nodeType":"YulFunctionCall","src":"18665:39:26"},"nodeType":"YulExpressionStatement","src":"18665:39:26"},{"nodeType":"YulAssignment","src":"18713:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18725:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"18736:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18721:3:26"},"nodeType":"YulFunctionCall","src":"18721:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18713:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_788f6686002b78bf87a5d2bb43a41d3facc8f0725c661cc11a8fea8d1d606572__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18564:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18578:4:26","type":""}],"src":"18413:332:26"},{"body":{"nodeType":"YulBlock","src":"18901:530:26","statements":[{"nodeType":"YulVariableDeclaration","src":"18911:12:26","value":{"kind":"number","nodeType":"YulLiteral","src":"18921:2:26","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"18915:2:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18932:32:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18950:9:26"},{"name":"_1","nodeType":"YulIdentifier","src":"18961:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18946:3:26"},"nodeType":"YulFunctionCall","src":"18946:18:26"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"18936:6:26","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18980:9:26"},{"name":"_1","nodeType":"YulIdentifier","src":"18991:2:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18973:6:26"},"nodeType":"YulFunctionCall","src":"18973:21:26"},"nodeType":"YulExpressionStatement","src":"18973:21:26"},{"nodeType":"YulVariableDeclaration","src":"19003:17:26","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"19014:6:26"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"19007:3:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19029:27:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19049:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19043:5:26"},"nodeType":"YulFunctionCall","src":"19043:13:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"19033:6:26","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"19072:6:26"},{"name":"length","nodeType":"YulIdentifier","src":"19080:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19065:6:26"},"nodeType":"YulFunctionCall","src":"19065:22:26"},"nodeType":"YulExpressionStatement","src":"19065:22:26"},{"nodeType":"YulAssignment","src":"19096:25:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19107:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"19118:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19103:3:26"},"nodeType":"YulFunctionCall","src":"19103:18:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19096:3:26"}]},{"nodeType":"YulVariableDeclaration","src":"19130:29:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19148:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"19156:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19144:3:26"},"nodeType":"YulFunctionCall","src":"19144:15:26"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"19134:6:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19168:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"19177:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"19172:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"19236:169:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19257:3:26"},{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"19272:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19266:5:26"},"nodeType":"YulFunctionCall","src":"19266:13:26"},{"kind":"number","nodeType":"YulLiteral","src":"19281:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19262:3:26"},"nodeType":"YulFunctionCall","src":"19262:62:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19250:6:26"},"nodeType":"YulFunctionCall","src":"19250:75:26"},"nodeType":"YulExpressionStatement","src":"19250:75:26"},{"nodeType":"YulAssignment","src":"19338:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19349:3:26"},{"name":"_1","nodeType":"YulIdentifier","src":"19354:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19345:3:26"},"nodeType":"YulFunctionCall","src":"19345:12:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19338:3:26"}]},{"nodeType":"YulAssignment","src":"19370:25:26","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"19384:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"19392:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19380:3:26"},"nodeType":"YulFunctionCall","src":"19380:15:26"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"19370:6:26"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"19198:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"19201:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"19195:2:26"},"nodeType":"YulFunctionCall","src":"19195:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"19209:18:26","statements":[{"nodeType":"YulAssignment","src":"19211:14:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"19220:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"19223:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19216:3:26"},"nodeType":"YulFunctionCall","src":"19216:9:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"19211:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"19191:3:26","statements":[]},"src":"19187:218:26"},{"nodeType":"YulAssignment","src":"19414:11:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"19422:3:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19414:4:26"}]}]},"name":"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18870:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18881:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18892:4:26","type":""}],"src":"18750:681:26"},{"body":{"nodeType":"YulBlock","src":"19610:235:26","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19627:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"19638:2:26","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19620:6:26"},"nodeType":"YulFunctionCall","src":"19620:21:26"},"nodeType":"YulExpressionStatement","src":"19620:21:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19661:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"19672:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19657:3:26"},"nodeType":"YulFunctionCall","src":"19657:18:26"},{"kind":"number","nodeType":"YulLiteral","src":"19677:2:26","type":"","value":"45"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19650:6:26"},"nodeType":"YulFunctionCall","src":"19650:30:26"},"nodeType":"YulExpressionStatement","src":"19650:30:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19700:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"19711:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19696:3:26"},"nodeType":"YulFunctionCall","src":"19696:18:26"},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e","kind":"string","nodeType":"YulLiteral","src":"19716:34:26","type":"","value":"ERC1967: new implementation is n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19689:6:26"},"nodeType":"YulFunctionCall","src":"19689:62:26"},"nodeType":"YulExpressionStatement","src":"19689:62:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19771:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"19782:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19767:3:26"},"nodeType":"YulFunctionCall","src":"19767:18:26"},{"hexValue":"6f74206120636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"19787:15:26","type":"","value":"ot a contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19760:6:26"},"nodeType":"YulFunctionCall","src":"19760:43:26"},"nodeType":"YulExpressionStatement","src":"19760:43:26"},{"nodeType":"YulAssignment","src":"19812:27:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19824:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"19835:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19820:3:26"},"nodeType":"YulFunctionCall","src":"19820:19:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19812:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19587:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19601:4:26","type":""}],"src":"19436:409:26"},{"body":{"nodeType":"YulBlock","src":"20070:160:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20087:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"20092:66:26","type":"","value":"0x19457468657265756d205369676e6564204d6573736167653a0a333200000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20080:6:26"},"nodeType":"YulFunctionCall","src":"20080:79:26"},"nodeType":"YulExpressionStatement","src":"20080:79:26"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20179:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"20184:2:26","type":"","value":"28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20175:3:26"},"nodeType":"YulFunctionCall","src":"20175:12:26"},{"name":"value0","nodeType":"YulIdentifier","src":"20189:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20168:6:26"},"nodeType":"YulFunctionCall","src":"20168:28:26"},"nodeType":"YulExpressionStatement","src":"20168:28:26"},{"nodeType":"YulAssignment","src":"20205:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20216:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"20221:2:26","type":"","value":"60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20212:3:26"},"nodeType":"YulFunctionCall","src":"20212:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20205:3:26"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73_t_bytes32__to_t_string_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20046:3:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20051:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20062:3:26","type":""}],"src":"19850:380:26"},{"body":{"nodeType":"YulBlock","src":"20409:181:26","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20426:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"20437:2:26","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20419:6:26"},"nodeType":"YulFunctionCall","src":"20419:21:26"},"nodeType":"YulExpressionStatement","src":"20419:21:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20460:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"20471:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20456:3:26"},"nodeType":"YulFunctionCall","src":"20456:18:26"},{"kind":"number","nodeType":"YulLiteral","src":"20476:2:26","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20449:6:26"},"nodeType":"YulFunctionCall","src":"20449:30:26"},"nodeType":"YulExpressionStatement","src":"20449:30:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20499:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"20510:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20495:3:26"},"nodeType":"YulFunctionCall","src":"20495:18:26"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","kind":"string","nodeType":"YulLiteral","src":"20515:33:26","type":"","value":"ECDSA: invalid signature length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20488:6:26"},"nodeType":"YulFunctionCall","src":"20488:61:26"},"nodeType":"YulExpressionStatement","src":"20488:61:26"},{"nodeType":"YulAssignment","src":"20558:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20570:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"20581:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20566:3:26"},"nodeType":"YulFunctionCall","src":"20566:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20558:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20386:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20400:4:26","type":""}],"src":"20235:355:26"},{"body":{"nodeType":"YulBlock","src":"20769:228:26","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20786:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"20797:2:26","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20779:6:26"},"nodeType":"YulFunctionCall","src":"20779:21:26"},"nodeType":"YulExpressionStatement","src":"20779:21:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20820:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"20831:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20816:3:26"},"nodeType":"YulFunctionCall","src":"20816:18:26"},{"kind":"number","nodeType":"YulLiteral","src":"20836:2:26","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20809:6:26"},"nodeType":"YulFunctionCall","src":"20809:30:26"},"nodeType":"YulExpressionStatement","src":"20809:30:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20859:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"20870:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20855:3:26"},"nodeType":"YulFunctionCall","src":"20855:18:26"},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f","kind":"string","nodeType":"YulLiteral","src":"20875:34:26","type":"","value":"Address: delegate call to non-co"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20848:6:26"},"nodeType":"YulFunctionCall","src":"20848:62:26"},"nodeType":"YulExpressionStatement","src":"20848:62:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20930:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"20941:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20926:3:26"},"nodeType":"YulFunctionCall","src":"20926:18:26"},{"hexValue":"6e7472616374","kind":"string","nodeType":"YulLiteral","src":"20946:8:26","type":"","value":"ntract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20919:6:26"},"nodeType":"YulFunctionCall","src":"20919:36:26"},"nodeType":"YulExpressionStatement","src":"20919:36:26"},{"nodeType":"YulAssignment","src":"20964:27:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20976:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"20987:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20972:3:26"},"nodeType":"YulFunctionCall","src":"20972:19:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20964:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20746:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20760:4:26","type":""}],"src":"20595:402:26"},{"body":{"nodeType":"YulBlock","src":"21176:224:26","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21193:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21204:2:26","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21186:6:26"},"nodeType":"YulFunctionCall","src":"21186:21:26"},"nodeType":"YulExpressionStatement","src":"21186:21:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21227:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21238:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21223:3:26"},"nodeType":"YulFunctionCall","src":"21223:18:26"},{"kind":"number","nodeType":"YulLiteral","src":"21243:2:26","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21216:6:26"},"nodeType":"YulFunctionCall","src":"21216:30:26"},"nodeType":"YulExpressionStatement","src":"21216:30:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21266:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21277:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21262:3:26"},"nodeType":"YulFunctionCall","src":"21262:18:26"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c","kind":"string","nodeType":"YulLiteral","src":"21282:34:26","type":"","value":"ECDSA: invalid signature 's' val"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21255:6:26"},"nodeType":"YulFunctionCall","src":"21255:62:26"},"nodeType":"YulExpressionStatement","src":"21255:62:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21337:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21348:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21333:3:26"},"nodeType":"YulFunctionCall","src":"21333:18:26"},{"hexValue":"7565","kind":"string","nodeType":"YulLiteral","src":"21353:4:26","type":"","value":"ue"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21326:6:26"},"nodeType":"YulFunctionCall","src":"21326:32:26"},"nodeType":"YulExpressionStatement","src":"21326:32:26"},{"nodeType":"YulAssignment","src":"21367:27:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21379:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21390:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21375:3:26"},"nodeType":"YulFunctionCall","src":"21375:19:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21367:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21153:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21167:4:26","type":""}],"src":"21002:398:26"},{"body":{"nodeType":"YulBlock","src":"21579:224:26","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21596:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21607:2:26","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21589:6:26"},"nodeType":"YulFunctionCall","src":"21589:21:26"},"nodeType":"YulExpressionStatement","src":"21589:21:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21630:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21641:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21626:3:26"},"nodeType":"YulFunctionCall","src":"21626:18:26"},{"kind":"number","nodeType":"YulLiteral","src":"21646:2:26","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21619:6:26"},"nodeType":"YulFunctionCall","src":"21619:30:26"},"nodeType":"YulExpressionStatement","src":"21619:30:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21669:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21680:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21665:3:26"},"nodeType":"YulFunctionCall","src":"21665:18:26"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202776272076616c","kind":"string","nodeType":"YulLiteral","src":"21685:34:26","type":"","value":"ECDSA: invalid signature 'v' val"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21658:6:26"},"nodeType":"YulFunctionCall","src":"21658:62:26"},"nodeType":"YulExpressionStatement","src":"21658:62:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21740:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21751:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21736:3:26"},"nodeType":"YulFunctionCall","src":"21736:18:26"},{"hexValue":"7565","kind":"string","nodeType":"YulLiteral","src":"21756:4:26","type":"","value":"ue"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21729:6:26"},"nodeType":"YulFunctionCall","src":"21729:32:26"},"nodeType":"YulExpressionStatement","src":"21729:32:26"},{"nodeType":"YulAssignment","src":"21770:27:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21782:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21793:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21778:3:26"},"nodeType":"YulFunctionCall","src":"21778:19:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21770:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21556:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21570:4:26","type":""}],"src":"21405:398:26"},{"body":{"nodeType":"YulBlock","src":"21989:217:26","statements":[{"nodeType":"YulAssignment","src":"21999:27:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22011:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"22022:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22007:3:26"},"nodeType":"YulFunctionCall","src":"22007:19:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21999:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22042:9:26"},{"name":"value0","nodeType":"YulIdentifier","src":"22053:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22035:6:26"},"nodeType":"YulFunctionCall","src":"22035:25:26"},"nodeType":"YulExpressionStatement","src":"22035:25:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22080:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"22091:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22076:3:26"},"nodeType":"YulFunctionCall","src":"22076:18:26"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"22100:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"22108:4:26","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22096:3:26"},"nodeType":"YulFunctionCall","src":"22096:17:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22069:6:26"},"nodeType":"YulFunctionCall","src":"22069:45:26"},"nodeType":"YulExpressionStatement","src":"22069:45:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22134:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"22145:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22130:3:26"},"nodeType":"YulFunctionCall","src":"22130:18:26"},{"name":"value2","nodeType":"YulIdentifier","src":"22150:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22123:6:26"},"nodeType":"YulFunctionCall","src":"22123:34:26"},"nodeType":"YulExpressionStatement","src":"22123:34:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22177:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"22188:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22173:3:26"},"nodeType":"YulFunctionCall","src":"22173:18:26"},{"name":"value3","nodeType":"YulIdentifier","src":"22193:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22166:6:26"},"nodeType":"YulFunctionCall","src":"22166:34:26"},"nodeType":"YulExpressionStatement","src":"22166:34:26"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21934:9:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"21945:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"21953:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21961:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21969:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21980:4:26","type":""}],"src":"21808:398:26"},{"body":{"nodeType":"YulBlock","src":"22385:174:26","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22402:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"22413:2:26","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22395:6:26"},"nodeType":"YulFunctionCall","src":"22395:21:26"},"nodeType":"YulExpressionStatement","src":"22395:21:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22436:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"22447:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22432:3:26"},"nodeType":"YulFunctionCall","src":"22432:18:26"},{"kind":"number","nodeType":"YulLiteral","src":"22452:2:26","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22425:6:26"},"nodeType":"YulFunctionCall","src":"22425:30:26"},"nodeType":"YulExpressionStatement","src":"22425:30:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22475:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"22486:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22471:3:26"},"nodeType":"YulFunctionCall","src":"22471:18:26"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","kind":"string","nodeType":"YulLiteral","src":"22491:26:26","type":"","value":"ECDSA: invalid signature"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22464:6:26"},"nodeType":"YulFunctionCall","src":"22464:54:26"},"nodeType":"YulExpressionStatement","src":"22464:54:26"},{"nodeType":"YulAssignment","src":"22527:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22539:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"22550:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22535:3:26"},"nodeType":"YulFunctionCall","src":"22535:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22527:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22362:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22376:4:26","type":""}],"src":"22211:348:26"},{"body":{"nodeType":"YulBlock","src":"22685:98:26","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22702:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"22713:2:26","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22695:6:26"},"nodeType":"YulFunctionCall","src":"22695:21:26"},"nodeType":"YulExpressionStatement","src":"22695:21:26"},{"nodeType":"YulAssignment","src":"22725:52:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22750:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22762:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"22773:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22758:3:26"},"nodeType":"YulFunctionCall","src":"22758:18:26"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"22733:16:26"},"nodeType":"YulFunctionCall","src":"22733:44:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22725:4:26"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22654:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22665:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22676:4:26","type":""}],"src":"22564:219:26"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_uint256t_bytes_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := abi_decode_address(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        let offset_1 := calldataload(add(headStart, 160))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_bytes_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let array_1 := allocate_memory(add(and(add(_1, 0x1f), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0), 0x20))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), 0)\n        array := array_1\n    }\n    function abi_decode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        let dst := allocate_memory(array_allocation_size_array_bytes_dyn(_4))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _1)\n        let srcEnd := add(add(_3, shl(5, _4)), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            let innerOffset := calldataload(src)\n            if gt(innerOffset, _2)\n            {\n                let _5 := 0\n                revert(_5, _5)\n            }\n            mstore(dst, abi_decode_bytes(add(add(_3, innerOffset), _1), dataEnd))\n            dst := add(dst, _1)\n        }\n        value0 := dst_1\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_struct$_UserOperation_$909_calldata_ptrt_bytes32t_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if slt(sub(dataEnd, _1), 352) { revert(0, 0) }\n        value0 := _1\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptr(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let dst := allocate_memory(array_allocation_size_array_bytes_dyn(_3))\n        let dst_1 := dst\n        mstore(dst, _3)\n        dst := add(dst, _1)\n        let srcEnd := add(add(_2, shl(5, _3)), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, abi_decode_address(src))\n            dst := add(dst, _1)\n        }\n        value0 := dst_1\n    }\n    function abi_encode_tuple_t_contract$_IEntryPoint_$758__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_bytes_calldata(add(headStart, offset_2), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_encode_tuple_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__to_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let tail_2 := add(add(headStart, shl(5, length)), 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0))\n            tail_2 := abi_encode_bytes(mload(srcPtr), tail_2)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_encode_tuple_t_stringliteral_24902e8dc56a5c691f0b6047c774684c122d74c2b2b5241f387104478768b569__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"only entry point or wallet facto\")\n        mstore(add(headStart, 96), \"ry can call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_046f63b53432b31c38dcec6b5f05e3d65602d684f9163a89310aaaf94e08558e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"wrong array lengths\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_200ffcddc5999f8f8cc5e29beb35e90fc602bae6d6023fa77e27cdc95bdcc448__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"wrong values lengths\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function access_calldata_tail_t_bytes_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_address_t_rational_0_by_1__to_t_address_t_uint192__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_stringliteral_2425ea74e68e4bcd365d89824a06e1475543dcbb6a12bf699e5abf6b11b9b6ed__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: upgrade breaks f\")\n        mstore(add(headStart, 96), \"urther upgrades\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f684c2c0c9ec797849b62669189fe025e9077c00ba7812987ce38c0071ad7a50__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"account: not from EntryPoint\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_788f6686002b78bf87a5d2bb43a41d3facc8f0725c661cc11a8fea8d1d606572__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 9)\n        mstore(add(headStart, 64), \"no owners\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), 0xffffffffffffffffffffffffffffffffffffffff))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC1967: new implementation is n\")\n        mstore(add(headStart, 96), \"ot a contract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73_t_bytes32__to_t_string_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000)\n        mstore(add(pos, 28), value0)\n        end := add(pos, 60)\n    }\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature length\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: delegate call to non-co\")\n        mstore(add(headStart, 96), \"ntract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 's' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 'v' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n}","id":26,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"2617":[{"length":32,"start":999},{"length":32,"start":1613},{"length":32,"start":2766},{"length":32,"start":3405}],"2620":[{"length":32,"start":820},{"length":32,"start":1550},{"length":32,"start":2203},{"length":32,"start":2703},{"length":32,"start":3081},{"length":32,"start":3271},{"length":32,"start":3342},{"length":32,"start":4203},{"length":32,"start":5003}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4F1EF286 GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0xBC197C81 GT PUSH2 0x74 JUMPI DUP1 PUSH4 0xC5C03699 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xC5C03699 EQ PUSH2 0x3D5 JUMPI DUP1 PUSH4 0xD087D288 EQ PUSH2 0x409 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x41E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x378 JUMPI DUP1 PUSH4 0xC399EC88 EQ PUSH2 0x3C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0xA224CEE7 EQ PUSH2 0x305 JUMPI DUP1 PUSH4 0xB0D691FE EQ PUSH2 0x325 JUMPI DUP1 PUSH4 0xB61D27F6 EQ PUSH2 0x358 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1D06D40D GT PUSH2 0xFC JUMPI DUP1 PUSH4 0x3A871CDD GT PUSH2 0xE1 JUMPI DUP1 PUSH4 0x3A871CDD EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0x47E1DA2A EQ PUSH2 0x2CA JUMPI DUP1 PUSH4 0x4A58DB19 EQ PUSH2 0x2EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1D06D40D EQ PUSH2 0x24F JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x27C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x23DE29 EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0x25E7C27 EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x1D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x133 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D PUSH2 0x153 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B23 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17F PUSH2 0x17A CALLDATASIZE PUSH1 0x4 PUSH2 0x1BCE JUMP JUMPDEST PUSH2 0x464 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B4 PUSH2 0x1AF CALLDATASIZE PUSH1 0x4 PUSH2 0x1C10 JUMP JUMPDEST PUSH2 0x549 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x18B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21E PUSH2 0x1F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C29 JUMP JUMPDEST PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x18B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26F PUSH2 0x26A CALLDATASIZE PUSH1 0x4 PUSH2 0x1DC8 JUMP JUMPDEST PUSH2 0x580 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18B SWAP2 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x288 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EFF JUMP JUMPDEST PUSH2 0x5A9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x2B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F1A JUMP JUMPDEST PUSH2 0x5D0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x18B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D PUSH2 0x2E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FB3 JUMP JUMPDEST PUSH2 0x5F6 JUMP JUMPDEST PUSH2 0x15D PUSH2 0x899 JUMP JUMPDEST PUSH2 0x15D PUSH2 0x300 CALLDATASIZE PUSH1 0x4 PUSH2 0x204D JUMP JUMPDEST PUSH2 0x93F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x311 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D PUSH2 0x320 CALLDATASIZE PUSH1 0x4 PUSH2 0x209B JUMP JUMPDEST PUSH2 0x958 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x331 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x0 PUSH2 0x1B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x364 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D PUSH2 0x373 CALLDATASIZE PUSH1 0x4 PUSH2 0x2133 JUMP JUMPDEST PUSH2 0xA77 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x384 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21E PUSH2 0x393 CALLDATASIZE PUSH1 0x4 PUSH2 0x218D JUMP JUMPDEST PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0xBC3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B4 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x415 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0xC7A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21E PUSH2 0x439 CALLDATASIZE PUSH1 0x4 PUSH2 0x2227 JUMP JUMPDEST PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x4F7 JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x4E2312E000000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x543 JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x593 SWAP2 SWAP1 PUSH2 0x228D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5B2 DUP2 PUSH2 0xCF6 JUMP JUMPDEST PUSH2 0x5CD DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH1 0x0 PUSH2 0xDFB JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5DA PUSH2 0x1053 JUMP JUMPDEST PUSH2 0x5E4 DUP5 DUP5 PUSH2 0x10F4 JUMP JUMPDEST SWAP1 POP PUSH2 0x5EF DUP3 PUSH2 0x1222 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0x66F JUMPI POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ JUMPDEST PUSH2 0x700 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C7920656E74727920706F696E74206F722077616C6C657420666163746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72792063616E2063616C6C000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 DUP2 EQ PUSH2 0x769 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x77726F6E67206172726179206C656E6774687300000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6F7 JUMP JUMPDEST DUP3 DUP2 EQ PUSH2 0x7D2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x77726F6E672076616C756573206C656E67746873000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x890 JUMPI PUSH2 0x87E DUP8 DUP8 DUP4 DUP2 DUP2 LT PUSH2 0x7F2 JUMPI PUSH2 0x7F2 PUSH2 0x230D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x807 SWAP2 SWAP1 PUSH2 0x1EFF JUMP JUMPDEST DUP7 DUP7 DUP5 DUP2 DUP2 LT PUSH2 0x819 JUMPI PUSH2 0x819 PUSH2 0x230D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0x832 JUMPI PUSH2 0x832 PUSH2 0x230D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x844 SWAP2 SWAP1 PUSH2 0x233C JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x128D SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x888 DUP2 PUSH2 0x23A1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x7D5 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0xB760FAF900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0xB760FAF9 SWAP1 CALLVALUE SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x924 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x938 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x948 DUP3 PUSH2 0xCF6 JUMP JUMPDEST PUSH2 0x954 DUP3 DUP3 PUSH1 0x1 PUSH2 0xDFB JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x971 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x9FD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xA3C JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 AND PUSH2 0x101 OR SWAP1 SSTORE JUMPDEST PUSH2 0xA45 DUP3 PUSH2 0x130A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x954 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND SWAP1 SSTORE POP POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0xAF0 JUMPI POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ JUMPDEST PUSH2 0xB7C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C7920656E74727920706F696E74206F722077616C6C657420666163746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72792063616E2063616C6C000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH2 0xBBD DUP5 DUP5 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x128D SWAP3 POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC51 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC75 SWAP2 SWAP1 PUSH2 0x2400 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x35567E1A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x24 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x35567E1A SWAP1 PUSH1 0x44 ADD PUSH2 0xC34 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0xD6F JUMPI POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ JUMPDEST PUSH2 0x5CD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C7920656E74727920706F696E74206F722077616C6C657420666163746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72792063616E2063616C6C000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE3B PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0xE46 DUP5 PUSH2 0x13FA JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT DUP1 PUSH2 0xE53 JUMPI POP DUP2 JUMPDEST ISZERO PUSH2 0xE64 JUMPI PUSH2 0xE62 DUP5 DUP5 PUSH2 0x14EE JUMP JUMPDEST POP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x938 JUMPI DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR DUP2 SSTORE PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0xF5A SWAP1 DUP7 SWAP1 PUSH1 0x44 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x3659CFE600000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x14EE JUMP JUMPDEST POP DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 SSTORE PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 AND EQ PUSH2 0x104A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A207570677261646520627265616B732066 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7572746865722075706772616465730000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH2 0x938 DUP6 PUSH2 0x1513 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x10F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6163636F756E743A206E6F742066726F6D20456E747279506F696E7400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6F7 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x114E DUP4 PUSH1 0x40 MLOAD PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3C DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x5C ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1160 PUSH2 0x140 DUP7 ADD DUP7 PUSH2 0x233C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x116D SWAP2 SWAP1 PUSH2 0x1DC8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x1 SLOAD DUP2 LT ISZERO PUSH2 0x1216 JUMPI PUSH2 0x11A8 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1191 JUMPI PUSH2 0x1191 PUSH2 0x230D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH2 0x1560 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x11D1 JUMPI PUSH2 0x11D1 PUSH2 0x230D JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1204 JUMPI PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x543 JUMP JUMPDEST DUP1 PUSH2 0x120E DUP2 PUSH2 0x23A1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1172 JUMP JUMPDEST POP PUSH1 0x0 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5CD JUMPI PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 CALLER SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP5 SWAP1 DUP5 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x938 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x938 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x12B6 SWAP2 SWAP1 PUSH2 0x2419 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x12F3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x12F8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x938 JUMPI DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x1375 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6E6F206F776E6572730000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6F7 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1388 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x1A12 JUMP JUMPDEST POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8AFFFD56ADB385A94A6B7426D4E3F51E2F9DE8984C19093C2DDCCF8FCFDDFE8D DUP3 PUSH1 0x40 MLOAD PUSH2 0x13EF SWAP2 SWAP1 PUSH2 0x2435 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST DUP1 EXTCODESIZE PUSH2 0x1488 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5EF DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2490 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x161C JUMP JUMPDEST PUSH2 0x151C DUP2 PUSH2 0x13FA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x41 SUB PUSH2 0x1593 JUMPI PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0x1589 DUP7 DUP3 DUP6 DUP6 PUSH2 0x172E JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x543 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 SUB PUSH2 0x15BA JUMPI PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x15B1 DUP6 DUP4 DUP4 PUSH2 0x1986 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x543 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x60 DUP4 EXTCODESIZE PUSH2 0x16AC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E74726163740000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x16D4 SWAP2 SWAP1 PUSH2 0x2419 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x170F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1714 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1724 DUP3 DUP3 DUP7 PUSH2 0x19BF JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP3 GT ISZERO PUSH2 0x17E0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST DUP4 PUSH1 0xFF AND PUSH1 0x1B EQ DUP1 PUSH2 0x17F5 JUMPI POP DUP4 PUSH1 0xFF AND PUSH1 0x1C EQ JUMPDEST PUSH2 0x1881 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202776272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP9 SWAP1 MSTORE PUSH1 0xFF DUP8 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18D5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD SWAP2 POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x197D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6F7 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0xFF DUP4 SWAP1 SHR PUSH1 0x1B ADD PUSH2 0x1724 DUP7 DUP3 DUP8 DUP6 PUSH2 0x172E JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x19CE JUMPI POP DUP2 PUSH2 0x5EF JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x19DE JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6F7 SWAP2 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x1A8C JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1A8C JUMPI DUP3 MLOAD DUP3 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1A32 JUMP JUMPDEST POP PUSH2 0x1A98 SWAP3 SWAP2 POP PUSH2 0x1A9C JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1A98 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1A9D JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1AD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1AEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1B1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x1B3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B48 DUP10 PUSH2 0x1AB1 JUMP JUMPDEST SWAP8 POP PUSH2 0x1B56 PUSH1 0x20 DUP11 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP7 POP PUSH2 0x1B64 PUSH1 0x40 DUP11 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1B88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B94 DUP13 DUP4 DUP14 ADD PUSH2 0x1ADA JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0xA0 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1BAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BBA DUP12 DUP3 DUP13 ADD PUSH2 0x1ADA JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x5EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1C41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C4A DUP7 PUSH2 0x1AB1 JUMP JUMPDEST SWAP5 POP PUSH2 0x1C58 PUSH1 0x20 DUP8 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C87 DUP9 DUP3 DUP10 ADD PUSH2 0x1ADA JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1D0E JUMPI PUSH2 0x1D0E PUSH2 0x1C98 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1D30 JUMPI PUSH2 0x1D30 PUSH2 0x1C98 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D65 JUMPI PUSH2 0x1D65 PUSH2 0x1C98 JUMP JUMPDEST PUSH2 0x1D96 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x1CC7 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1DAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1DDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1DF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1E1A PUSH2 0x1E15 DUP3 PUSH2 0x1D16 JUMP JUMPDEST PUSH2 0x1CC7 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP9 DUP4 GT ISZERO PUSH2 0x1E39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 ADD JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1E71 JUMPI DUP1 CALLDATALOAD DUP6 DUP2 GT ISZERO PUSH2 0x1E55 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1E63 DUP12 DUP10 DUP4 DUP11 ADD ADD PUSH2 0x1D3A JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x1E3D JUMP JUMPDEST POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1E99 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1E81 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1EBA DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1E7E JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x5EF PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1EA2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5EF DUP3 PUSH2 0x1AB1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1F2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 ADD PUSH2 0x160 DUP2 DUP8 SUB SLT ISZERO PUSH2 0x1F59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 SWAP1 SWAP5 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1F80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1B1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1FCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1FE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FF0 DUP11 DUP4 DUP12 ADD PUSH2 0x1F6E JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2009 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2015 DUP11 DUP4 DUP12 ADD PUSH2 0x1F6E JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x202E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x203B DUP10 DUP3 DUP11 ADD PUSH2 0x1F6E JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2060 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2069 DUP4 PUSH2 0x1AB1 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2085 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2091 DUP6 DUP3 DUP7 ADD PUSH2 0x1D3A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x20AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x20C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x20D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x20E4 PUSH2 0x1E15 DUP3 PUSH2 0x1D16 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD DUP4 ADD SWAP1 DUP4 DUP2 ADD SWAP1 DUP8 DUP4 GT ISZERO PUSH2 0x2103 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 DUP5 ADD SWAP3 JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0x2128 JUMPI PUSH2 0x2119 DUP5 PUSH2 0x1AB1 JUMP JUMPDEST DUP3 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH2 0x2108 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2149 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2152 DUP6 PUSH2 0x1AB1 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2175 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2181 DUP8 DUP3 DUP9 ADD PUSH2 0x1ADA JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x21A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x21B2 DUP10 PUSH2 0x1AB1 JUMP JUMPDEST SWAP8 POP PUSH2 0x21C0 PUSH1 0x20 DUP11 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x21DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x21E9 DUP13 DUP4 DUP14 ADD PUSH2 0x1F6E JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x220E DUP13 DUP4 DUP14 ADD PUSH2 0x1F6E JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1BAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x2240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2249 DUP8 PUSH2 0x1AB1 JUMP JUMPDEST SWAP6 POP PUSH2 0x2257 PUSH1 0x20 DUP9 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x203B DUP10 DUP3 DUP11 ADD PUSH2 0x1ADA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2300 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x22EE DUP6 DUP4 MLOAD PUSH2 0x1EA2 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x22B4 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x238C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x1B1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x23F9 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2412 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x242B DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1E7E JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2483 JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2451 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x7066735822122031F6EE RETURN 0xAC DUP7 0xD9 DUP16 SWAP9 0xD5 PUSH27 0x8938E28D1C235D7AC68EA2EB09A7F7E5E54FD1FE4364736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"518:3116:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;581:176:0;;;;;;;;;;-1:-1:-1;581:176:0;;;;;:::i;:::-;;;;;;;;;;;;1489:298;;;;;;;;;;-1:-1:-1;1489:298:0;;;;;:::i;:::-;;:::i;:::-;;;2084:14:26;;2077:22;2059:41;;2047:2;2032:18;1489:298:0;;;;;;;;746:23:23;;;;;;;;;;-1:-1:-1;746:23:23;;;;;:::i;:::-;;:::i;:::-;;;2472:42:26;2460:55;;;2442:74;;2430:2;2415:18;746:23:23;2296:226:26;763:212:0;;;;;;;;;;-1:-1:-1;763:212:0;;;;;:::i;:::-;927:41;763:212;;;;;;;;;;;3332:66:26;3320:79;;;3302:98;;3290:2;3275:18;763:212:0;3158:248:26;2996:148:23;;;;;;;;;;-1:-1:-1;2996:148:23;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;980:186:14:-;;;;;;;;;;-1:-1:-1;980:186:14;;;;;:::i;:::-;;:::i;1458:353:1:-;;;;;;;;;;-1:-1:-1;1458:353:1;;;;;:::i;:::-;;:::i;:::-;;;7534:25:26;;;7522:2;7507:18;1458:353:1;7388:177:26;1548:432:23;;;;;;;;;;-1:-1:-1;1548:432:23;;;;;:::i;:::-;;:::i;3375:109::-;;;:::i;1415:214:14:-;;;;;;:::i;:::-;;:::i;1243:114:23:-;;;;;;;;;;-1:-1:-1;1243:114:23;;;;;:::i;:::-;;:::i;3150:100::-;;;;;;;;;;-1:-1:-1;3232:11:23;3150:100;;1363:179;;;;;;;;;;-1:-1:-1;1363:179:23;;;;;:::i;:::-;;:::i;1219:264:0:-;;;;;;;;;;-1:-1:-1;1219:264:0;;;;;:::i;:::-;1428:48;1219:264;;;;;;;;;;;3256:113:23;;;;;;;;;;;;;:::i;655:38::-;;;;;;;;;;;;;;;935:121:1;;;;;;;;;;;;;:::i;981:232:0:-;;;;;;;;;;-1:-1:-1;981:232:0;;;;;:::i;:::-;1163:43;981:232;;;;;;;;;1489:298;1576:4;1611:48;;;1626:33;1611:48;;:113;;-1:-1:-1;1675:49:0;;;1690:34;1675:49;1611:113;:169;;;-1:-1:-1;1740:40:0;;;1755:25;1740:40;1611:169;1592:188;1489:298;-1:-1:-1;;1489:298:0:o;746:23:23:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;746:23:23;:::o;2996:148::-;3084:12;3126:10;3115:22;;;;;;;;:::i;:::-;;;;;;;;;;;;;3108:29;;2996:148;;;:::o;980:186:14:-;1053:36;1071:17;1053;:36::i;:::-;1099:60;1123:17;1142:9;;;;;;;;;;;;1153:5;1099:23;:60::i;:::-;980:186;:::o;1458:353:1:-;1601:22;1635:24;:22;:24::i;:::-;1686:38;1705:6;1713:10;1686:18;:38::i;:::-;1669:55;;1772:32;1784:19;1772:11;:32::i;:::-;1458:353;;;;;:::o;1548:432:23:-;930:10;:34;952:11;930:34;;;:65;;-1:-1:-1;968:10:23;:27;982:13;968:27;;930:65;909:155;;;;;;;14132:2:26;909:155:23;;;14114:21:26;14171:2;14151:18;;;14144:30;14210:34;14190:18;;;14183:62;14281:13;14261:18;;;14254:41;14312:19;;909:155:23;;;;;;;;;1736:28;;::::1;1728:60;;;::::0;::::1;::::0;;14544:2:26;1728:60:23::1;::::0;::::1;14526:21:26::0;14583:2;14563:18;;;14556:30;14622:21;14602:18;;;14595:49;14661:18;;1728:60:23::1;14342:343:26::0;1728:60:23::1;1806:29:::0;;::::1;1798:62;;;::::0;::::1;::::0;;14892:2:26;1798:62:23::1;::::0;::::1;14874:21:26::0;14931:2;14911:18;;;14904:30;14970:22;14950:18;;;14943:50;15010:18;;1798:62:23::1;14690:344:26::0;1798:62:23::1;1875:9;1870:104;1890:16:::0;;::::1;1870:104;;;1927:36;1933:5;;1939:1;1933:8;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;1943:6;;1950:1;1943:9;;;;;;;:::i;:::-;;;;;;;1954:5;;1960:1;1954:8;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;1927:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;;;;-1:-1:-1;1927:5:23::1;::::0;-1:-1:-1;;;1927:36:23:i:1;:::-;1908:3:::0;::::1;::::0;::::1;:::i;:::-;;;;1870:104;;;;1548:432:::0;;;;;;:::o;3375:109::-;3232:11;3422:55;;;;;3471:4;3422:55;;;2442:74:26;3422:22:23;;;;;;;;3452:9;;2415:18:26;;3422:55:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3375:109::o;1415:214:14:-;1522:36;1540:17;1522;:36::i;:::-;1568:54;1592:17;1611:4;1617;1568:23;:54::i;:::-;1415:214;;:::o;1243:114:23:-;1409:13:13;;;;;;;;:30;;-1:-1:-1;1427:12:13;;;;1426:13;1409:30;1401:89;;;;;;;16369:2:26;1401:89:13;;;16351:21:26;16408:2;16388:18;;;16381:30;16447:34;16427:18;;;16420:62;16518:16;16498:18;;;16491:44;16552:19;;1401:89:13;16167:410:26;1401:89:13;1501:19;1524:13;;;;;;1523:14;1547:98;;;;1581:13;:20;;1615:19;;;;;;1547:98;1324:26:23::1;1336:13;1324:11;:26::i;:::-;1671:14:13::0;1667:66;;;1717:5;1701:21;;;;;;1391:348;1243:114:23;:::o;1363:179::-;930:10;:34;952:11;930:34;;;:65;;-1:-1:-1;968:10:23;:27;982:13;968:27;;930:65;909:155;;;;;;;14132:2:26;909:155:23;;;14114:21:26;14171:2;14151:18;;;14144:30;14210:34;14190:18;;;14183:62;14281:13;14261:18;;;14254:41;14312:19;;909:155:23;13930:407:26;909:155:23;1511:24:::1;1517:4;1523:5;1530:4;;1511:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;;;;-1:-1:-1;1511:5:23::1;::::0;-1:-1:-1;;;1511:24:23:i:1;:::-;1363:179:::0;;;;:::o;3256:113::-;3325:37;;;;;3356:4;3325:37;;;2442:74:26;3299:7:23;;3325:22;3232:11;3325:22;;;;2415:18:26;;3325:37:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3318:44;;3256:113;:::o;935:121:1:-;1010:39;;;;;1040:4;1010:39;;;16953:74:26;984:7:1;17043:18:26;;;17036:91;;;984:7:1;1010:21;3232:11:23;1010:21:1;;;;16926:18:26;;1010:39:1;16771:362:26;3490:107:23;930:10;:34;952:11;930:34;;;:65;;-1:-1:-1;968:10:23;:27;982:13;968:27;;930:65;909:155;;;;;;;14132:2:26;909:155:23;;;14114:21:26;14171:2;14151:18;;;14144:30;14210:34;14190:18;;;14183:62;14281:13;14261:18;;;14254:41;14312:19;;909:155:23;13930:407:26;2558:1232:10;2702:25;2730:20;938:66;1288:54;;;;1209:140;2730:20;2702:48;;2803:37;2822:17;2803:18;:37::i;:::-;2868:1;2854:4;:11;:15;:28;;;;2873:9;2854:28;2850:112;;;2898:53;2927:17;2946:4;2898:28;:53::i;:::-;;2850:112;597:66;3139:21;;;;3134:650;;3252:28;;;;3276:4;3252:28;;;3375:64;;2472:42:26;2460:55;;3375:64:10;;;2442:74:26;3294:159:10;;3340:17;;2415:18:26;;3375:64:10;;;;;;;;;;;;;;;;;;;;;;;;3294:28;:159::i;:::-;-1:-1:-1;3467:29:10;;;;;;938:66;1288:54;;3562:41;;;1288:54;;3562:41;3554:101;;;;;;;17340:2:26;3554:101:10;;;17322:21:26;17379:2;17359:18;;;17352:30;17418:34;17398:18;;;17391:62;17489:17;17469:18;;;17462:45;17524:19;;3554:101:10;17138:411:26;3554:101:10;3744:29;3755:17;3744:10;:29::i;1892:149:1:-;1966:10;:35;3232:11:23;1966:35:1;;1958:76;;;;;;;17756:2:26;1958:76:1;;;17738:21:26;17795:2;17775:18;;;17768:30;17834;17814:18;;;17807:58;17882:18;;1958:76:1;17554:352:26;1958:76:1;1892:149::o;1986:489:23:-;2119:7;2138:12;2153:35;:10;5240:58:20;;20092:66:26;5240:58:20;;;20080:79:26;20175:12;;;20168:28;;;5110:7:20;;20212:12:26;;5240:58:20;;;;;;;;;;;;5230:69;;;;;;5223:76;;5041:265;;;;2153:35:23;2138:50;-1:-1:-1;2198:25:23;2237:16;;;;:6;:16;:::i;:::-;2226:39;;;;;;;:::i;:::-;2198:67;;2281:9;2276:175;2300:6;:13;2296:17;;2276:175;;;2351:27;2364:10;2375:1;2364:13;;;;;;;;:::i;:::-;;;;;;;2351:4;:12;;:27;;;;:::i;:::-;2338:40;;:6;2345:1;2338:9;;;;;;;;:::i;:::-;;;;;;;;;;;;;:40;2334:107;;746:1:1;2398:28:23;;;;;;;2334:107;2315:3;;;;:::i;:::-;;;;2276:175;;;-1:-1:-1;2467:1:23;;1986:489;-1:-1:-1;;;;;1986:489:23:o;4316:337:1:-;4397:24;;4393:254;;4455:82;;4438:12;;4463:10;;4515:17;;4488:19;;4438:12;4455:82;4438:12;4455:82;4488:19;4463:10;4515:17;4455:82;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2704:286:23;2789:12;2803:19;2826:6;:11;;2845:5;2852:4;2826:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2788:69;;;;2872:7;2867:117;;2952:6;2946:13;2941:2;2933:6;2929:15;2922:38;2481:217;2584:1;2561:13;:20;:24;2553:46;;;;;;;18615:2:26;2553:46:23;;;18597:21:26;18654:1;18634:18;;;18627:29;18692:11;18672:18;;;18665:39;18721:18;;2553:46:23;18413:332:26;2553:46:23;2609:22;;;;:6;;:22;;;;;:::i;:::-;;2664:11;2646:45;;;2677:13;2646:45;;;;;;:::i;:::-;;;;;;;;2481:217;:::o;1440:259:10:-;1034:20:25;;1513:95:10;;;;;;;19638:2:26;1513:95:10;;;19620:21:26;19677:2;19657:18;;;19650:30;19716:34;19696:18;;;19689:62;19787:15;19767:18;;;19760:43;19820:19;;1513:95:10;19436:409:26;1513:95:10;938:66;1618:74;;;;;;;;;;;;;;;1440:259::o;6172:198:25:-;6255:12;6286:77;6307:6;6315:4;6286:77;;;;;;;;;;;;;;;;;:20;:77::i;1805:152:10:-;1871:37;1890:17;1871:18;:37::i;:::-;1923:27;;;;;;;;;;;1805:152;:::o;1288:1241:20:-;1366:7;1582:9;:16;1602:2;1582:22;1578:945;;1871:4;1856:20;;1850:27;1920:4;1905:20;;1899:27;1977:4;1962:20;;1956:27;1620:9;1948:36;2018:22;2026:4;1948:36;1850:27;1899;2018:7;:22::i;:::-;2011:29;;;;;;;1578:945;2061:9;:16;2081:2;2061:22;2057:466;;2330:4;2315:20;;2309:27;2380:4;2365:20;;2359:27;2420:20;2428:4;2309:27;2359;2420:7;:20::i;:::-;2413:27;;;;;;2057:466;2471:41;;;;;20437:2:26;2471:41:20;;;20419:21:26;20476:2;20456:18;;;20449:30;20515:33;20495:18;;;20488:61;20566:18;;2471:41:20;20235:355:26;6556:388:25;6697:12;1034:20;;6721:69;;;;;;;20797:2:26;6721:69:25;;;20779:21:26;20836:2;20816:18;;;20809:30;20875:34;20855:18;;;20848:62;20946:8;20926:18;;;20919:36;20972:19;;6721:69:25;20595:402:26;6721:69:25;6802:12;6816:23;6843:6;:19;;6863:4;6843:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6801:67;;;;6885:52;6903:7;6912:10;6924:12;6885:17;:52::i;:::-;6878:59;6556:388;-1:-1:-1;;;;;;6556:388:25:o;3265:1486:20:-;3388:7;4316:66;4302:80;;;4281:161;;;;;;;21204:2:26;4281:161:20;;;21186:21:26;21243:2;21223:18;;;21216:30;21282:34;21262:18;;;21255:62;21353:4;21333:18;;;21326:32;21375:19;;4281:161:20;21002:398:26;4281:161:20;4460:1;:7;;4465:2;4460:7;:18;;;;4471:1;:7;;4476:2;4471:7;4460:18;4452:65;;;;;;;21607:2:26;4452:65:20;;;21589:21:26;21646:2;21626:18;;;21619:30;21685:34;21665:18;;;21658:62;21756:4;21736:18;;;21729:32;21778:19;;4452:65:20;21405:398:26;4452:65:20;4629:24;;;4612:14;4629:24;;;;;;;;;22035:25:26;;;22108:4;22096:17;;22076:18;;;22069:45;;;;22130:18;;;22123:34;;;22173:18;;;22166:34;;;4629:24:20;;22007:19:26;;4629:24:20;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4629:24:20;;;;;;-1:-1:-1;;4671:20:20;;;4663:57;;;;;;;22413:2:26;4663:57:20;;;22395:21:26;22452:2;22432:18;;;22425:30;22491:26;22471:18;;;22464:54;22535:18;;4663:57:20;22211:348:26;4663:57:20;4738:6;3265:1486;-1:-1:-1;;;;;3265:1486:20:o;2780:359::-;2887:7;2978:66;2970:75;;3071:3;3067:12;;;3081:2;3063:21;3110:22;3118:4;3063:21;3127:1;2970:75;3110:7;:22::i;6950:692:25:-;7096:12;7124:7;7120:516;;;-1:-1:-1;7154:10:25;7147:17;;7120:516;7265:17;;:21;7261:365;;7459:10;7453:17;7519:15;7506:10;7502:2;7498:19;7491:44;7261:365;7598:12;7591:20;;;;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:196:26;82:20;;142:42;131:54;;121:65;;111:93;;200:1;197;190:12;111:93;14:196;;;:::o;215:347::-;266:8;276:6;330:3;323:4;315:6;311:17;307:27;297:55;;348:1;345;338:12;297:55;-1:-1:-1;371:20:26;;414:18;403:30;;400:50;;;446:1;443;436:12;400:50;483:4;475:6;471:17;459:29;;535:3;528:4;519:6;511;507:19;503:30;500:39;497:59;;;552:1;549;542:12;497:59;215:347;;;;;:::o;567:1010::-;693:6;701;709;717;725;733;741;749;802:3;790:9;781:7;777:23;773:33;770:53;;;819:1;816;809:12;770:53;842:29;861:9;842:29;:::i;:::-;832:39;;890:38;924:2;913:9;909:18;890:38;:::i;:::-;880:48;;947:38;981:2;970:9;966:18;947:38;:::i;:::-;937:48;;1032:2;1021:9;1017:18;1004:32;994:42;;1087:3;1076:9;1072:19;1059:33;1111:18;1152:2;1144:6;1141:14;1138:34;;;1168:1;1165;1158:12;1138:34;1207:58;1257:7;1248:6;1237:9;1233:22;1207:58;:::i;:::-;1284:8;;-1:-1:-1;1181:84:26;-1:-1:-1;1372:3:26;1357:19;;1344:33;;-1:-1:-1;1389:16:26;;;1386:36;;;1418:1;1415;1408:12;1386:36;;1457:60;1509:7;1498:8;1487:9;1483:24;1457:60;:::i;:::-;567:1010;;;;-1:-1:-1;567:1010:26;;-1:-1:-1;567:1010:26;;;;;;1536:8;-1:-1:-1;;;567:1010:26:o;1582:332::-;1640:6;1693:2;1681:9;1672:7;1668:23;1664:32;1661:52;;;1709:1;1706;1699:12;1661:52;1748:9;1735:23;1798:66;1791:5;1787:78;1780:5;1777:89;1767:117;;1880:1;1877;1870:12;2111:180;2170:6;2223:2;2211:9;2202:7;2198:23;2194:32;2191:52;;;2239:1;2236;2229:12;2191:52;-1:-1:-1;2262:23:26;;2111:180;-1:-1:-1;2111:180:26:o;2527:626::-;2624:6;2632;2640;2648;2656;2709:3;2697:9;2688:7;2684:23;2680:33;2677:53;;;2726:1;2723;2716:12;2677:53;2749:29;2768:9;2749:29;:::i;:::-;2739:39;;2797:38;2831:2;2820:9;2816:18;2797:38;:::i;:::-;2787:48;;2882:2;2871:9;2867:18;2854:32;2844:42;;2937:2;2926:9;2922:18;2909:32;2964:18;2956:6;2953:30;2950:50;;;2996:1;2993;2986:12;2950:50;3035:58;3085:7;3076:6;3065:9;3061:22;3035:58;:::i;:::-;2527:626;;;;-1:-1:-1;2527:626:26;;-1:-1:-1;3112:8:26;;3009:84;2527:626;-1:-1:-1;;;2527:626:26:o;3411:184::-;3463:77;3460:1;3453:88;3560:4;3557:1;3550:15;3584:4;3581:1;3574:15;3600:334;3671:2;3665:9;3727:2;3717:13;;3732:66;3713:86;3701:99;;3830:18;3815:34;;3851:22;;;3812:62;3809:88;;;3877:18;;:::i;:::-;3913:2;3906:22;3600:334;;-1:-1:-1;3600:334:26:o;3939:181::-;3997:4;4030:18;4022:6;4019:30;4016:56;;;4052:18;;:::i;:::-;-1:-1:-1;4097:1:26;4093:14;4109:4;4089:25;;3939:181::o;4125:589::-;4167:5;4220:3;4213:4;4205:6;4201:17;4197:27;4187:55;;4238:1;4235;4228:12;4187:55;4274:6;4261:20;4300:18;4296:2;4293:26;4290:52;;;4322:18;;:::i;:::-;4366:114;4474:4;4405:66;4398:4;4394:2;4390:13;4386:86;4382:97;4366:114;:::i;:::-;4505:2;4496:7;4489:19;4551:3;4544:4;4539:2;4531:6;4527:15;4523:26;4520:35;4517:55;;;4568:1;4565;4558:12;4517:55;4633:2;4626:4;4618:6;4614:17;4607:4;4598:7;4594:18;4581:55;4681:1;4656:16;;;4674:4;4652:27;4645:38;;;;4660:7;4125:589;-1:-1:-1;;;4125:589:26:o;4719:1129::-;4812:6;4843:2;4886;4874:9;4865:7;4861:23;4857:32;4854:52;;;4902:1;4899;4892:12;4854:52;4942:9;4929:23;4971:18;5012:2;5004:6;5001:14;4998:34;;;5028:1;5025;5018:12;4998:34;5066:6;5055:9;5051:22;5041:32;;5111:7;5104:4;5100:2;5096:13;5092:27;5082:55;;5133:1;5130;5123:12;5082:55;5169:2;5156:16;5192:58;5208:41;5246:2;5208:41;:::i;:::-;5192:58;:::i;:::-;5284:15;;;5366:1;5362:10;;;;5354:19;;5350:28;;;5315:12;;;;5390:19;;;5387:39;;;5422:1;5419;5412:12;5387:39;5454:2;5450;5446:11;5466:352;5482:6;5477:3;5474:15;5466:352;;;5568:3;5555:17;5604:2;5591:11;5588:19;5585:109;;;5648:1;5677:2;5673;5666:14;5585:109;5719:56;5767:7;5762:2;5748:11;5744:2;5740:20;5736:29;5719:56;:::i;:::-;5707:69;;-1:-1:-1;5796:12:26;;;;5499;;5466:352;;;-1:-1:-1;5837:5:26;4719:1129;-1:-1:-1;;;;;;;;4719:1129:26:o;5853:250::-;5938:1;5948:113;5962:6;5959:1;5956:13;5948:113;;;6038:11;;;6032:18;6019:11;;;6012:39;5984:2;5977:10;5948:113;;;-1:-1:-1;;6095:1:26;6077:16;;6070:27;5853:250::o;6108:329::-;6149:3;6187:5;6181:12;6214:6;6209:3;6202:19;6230:76;6299:6;6292:4;6287:3;6283:14;6276:4;6269:5;6265:16;6230:76;:::i;:::-;6351:2;6339:15;6356:66;6335:88;6326:98;;;;6426:4;6322:109;;6108:329;-1:-1:-1;;6108:329:26:o;6442:217::-;6589:2;6578:9;6571:21;6552:4;6609:44;6649:2;6638:9;6634:18;6626:6;6609:44;:::i;6664:186::-;6723:6;6776:2;6764:9;6755:7;6751:23;6747:32;6744:52;;;6792:1;6789;6782:12;6744:52;6815:29;6834:9;6815:29;:::i;6855:528::-;6964:6;6972;6980;7033:2;7021:9;7012:7;7008:23;7004:32;7001:52;;;7049:1;7046;7039:12;7001:52;7089:9;7076:23;7122:18;7114:6;7111:30;7108:50;;;7154:1;7151;7144:12;7108:50;7177:22;;7233:3;7215:16;;;7211:26;7208:46;;;7250:1;7247;7240:12;7208:46;7273:2;7322;7307:18;;7294:32;;-1:-1:-1;7373:2:26;7358:18;;;7345:32;;6855:528;-1:-1:-1;;;6855:528:26:o;7570:367::-;7633:8;7643:6;7697:3;7690:4;7682:6;7678:17;7674:27;7664:55;;7715:1;7712;7705:12;7664:55;-1:-1:-1;7738:20:26;;7781:18;7770:30;;7767:50;;;7813:1;7810;7803:12;7767:50;7850:4;7842:6;7838:17;7826:29;;7910:3;7903:4;7893:6;7890:1;7886:14;7878:6;7874:27;7870:38;7867:47;7864:67;;;7927:1;7924;7917:12;7942:1099;8111:6;8119;8127;8135;8143;8151;8204:2;8192:9;8183:7;8179:23;8175:32;8172:52;;;8220:1;8217;8210:12;8172:52;8260:9;8247:23;8289:18;8330:2;8322:6;8319:14;8316:34;;;8346:1;8343;8336:12;8316:34;8385:70;8447:7;8438:6;8427:9;8423:22;8385:70;:::i;:::-;8474:8;;-1:-1:-1;8359:96:26;-1:-1:-1;8562:2:26;8547:18;;8534:32;;-1:-1:-1;8578:16:26;;;8575:36;;;8607:1;8604;8597:12;8575:36;8646:72;8710:7;8699:8;8688:9;8684:24;8646:72;:::i;:::-;8737:8;;-1:-1:-1;8620:98:26;-1:-1:-1;8825:2:26;8810:18;;8797:32;;-1:-1:-1;8841:16:26;;;8838:36;;;8870:1;8867;8860:12;8838:36;;8909:72;8973:7;8962:8;8951:9;8947:24;8909:72;:::i;:::-;7942:1099;;;;-1:-1:-1;7942:1099:26;;-1:-1:-1;7942:1099:26;;9000:8;;7942:1099;-1:-1:-1;;;7942:1099:26:o;9046:394::-;9123:6;9131;9184:2;9172:9;9163:7;9159:23;9155:32;9152:52;;;9200:1;9197;9190:12;9152:52;9223:29;9242:9;9223:29;:::i;:::-;9213:39;;9303:2;9292:9;9288:18;9275:32;9330:18;9322:6;9319:30;9316:50;;;9362:1;9359;9352:12;9316:50;9385:49;9426:7;9417:6;9406:9;9402:22;9385:49;:::i;:::-;9375:59;;;9046:394;;;;;:::o;9445:895::-;9529:6;9560:2;9603;9591:9;9582:7;9578:23;9574:32;9571:52;;;9619:1;9616;9609:12;9571:52;9659:9;9646:23;9692:18;9684:6;9681:30;9678:50;;;9724:1;9721;9714:12;9678:50;9747:22;;9800:4;9792:13;;9788:27;-1:-1:-1;9778:55:26;;9829:1;9826;9819:12;9778:55;9865:2;9852:16;9888:58;9904:41;9942:2;9904:41;:::i;9888:58::-;9980:15;;;10062:1;10058:10;;;;10050:19;;10046:28;;;10011:12;;;;10086:19;;;10083:39;;;10118:1;10115;10108:12;10083:39;10142:11;;;;10162:148;10178:6;10173:3;10170:15;10162:148;;;10244:23;10263:3;10244:23;:::i;:::-;10232:36;;10195:12;;;;10288;;;;10162:148;;;10329:5;9445:895;-1:-1:-1;;;;;;;9445:895:26:o;10595:551::-;10683:6;10691;10699;10707;10760:2;10748:9;10739:7;10735:23;10731:32;10728:52;;;10776:1;10773;10766:12;10728:52;10799:29;10818:9;10799:29;:::i;:::-;10789:39;;10875:2;10864:9;10860:18;10847:32;10837:42;;10930:2;10919:9;10915:18;10902:32;10957:18;10949:6;10946:30;10943:50;;;10989:1;10986;10979:12;10943:50;11028:58;11078:7;11069:6;11058:9;11054:22;11028:58;:::i;:::-;10595:551;;;;-1:-1:-1;11105:8:26;-1:-1:-1;;;;10595:551:26:o;11151:1210::-;11311:6;11319;11327;11335;11343;11351;11359;11367;11420:3;11408:9;11399:7;11395:23;11391:33;11388:53;;;11437:1;11434;11427:12;11388:53;11460:29;11479:9;11460:29;:::i;:::-;11450:39;;11508:38;11542:2;11531:9;11527:18;11508:38;:::i;:::-;11498:48;;11597:2;11586:9;11582:18;11569:32;11620:18;11661:2;11653:6;11650:14;11647:34;;;11677:1;11674;11667:12;11647:34;11716:70;11778:7;11769:6;11758:9;11754:22;11716:70;:::i;:::-;11805:8;;-1:-1:-1;11690:96:26;-1:-1:-1;11893:2:26;11878:18;;11865:32;;-1:-1:-1;11909:16:26;;;11906:36;;;11938:1;11935;11928:12;11906:36;11977:72;12041:7;12030:8;12019:9;12015:24;11977:72;:::i;:::-;12068:8;;-1:-1:-1;11951:98:26;-1:-1:-1;12156:3:26;12141:19;;12128:33;;-1:-1:-1;12173:16:26;;;12170:36;;;12202:1;12199;12192:12;12366:695;12472:6;12480;12488;12496;12504;12512;12565:3;12553:9;12544:7;12540:23;12536:33;12533:53;;;12582:1;12579;12572:12;12533:53;12605:29;12624:9;12605:29;:::i;:::-;12595:39;;12653:38;12687:2;12676:9;12672:18;12653:38;:::i;:::-;12643:48;;12738:2;12727:9;12723:18;12710:32;12700:42;;12789:2;12778:9;12774:18;12761:32;12751:42;;12844:3;12833:9;12829:19;12816:33;12872:18;12864:6;12861:30;12858:50;;;12904:1;12901;12894:12;12858:50;12943:58;12993:7;12984:6;12973:9;12969:22;12943:58;:::i;13066:859::-;13226:4;13255:2;13295;13284:9;13280:18;13325:2;13314:9;13307:21;13348:6;13383;13377:13;13414:6;13406;13399:22;13452:2;13441:9;13437:18;13430:25;;13514:2;13504:6;13501:1;13497:14;13486:9;13482:30;13478:39;13464:53;;13552:2;13544:6;13540:15;13573:1;13583:313;13597:6;13594:1;13591:13;13583:313;;;13686:66;13674:9;13666:6;13662:22;13658:95;13653:3;13646:108;13777:39;13809:6;13800;13794:13;13777:39;:::i;:::-;13767:49;-1:-1:-1;13874:12:26;;;;13839:15;;;;13619:1;13612:9;13583:313;;;-1:-1:-1;13913:6:26;;13066:859;-1:-1:-1;;;;;;;13066:859:26:o;15039:184::-;15091:77;15088:1;15081:88;15188:4;15185:1;15178:15;15212:4;15209:1;15202:15;15228:580;15305:4;15311:6;15371:11;15358:25;15461:66;15450:8;15434:14;15430:29;15426:102;15406:18;15402:127;15392:155;;15543:1;15540;15533:12;15392:155;15570:33;;15622:20;;;-1:-1:-1;15665:18:26;15654:30;;15651:50;;;15697:1;15694;15687:12;15651:50;15730:4;15718:17;;-1:-1:-1;15761:14:26;15757:27;;;15747:38;;15744:58;;;15798:1;15795;15788:12;15813:349;15852:3;15883:66;15876:5;15873:77;15870:257;;15983:77;15980:1;15973:88;16084:4;16081:1;16074:15;16112:4;16109:1;16102:15;15870:257;-1:-1:-1;16154:1:26;16143:13;;15813:349::o;16582:184::-;16652:6;16705:2;16693:9;16684:7;16680:23;16676:32;16673:52;;;16721:1;16718;16711:12;16673:52;-1:-1:-1;16744:16:26;;16582:184;-1:-1:-1;16582:184:26:o;18121:287::-;18250:3;18288:6;18282:13;18304:66;18363:6;18358:3;18351:4;18343:6;18339:17;18304:66;:::i;:::-;18386:16;;;;;18121:287;-1:-1:-1;;18121:287:26:o;18750:681::-;18921:2;18973:21;;;19043:13;;18946:18;;;19065:22;;;18892:4;;18921:2;19144:15;;;;19118:2;19103:18;;;18892:4;19187:218;19201:6;19198:1;19195:13;19187:218;;;19266:13;;19281:42;19262:62;19250:75;;19380:15;;;;19345:12;;;;19223:1;19216:9;19187:218;;;-1:-1:-1;19422:3:26;;18750:681;-1:-1:-1;;;;;;18750:681:26:o"},"gasEstimates":{"creation":{"codeDepositCost":"1890400","executionCost":"infinite","totalCost":"infinite"},"external":{"addDeposit()":"infinite","encodeSignatures(bytes[])":"infinite","entryPoint()":"infinite","execute(address,uint256,bytes)":"infinite","executeBatch(address[],uint256[],bytes[])":"infinite","getDeposit()":"infinite","getNonce()":"infinite","initialize(address[])":"infinite","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"infinite","onERC1155Received(address,address,uint256,uint256,bytes)":"infinite","onERC721Received(address,address,uint256,bytes)":"infinite","owners(uint256)":"4658","supportsInterface(bytes4)":"449","tokensReceived(address,address,address,uint256,bytes,bytes)":"infinite","upgradeTo(address)":"infinite","upgradeToAndCall(address,bytes)":"infinite","validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":"infinite","walletFactory()":"infinite"},"internal":{"_authorizeUpgrade(address)":"infinite","_call(address,uint256,bytes memory)":"infinite","_initialize(address[] memory)":"infinite","_validateSignature(struct UserOperation calldata,bytes32)":"infinite"}},"methodIdentifiers":{"addDeposit()":"4a58db19","encodeSignatures(bytes[])":"1d06d40d","entryPoint()":"b0d691fe","execute(address,uint256,bytes)":"b61d27f6","executeBatch(address[],uint256[],bytes[])":"47e1da2a","getDeposit()":"c399ec88","getNonce()":"d087d288","initialize(address[])":"a224cee7","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","onERC721Received(address,address,uint256,bytes)":"150b7a02","owners(uint256)":"025e7c27","supportsInterface(bytes4)":"01ffc9a7","tokensReceived(address,address,address,uint256,bytes,bytes)":"0023de29","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286","validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":"3a871cdd","walletFactory()":"c5c03699"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"anEntryPoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ourWalletFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IEntryPoint\",\"name\":\"entryPoint\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"}],\"name\":\"WalletInitialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"encodeSignatures\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"func\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dests\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"funcs\",\"type\":\"bytes[]\"}],\"name\":\"executeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"initialOwners\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"missingAccountFunds\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is upgraded.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"entryPoint()\":{\"notice\":\"return the entryPoint used by this account. subclass should return the current entryPoint used by this account.\"},\"getNonce()\":{\"notice\":\"Return the account nonce. This method returns the next sequential nonce. For a nonce of a specific key, use `entrypoint.getNonce(account, key)`\"},\"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"notice\":\"Validate user's signature and nonce. subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Wallet.sol\":\"Wallet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@account-abstraction/contracts/callback/TokenCallbackHandler.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-empty-blocks */\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\n/**\\n * Token callback handler.\\n *   Handles supported tokens' callbacks, allowing account receiving these tokens.\\n */\\ncontract TokenCallbackHandler is IERC777Recipient, IERC721Receiver, IERC1155Receiver {\\n    function tokensReceived(\\n        address,\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata,\\n        bytes calldata\\n    ) external pure override {\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC1155Receiver.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC1155Receiver.onERC1155BatchReceived.selector;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\n            interfaceId == type(IERC1155Receiver).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xfff3df5f5211d71158bb017ff791dc4fa85db53890f7bd72bac3a43d89e83752\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/core/BaseAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-empty-blocks */\\n\\nimport \\\"../interfaces/IAccount.sol\\\";\\nimport \\\"../interfaces/IEntryPoint.sol\\\";\\nimport \\\"./Helpers.sol\\\";\\n\\n/**\\n * Basic account implementation.\\n * this contract provides the basic logic for implementing the IAccount interface  - validateUserOp\\n * specific account implementation should inherit it and provide the account-specific logic\\n */\\nabstract contract BaseAccount is IAccount {\\n    using UserOperationLib for UserOperation;\\n\\n    //return value in case of signature failure, with no time-range.\\n    // equivalent to _packValidationData(true,0,0);\\n    uint256 constant internal SIG_VALIDATION_FAILED = 1;\\n\\n    /**\\n     * Return the account nonce.\\n     * This method returns the next sequential nonce.\\n     * For a nonce of a specific key, use `entrypoint.getNonce(account, key)`\\n     */\\n    function getNonce() public view virtual returns (uint256) {\\n        return entryPoint().getNonce(address(this), 0);\\n    }\\n\\n    /**\\n     * return the entryPoint used by this account.\\n     * subclass should return the current entryPoint used by this account.\\n     */\\n    function entryPoint() public view virtual returns (IEntryPoint);\\n\\n    /**\\n     * Validate user's signature and nonce.\\n     * subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external override virtual returns (uint256 validationData) {\\n        _requireFromEntryPoint();\\n        validationData = _validateSignature(userOp, userOpHash);\\n        _validateNonce(userOp.nonce);\\n        _payPrefund(missingAccountFunds);\\n    }\\n\\n    /**\\n     * ensure the request comes from the known entrypoint.\\n     */\\n    function _requireFromEntryPoint() internal virtual view {\\n        require(msg.sender == address(entryPoint()), \\\"account: not from EntryPoint\\\");\\n    }\\n\\n    /**\\n     * validate the signature is valid for this message.\\n     * @param userOp validate the userOp.signature field\\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\\n     *          (also hashes the entrypoint and chain id)\\n     * @return validationData signature and time-range of this operation\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If the account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash)\\n    internal virtual returns (uint256 validationData);\\n\\n    /**\\n     * Validate the nonce of the UserOperation.\\n     * This method may validate the nonce requirement of this account.\\n     * e.g.\\n     * To limit the nonce to use sequenced UserOps only (no \\\"out of order\\\" UserOps):\\n     *      `require(nonce < type(uint64).max)`\\n     * For a hypothetical account that *requires* the nonce to be out-of-order:\\n     *      `require(nonce & type(uint64).max == 0)`\\n     *\\n     * The actual nonce uniqueness is managed by the EntryPoint, and thus no other\\n     * action is needed by the account itself.\\n     *\\n     * @param nonce to validate\\n     *\\n     * solhint-disable-next-line no-empty-blocks\\n     */\\n    function _validateNonce(uint256 nonce) internal view virtual {\\n    }\\n\\n    /**\\n     * sends to the entrypoint (msg.sender) the missing funds for this transaction.\\n     * subclass MAY override this method for better funds management\\n     * (e.g. send to the entryPoint more than the minimum required, so that in future transactions\\n     * it will not be required to send again)\\n     * @param missingAccountFunds the minimum value this method should send the entrypoint.\\n     *  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\\n     */\\n    function _payPrefund(uint256 missingAccountFunds) internal virtual {\\n        if (missingAccountFunds != 0) {\\n            (bool success,) = payable(msg.sender).call{value : missingAccountFunds, gas : type(uint256).max}(\\\"\\\");\\n            (success);\\n            //ignore failure (its EntryPoint's job to verify, not account.)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5eb3253b32fd8ba8ae7b9d83da8e9924254a4d3d17a8772b41280e8572974b3c\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\",\"keccak256\":\"0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\ninterface IAccount {\\n\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp the operation that is about to be executed.\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external returns (uint256 validationData);\\n}\\n\",\"keccak256\":\"0x556a0e5980de18e90b115553ed502408155ba35f58642823010d9288047bc418\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp)\\n    external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatedSignature the aggregated signature\\n     */\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\\n}\\n\",\"keccak256\":\"0x060e9ddb0152250c269ba0640dc5753834ac44cf182a2837d508c0c529cae26a\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IEntryPoint.sol\":{\"content\":\"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\nimport \\\"./INonceManager.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager, INonceManager {\\n\\n    /***\\n     * An event emitted after each successful request\\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\\n     * @param sender - the account that generates this request.\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\n     * @param nonce - the nonce value from the request.\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\\n     */\\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\\n\\n    /**\\n     * account \\\"sender\\\" was deployed.\\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\\n     * @param sender the account that is deployed\\n     * @param factory the factory used to deploy this account (in the initCode)\\n     * @param paymaster the paymaster used by this UserOp\\n     */\\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\n     * @param userOpHash the request unique identifier.\\n     * @param sender the sender of this request\\n     * @param nonce the nonce used in the request\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\\n\\n    /**\\n     * an event emitted by handleOps(), before starting the execution loop.\\n     * any event emitted before this event, is part of the validation.\\n     */\\n    event BeforeExecution();\\n\\n    /**\\n     * signature aggregator used by the following UserOperationEvents within this bundle.\\n     */\\n    event SignatureAggregatorChanged(address indexed aggregator);\\n\\n    /**\\n     * a custom revert error of handleOps, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\n     *  @param reason - revert reason\\n     *      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\n     *      so a failure can be attributed to the correct entity.\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\n     */\\n    error FailedOp(uint256 opIndex, string reason);\\n\\n    /**\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    /**\\n     * Successful result from simulateValidation.\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     */\\n    error ValidationResult(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\\n\\n    /**\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\n     */\\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\\n        AggregatorStakeInfo aggregatorInfo);\\n\\n    /**\\n     * return value of getSenderAddress\\n     */\\n    error SenderAddressResult(address sender);\\n\\n    /**\\n     * return value of simulateHandleOp\\n     */\\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint48 validAfter, uint48 validUntil, bool targetSuccess, bytes targetResult);\\n\\n    //UserOps handled, per aggregator\\n    struct UserOpsPerAggregator {\\n        UserOperation[] userOps;\\n\\n        // aggregator address\\n        IAggregator aggregator;\\n        // aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * no signature aggregator is used.\\n     * if any account requires an aggregator (that is, it returned an aggregator when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\\n\\n    /**\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\n     * @param userOp the user operation to validate.\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external;\\n\\n    /**\\n     * gas and return values during simulation\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\\n     */\\n    struct ReturnInfo {\\n        uint256 preOpGas;\\n        uint256 prefund;\\n        bool sigFailed;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n        bytes paymasterContext;\\n    }\\n\\n    /**\\n     * returned aggregated signature info.\\n     * the aggregator returned by the account, and its current stake.\\n     */\\n    struct AggregatorStakeInfo {\\n        address aggregator;\\n        StakeInfo stakeInfo;\\n    }\\n\\n    /**\\n     * Get counterfactual sender address.\\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n     * this method always revert, and returns the address in SenderAddressResult error\\n     * @param initCode the constructor code to be passed into the UserOperation.\\n     */\\n    function getSenderAddress(bytes memory initCode) external;\\n\\n\\n    /**\\n     * simulate full execution of a UserOperation (including both validation and target execution)\\n     * this method will always revert with \\\"ExecutionResult\\\".\\n     * it performs full validation of the UserOperation, but ignores signature error.\\n     * an optional target address is called after the userop succeeds, and its value is returned\\n     * (before the entire call is reverted)\\n     * Note that in order to collect the the success/failure of the target call, it must be executed\\n     * with trace enabled to track the emitted events.\\n     * @param op the UserOperation to simulate\\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\\n     *        are set to the return from that call.\\n     * @param targetCallData callData to pass to target address\\n     */\\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\\n}\\n\\n\",\"keccak256\":\"0x3a90bf308819ed125fa4202f880999caff8a8686633b8ddb79a30ca240d5b8f8\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/INonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface INonceManager {\\n\\n    /**\\n     * Return the next nonce for this sender.\\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\\n     * But UserOp with different keys can come with arbitrary order.\\n     *\\n     * @param sender the account address\\n     * @param key the high 192 bit of the nonce\\n     * @return nonce a full nonce to pass for next UserOp with this sender.\\n     */\\n    function getNonce(address sender, uint192 key)\\n    external view returns (uint256 nonce);\\n\\n    /**\\n     * Manually increment the nonce of the sender.\\n     * This method is exposed just for completeness..\\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\\n     * as the EntryPoint will update the nonce regardless.\\n     * Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future\\n     * UserOperations will not pay extra for the first transaction with a given key.\\n     */\\n    function incrementNonce(uint192 key) external;\\n}\\n\",\"keccak256\":\"0x509871e6c63663cdcc3eba19920fe84e991f38b289b1377ac3c3a6d9f22d7e12\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when stake or unstake delay are modified\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 unstakeDelaySec\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the entity's deposit\\n     * @param staked true if this entity is staked.\\n     * @param stake actual amount of ether staked for this entity.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 10^15 eth\\n     *    48 bit for full timestamp\\n     *    32 bit allows 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint48 withdrawTime;\\n    }\\n\\n    //API struct used by getStakeInfo and simulateValidation\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /// @return info - full deposit information of given account\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// @return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\",\"keccak256\":\"0xd227b02888cd4ac68daebcdfd992ec00f9fff66fa3b3bb16f656cd582fa3480f\",\"license\":\"GPL-3.0-only\"},\"@account-abstraction/contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c\",\"license\":\"GPL-3.0\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"node_modules/@openzeppelin/contracts/proxy/utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdd7ab1894aa38a7e0b4a74436913db828e303be8b0dda4b064d6630ea2a05644\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5615339d191e77be7e46319b67856f9355786f705b7b3c4a7237ab70c1864ab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0xe3a447af30d1f68b3b8644e5a694a8618259ac5152dce599ba88a3805f9621b0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0fd59f83d16f090c27a8105db0f4ad05b0f5d127f9878b82ebf0ad2bbc4e3f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d15d280d1f868f59a8264dc73f7ea8c51f10d78aac864b2f2ad29412d187ff5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return recover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return recover(hash, r, vs);\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x828774372910d18e7337bc31a288d786748af4cd9da80222467e486ed1d569ab\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\",\"license\":\"MIT\"},\"contracts/Wallet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@account-abstraction/contracts/core/BaseAccount.sol\\\";\\nimport \\\"@account-abstraction/contracts/core/Helpers.sol\\\";\\nimport \\\"@account-abstraction/contracts/callback/TokenCallbackHandler.sol\\\";\\n\\ncontract Wallet is\\n    BaseAccount,\\n    TokenCallbackHandler,\\n    Initializable,\\n    UUPSUpgradeable\\n{\\n    using ECDSA for bytes32;\\n\\n    address public immutable walletFactory;\\n    IEntryPoint private immutable _entryPoint;\\n    address[] public owners;\\n\\n    event WalletInitialized(IEntryPoint indexed entryPoint, address[] owners);\\n\\n    modifier _requireFromEntryPointOrFactory() {\\n        require(\\n            msg.sender == address(_entryPoint) || msg.sender == walletFactory,\\n            \\\"only entry point or wallet factory can call\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(IEntryPoint anEntryPoint, address ourWalletFactory) {\\n        _entryPoint = anEntryPoint;\\n        walletFactory = ourWalletFactory;\\n    }\\n\\n    function initialize(address[] memory initialOwners) public initializer {\\n        _initialize(initialOwners);\\n    }\\n\\n    function execute(\\n        address dest,\\n        uint256 value,\\n        bytes calldata func\\n    ) external _requireFromEntryPointOrFactory {\\n        _call(dest, value, func);\\n    }\\n\\n    function executeBatch(\\n        address[] calldata dests,\\n        uint256[] calldata values,\\n        bytes[] calldata funcs\\n    ) external _requireFromEntryPointOrFactory {\\n        require(dests.length == funcs.length, \\\"wrong array lengths\\\");\\n        require(values.length == funcs.length, \\\"wrong values lengths\\\");\\n        for (uint256 i = 0; i < dests.length; i++) {\\n            _call(dests[i], values[i], funcs[i]);\\n        }\\n    }\\n\\n    function _validateSignature(\\n        UserOperation calldata userOp,\\n        bytes32 userOpHash\\n    ) internal view override returns (uint256) {\\n        bytes32 hash = userOpHash.toEthSignedMessageHash();\\n        bytes[] memory signatures = abi.decode(userOp.signature, (bytes[]));\\n\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            if (owners[i] != hash.recover(signatures[i])) {\\n                return SIG_VALIDATION_FAILED;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function _initialize(address[] memory initialOwners) internal {\\n        require(initialOwners.length > 0, \\\"no owners\\\");\\n        owners = initialOwners;\\n        emit WalletInitialized(_entryPoint, initialOwners);\\n    }\\n\\n    function _call(address target, uint256 value, bytes memory data) internal {\\n        (bool success, bytes memory result) = target.call{value: value}(data);\\n        if (!success) {\\n            assembly {\\n                revert(add(result, 32), mload(result))\\n            }\\n        }\\n    }\\n\\n    function encodeSignatures(\\n        bytes[] memory signatures\\n    ) public pure returns (bytes memory) {\\n        return abi.encode(signatures);\\n    }\\n\\n    function entryPoint() public view override returns (IEntryPoint) {\\n        return _entryPoint;\\n    }\\n\\n    function getDeposit() public view returns (uint256) {\\n        return entryPoint().balanceOf(address(this));\\n    }\\n\\n    function addDeposit() public payable {\\n        entryPoint().depositTo{value: msg.value}(address(this));\\n    }\\n\\n    function _authorizeUpgrade(\\n        address\\n    ) internal view override _requireFromEntryPointOrFactory {}\\n\\n    receive() external payable {}\\n}\",\"keccak256\":\"0xdcf04d918089077486190c958f1a526638d4cf8e4dfd23a654b2c0e5d96aadac\",\"license\":\"GPL-3.0\"},\"node_modules/@openzeppelin/contracts/proxy/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1549,"contract":"contracts/Wallet.sol:Wallet","label":"_initialized","offset":0,"slot":"0","type":"t_bool"},{"astId":1552,"contract":"contracts/Wallet.sol:Wallet","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":2623,"contract":"contracts/Wallet.sol:Wallet","label":"owners","offset":0,"slot":"1","type":"t_array(t_address)dyn_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"entryPoint()":{"notice":"return the entryPoint used by this account. subclass should return the current entryPoint used by this account."},"getNonce()":{"notice":"Return the account nonce. This method returns the next sequential nonce. For a nonce of a specific key, use `entrypoint.getNonce(account, key)`"},"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":{"notice":"Validate user's signature and nonce. subclass doesn't need to override this method. Instead, it should override the specific internal validation methods."}},"version":1}}},"contracts/WalletFactory.sol":{"WalletFactory":{"abi":[{"inputs":[{"internalType":"contract IEntryPoint","name":"entryPoint","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address[]","name":"owners","type":"address[]"},{"internalType":"uint256","name":"salt","type":"uint256"}],"name":"createAccount","outputs":[{"internalType":"contract Wallet","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"owners","type":"address[]"},{"internalType":"uint256","name":"salt","type":"uint256"}],"name":"getAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"walletImplementation","outputs":[{"internalType":"contract Wallet","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2970":{"entryPoint":null,"id":2970,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_contract$_IEntryPoint_$758_fromMemory":{"entryPoint":144,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IEntryPoint_$758_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:653:26","statements":[{"nodeType":"YulBlock","src":"6:3:26","statements":[]},{"body":{"nodeType":"YulBlock","src":"114:209:26","statements":[{"body":{"nodeType":"YulBlock","src":"160:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"169:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"172:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"162:6:26"},"nodeType":"YulFunctionCall","src":"162:12:26"},"nodeType":"YulExpressionStatement","src":"162:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"135:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"144:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"131:3:26"},"nodeType":"YulFunctionCall","src":"131:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"156:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"127:3:26"},"nodeType":"YulFunctionCall","src":"127:32:26"},"nodeType":"YulIf","src":"124:52:26"},{"nodeType":"YulVariableDeclaration","src":"185:29:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"204:9:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"198:5:26"},"nodeType":"YulFunctionCall","src":"198:16:26"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"189:5:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"277:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"286:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"289:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"279:6:26"},"nodeType":"YulFunctionCall","src":"279:12:26"},"nodeType":"YulExpressionStatement","src":"279:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"236:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"247:5:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"262:3:26","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"267:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"258:3:26"},"nodeType":"YulFunctionCall","src":"258:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"271:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"254:3:26"},"nodeType":"YulFunctionCall","src":"254:19:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"243:3:26"},"nodeType":"YulFunctionCall","src":"243:31:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"233:2:26"},"nodeType":"YulFunctionCall","src":"233:42:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"226:6:26"},"nodeType":"YulFunctionCall","src":"226:50:26"},"nodeType":"YulIf","src":"223:70:26"},{"nodeType":"YulAssignment","src":"302:15:26","value":{"name":"value","nodeType":"YulIdentifier","src":"312:5:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"302:6:26"}]}]},"name":"abi_decode_tuple_t_contract$_IEntryPoint_$758_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"80:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"91:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"103:6:26","type":""}],"src":"14:309:26"},{"body":{"nodeType":"YulBlock","src":"476:175:26","statements":[{"nodeType":"YulAssignment","src":"486:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"498:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"509:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"494:3:26"},"nodeType":"YulFunctionCall","src":"494:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"486:4:26"}]},{"nodeType":"YulVariableDeclaration","src":"521:29:26","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"539:3:26","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"544:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"535:3:26"},"nodeType":"YulFunctionCall","src":"535:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"548:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"531:3:26"},"nodeType":"YulFunctionCall","src":"531:19:26"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"525:2:26","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"566:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"581:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"589:2:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"577:3:26"},"nodeType":"YulFunctionCall","src":"577:15:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"559:6:26"},"nodeType":"YulFunctionCall","src":"559:34:26"},"nodeType":"YulExpressionStatement","src":"559:34:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"613:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"624:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"609:3:26"},"nodeType":"YulFunctionCall","src":"609:18:26"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"633:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"641:2:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"629:3:26"},"nodeType":"YulFunctionCall","src":"629:15:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"602:6:26"},"nodeType":"YulFunctionCall","src":"602:43:26"},"nodeType":"YulExpressionStatement","src":"602:43:26"}]},"name":"abi_encode_tuple_t_contract$_IEntryPoint_$758_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"437:9:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"448:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"456:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"467:4:26","type":""}],"src":"328:323:26"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_contract$_IEntryPoint_$758_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_contract$_IEntryPoint_$758_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n}","id":26,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a060405234801561001057600080fd5b506040516132ea3803806132ea83398101604081905261002f91610090565b803060405161003d90610083565b6001600160a01b03928316815291166020820152604001604051809103906000f080158015610070573d6000803e3d6000fd5b506001600160a01b0316608052506100c0565b61260380610ce783390190565b6000602082840312156100a257600080fd5b81516001600160a01b03811681146100b957600080fd5b9392505050565b608051610bff6100e86000396000818160510152818161016601526103800152610bff6000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c80638117abc1146200004b57806394f7e8e0146200009c578063b54c02f214620000b3575b600080fd5b620000737f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b62000073620000ad3660046200044e565b620000ca565b62000073620000c43660046200044e565b620002b1565b60008083604051602401620000e0919062000545565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa224cee70000000000000000000000000000000000000000000000000000000017905290519192506000916200018f917f000000000000000000000000000000000000000000000000000000000000000091859101620005c7565b6040516020818303038152906040529050600060405180602001620001b490620003e7565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f909101166040819052620001f89190849060200162000637565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815282825280516020918201207fff00000000000000000000000000000000000000000000000000000000000000828501523060601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602185015260358401899052605580850191909152825180850390910181526075909301909152815191012093505050505b92915050565b600080620002c08484620000ca565b905073ffffffffffffffffffffffffffffffffffffffff81163b8015620002ea57509050620002ab565b600085604051602401620002ff919062000545565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa224cee7000000000000000000000000000000000000000000000000000000001790525190915060009086907f0000000000000000000000000000000000000000000000000000000000000000908490620003ad90620003e7565b620003ba929190620005c7565b8190604051809103906000f5905080158015620003db573d6000803e3d6000fd5b50979650505050505050565b61055f806200066b83390190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b803573ffffffffffffffffffffffffffffffffffffffff811681146200044957600080fd5b919050565b600080604083850312156200046257600080fd5b823567ffffffffffffffff808211156200047b57600080fd5b818501915085601f8301126200049057600080fd5b8135602082821115620004a757620004a7620003f5565b8160051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108682111715620004ed57620004ed620003f5565b6040529283528183019350848101820192898411156200050c57600080fd5b948201945b838610156200053557620005258662000424565b8552948201949382019362000511565b9997909101359750505050505050565b6020808252825182820181905260009190848201906040850190845b818110156200059557835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010162000561565b50909695505050505050565b60005b83811015620005be578181015183820152602001620005a4565b50506000910152565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201526000825180604084015262000604816060850160208701620005a1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016060019392505050565b600083516200064b818460208801620005a1565b83519083019062000661818360208801620005a1565b0194935050505056fe608060405260405161055f38038061055f833981016040819052610022916102f8565b61004d60017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd6103c6565b60008051602061051883398151915214610069576100696103e7565b6100758282600061007c565b505061044c565b610085836100a8565b6000825111806100925750805b156100a3576100a183836100e8565b505b505050565b6100b181610116565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061010d8383604051806060016040528060278152602001610538602791396101ae565b90505b92915050565b803b61017f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b60008051602061051883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060833b61020d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610176565b600080856001600160a01b03168560405161022891906103fd565b600060405180830381855af49150503d8060008114610263576040519150601f19603f3d011682016040523d82523d6000602084013e610268565b606091505b509092509050610279828286610285565b925050505b9392505050565b6060831561029457508161027e565b8251156102a45782518084602001fd5b8160405162461bcd60e51b81526004016101769190610419565b634e487b7160e01b600052604160045260246000fd5b60005b838110156102ef5781810151838201526020016102d7565b50506000910152565b6000806040838503121561030b57600080fd5b82516001600160a01b038116811461032257600080fd5b60208401519092506001600160401b038082111561033f57600080fd5b818501915085601f83011261035357600080fd5b815181811115610365576103656102be565b604051601f8201601f19908116603f0116810190838211818310171561038d5761038d6102be565b816040528281528860208487010111156103a657600080fd5b6103b78360208301602088016102d4565b80955050505050509250929050565b8181038181111561011057634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052600160045260246000fd5b6000825161040f8184602087016102d4565b9190910192915050565b60208152600082518060208401526104388160408501602087016102d4565b601f01601f19169190910160400192915050565b60be8061045a6000396000f3fe608060405236601057600e6013565b005b600e5b601f601b6021565b6065565b565b600060607f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156083573d6000f35b3d6000fdfea26469706673582212200659177648e7221cbada3677e497c843b81c481a12709122f21b78dc3b9eee0d64736f6c63430008130033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204ef1b47f9f7907780449d747d523dc9434a238b35d2bc77f3ea68ab707558aec64736f6c6343000813003360c06040523480156200001157600080fd5b506040516200260338038062002603833981016040819052620000349162000065565b6001600160a01b0391821660a05216608052620000a4565b6001600160a01b03811681146200006257600080fd5b50565b600080604083850312156200007957600080fd5b825162000086816200004c565b602084015190925062000099816200004c565b809150509250929050565b60805160a0516124ec62000117600039600081816103340152818161060e0152818161089b01528181610a8f01528181610c0901528181610cc701528181610d0e0152818161106b015261138b0152600081816103e70152818161064d01528181610ace0152610d4d01526124ec6000f3fe60806040526004361061012c5760003560e01c80634f1ef286116100a5578063bc197c8111610074578063c5c0369911610059578063c5c03699146103d5578063d087d28814610409578063f23a6e611461041e57600080fd5b8063bc197c8114610378578063c399ec88146103c057600080fd5b80634f1ef286146102f2578063a224cee714610305578063b0d691fe14610325578063b61d27f61461035857600080fd5b80631d06d40d116100fc5780633a871cdd116100e15780633a871cdd1461029c57806347e1da2a146102ca5780634a58db19146102ea57600080fd5b80631d06d40d1461024f5780633659cfe61461027c57600080fd5b806223de291461013857806301ffc9a71461015f578063025e7c2714610194578063150b7a02146101d957600080fd5b3661013357005b600080fd5b34801561014457600080fd5b5061015d610153366004611b23565b5050505050505050565b005b34801561016b57600080fd5b5061017f61017a366004611bce565b610464565b60405190151581526020015b60405180910390f35b3480156101a057600080fd5b506101b46101af366004611c10565b610549565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161018b565b3480156101e557600080fd5b5061021e6101f4366004611c29565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161018b565b34801561025b57600080fd5b5061026f61026a366004611dc8565b610580565b60405161018b9190611eec565b34801561028857600080fd5b5061015d610297366004611eff565b6105a9565b3480156102a857600080fd5b506102bc6102b7366004611f1a565b6105d0565b60405190815260200161018b565b3480156102d657600080fd5b5061015d6102e5366004611fb3565b6105f6565b61015d610899565b61015d61030036600461204d565b61093f565b34801561031157600080fd5b5061015d61032036600461209b565b610958565b34801561033157600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006101b4565b34801561036457600080fd5b5061015d610373366004612133565b610a77565b34801561038457600080fd5b5061021e61039336600461218d565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b3480156103cc57600080fd5b506102bc610bc3565b3480156103e157600080fd5b506101b47f000000000000000000000000000000000000000000000000000000000000000081565b34801561041557600080fd5b506102bc610c7a565b34801561042a57600080fd5b5061021e610439366004612227565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f150b7a020000000000000000000000000000000000000000000000000000000014806104f757507fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000145b8061054357507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b6001818154811061055957600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b606081604051602001610593919061228d565b6040516020818303038152906040529050919050565b6105b281610cf6565b6105cd81604051806020016040528060008152506000610dfb565b50565b60006105da611053565b6105e484846110f4565b90506105ef82611222565b9392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148061066f57503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016145b610700576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f6f6e6c7920656e74727920706f696e74206f722077616c6c657420666163746f60448201527f72792063616e2063616c6c00000000000000000000000000000000000000000060648201526084015b60405180910390fd5b848114610769576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f77726f6e67206172726179206c656e677468730000000000000000000000000060448201526064016106f7565b8281146107d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f77726f6e672076616c756573206c656e6774687300000000000000000000000060448201526064016106f7565b60005b858110156108905761087e8787838181106107f2576107f261230d565b90506020020160208101906108079190611eff565b8686848181106108195761081961230d565b905060200201358585858181106108325761083261230d565b9050602002810190610844919061233c565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061128d92505050565b80610888816123a1565b9150506107d5565b50505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006040517fb760faf900000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff919091169063b760faf99034906024016000604051808303818588803b15801561092457600080fd5b505af1158015610938573d6000803e3d6000fd5b5050505050565b61094882610cf6565b61095482826001610dfb565b5050565b600054610100900460ff1680610971575060005460ff16155b6109fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016106f7565b600054610100900460ff16158015610a3c57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b610a458261130a565b801561095457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555050565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480610af057503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016145b610b7c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f6f6e6c7920656e74727920706f696e74206f722077616c6c657420666163746f60448201527f72792063616e2063616c6c00000000000000000000000000000000000000000060648201526084016106f7565b610bbd848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061128d92505050565b50505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a08231906024015b602060405180830381865afa158015610c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c759190612400565b905090565b6040517f35567e1a0000000000000000000000000000000000000000000000000000000081523060048201526000602482018190529073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906335567e1a90604401610c34565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480610d6f57503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016145b6105cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f6f6e6c7920656e74727920706f696e74206f722077616c6c657420666163746f60448201527f72792063616e2063616c6c00000000000000000000000000000000000000000060648201526084016106f7565b6000610e3b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b9050610e46846113fa565b600083511180610e535750815b15610e6457610e6284846114ee565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166109385780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117815560405173ffffffffffffffffffffffffffffffffffffffff83166024820152610f5a908690604401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f3659cfe6000000000000000000000000000000000000000000000000000000001790526114ee565b5080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681557f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff83811691161461104a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201527f757274686572207570677261646573000000000000000000000000000000000060648201526084016106f7565b61093885611513565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146110f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e740000000060448201526064016106f7565b565b60008061114e836040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b9050600061116061014086018661233c565b81019061116d9190611dc8565b905060005b600154811015611216576111a88282815181106111915761119161230d565b60200260200101518461156090919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff16600182815481106111d1576111d161230d565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16146112045760019350505050610543565b8061120e816123a1565b915050611172565b50600095945050505050565b80156105cd5760405160009033907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90849084818181858888f193505050503d8060008114610938576040519150601f19603f3d011682016040523d82523d6000602084013e610938565b6000808473ffffffffffffffffffffffffffffffffffffffff1684846040516112b69190612419565b60006040518083038185875af1925050503d80600081146112f3576040519150601f19603f3d011682016040523d82523d6000602084013e6112f8565b606091505b50915091508161093857805160208201fd5b6000815111611375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f206f776e657273000000000000000000000000000000000000000000000060448201526064016106f7565b8051611388906001906020840190611a12565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f8afffd56adb385a94a6b7426d4e3f51e2f9de8984c19093c2ddccf8fcfddfe8d826040516113ef9190612435565b60405180910390a250565b803b611488576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e74726163740000000000000000000000000000000000000060648201526084016106f7565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60606105ef83836040518060600160405280602781526020016124906027913961161c565b61151c816113fa565b60405173ffffffffffffffffffffffffffffffffffffffff8216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600081516041036115935760208201516040830151606084015160001a6115898682858561172e565b9350505050610543565b81516040036115ba57602082015160408301516115b1858383611986565b92505050610543565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106f7565b6060833b6116ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016106f7565b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516116d49190612419565b600060405180830381855af49150503d806000811461170f576040519150601f19603f3d011682016040523d82523d6000602084013e611714565b606091505b50915091506117248282866119bf565b9695505050505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156117e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106f7565b8360ff16601b14806117f557508360ff16601c145b611881576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106f7565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156118d5573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661197d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106f7565b95945050505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821660ff83901c601b016117248682878561172e565b606083156119ce5750816105ef565b8251156119de5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f79190611eec565b828054828255906000526020600020908101928215611a8c579160200282015b82811115611a8c57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190611a32565b50611a98929150611a9c565b5090565b5b80821115611a985760008155600101611a9d565b803573ffffffffffffffffffffffffffffffffffffffff81168114611ad557600080fd5b919050565b60008083601f840112611aec57600080fd5b50813567ffffffffffffffff811115611b0457600080fd5b602083019150836020828501011115611b1c57600080fd5b9250929050565b60008060008060008060008060c0898b031215611b3f57600080fd5b611b4889611ab1565b9750611b5660208a01611ab1565b9650611b6460408a01611ab1565b955060608901359450608089013567ffffffffffffffff80821115611b8857600080fd5b611b948c838d01611ada565b909650945060a08b0135915080821115611bad57600080fd5b50611bba8b828c01611ada565b999c989b5096995094979396929594505050565b600060208284031215611be057600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146105ef57600080fd5b600060208284031215611c2257600080fd5b5035919050565b600080600080600060808688031215611c4157600080fd5b611c4a86611ab1565b9450611c5860208701611ab1565b935060408601359250606086013567ffffffffffffffff811115611c7b57600080fd5b611c8788828901611ada565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611d0e57611d0e611c98565b604052919050565b600067ffffffffffffffff821115611d3057611d30611c98565b5060051b60200190565b600082601f830112611d4b57600080fd5b813567ffffffffffffffff811115611d6557611d65611c98565b611d9660207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611cc7565b818152846020838601011115611dab57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020808385031215611ddb57600080fd5b823567ffffffffffffffff80821115611df357600080fd5b818501915085601f830112611e0757600080fd5b8135611e1a611e1582611d16565b611cc7565b81815260059190911b83018401908481019088831115611e3957600080fd5b8585015b83811015611e7157803585811115611e555760008081fd5b611e638b89838a0101611d3a565b845250918601918601611e3d565b5098975050505050505050565b60005b83811015611e99578181015183820152602001611e81565b50506000910152565b60008151808452611eba816020860160208601611e7e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006105ef6020830184611ea2565b600060208284031215611f1157600080fd5b6105ef82611ab1565b600080600060608486031215611f2f57600080fd5b833567ffffffffffffffff811115611f4657600080fd5b84016101608187031215611f5957600080fd5b95602085013595506040909401359392505050565b60008083601f840112611f8057600080fd5b50813567ffffffffffffffff811115611f9857600080fd5b6020830191508360208260051b8501011115611b1c57600080fd5b60008060008060008060608789031215611fcc57600080fd5b863567ffffffffffffffff80821115611fe457600080fd5b611ff08a838b01611f6e565b9098509650602089013591508082111561200957600080fd5b6120158a838b01611f6e565b9096509450604089013591508082111561202e57600080fd5b5061203b89828a01611f6e565b979a9699509497509295939492505050565b6000806040838503121561206057600080fd5b61206983611ab1565b9150602083013567ffffffffffffffff81111561208557600080fd5b61209185828601611d3a565b9150509250929050565b600060208083850312156120ae57600080fd5b823567ffffffffffffffff8111156120c557600080fd5b8301601f810185136120d657600080fd5b80356120e4611e1582611d16565b81815260059190911b8201830190838101908783111561210357600080fd5b928401925b828410156121285761211984611ab1565b82529284019290840190612108565b979650505050505050565b6000806000806060858703121561214957600080fd5b61215285611ab1565b935060208501359250604085013567ffffffffffffffff81111561217557600080fd5b61218187828801611ada565b95989497509550505050565b60008060008060008060008060a0898b0312156121a957600080fd5b6121b289611ab1565b97506121c060208a01611ab1565b9650604089013567ffffffffffffffff808211156121dd57600080fd5b6121e98c838d01611f6e565b909850965060608b013591508082111561220257600080fd5b61220e8c838d01611f6e565b909650945060808b0135915080821115611bad57600080fd5b60008060008060008060a0878903121561224057600080fd5b61224987611ab1565b955061225760208801611ab1565b94506040870135935060608701359250608087013567ffffffffffffffff81111561228157600080fd5b61203b89828a01611ada565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612300577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526122ee858351611ea2565b945092850192908501906001016122b4565b5092979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261237157600080fd5b83018035915067ffffffffffffffff82111561238c57600080fd5b602001915036819003821315611b1c57600080fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036123f9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b60006020828403121561241257600080fd5b5051919050565b6000825161242b818460208701611e7e565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561248357835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101612451565b5090969550505050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122031f6eef3ac86d98f98d57a8938e28d1c235d7ac68ea2eb09a7f7e5e54fd1fe4364736f6c63430008130033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x32EA CODESIZE SUB DUP1 PUSH2 0x32EA DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x90 JUMP JUMPDEST DUP1 ADDRESS PUSH1 0x40 MLOAD PUSH2 0x3D SWAP1 PUSH2 0x83 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x70 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 MSTORE POP PUSH2 0xC0 JUMP JUMPDEST PUSH2 0x2603 DUP1 PUSH2 0xCE7 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0xBFF PUSH2 0xE8 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH1 0x51 ADD MSTORE DUP2 DUP2 PUSH2 0x166 ADD MSTORE PUSH2 0x380 ADD MSTORE PUSH2 0xBFF PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0x46 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8117ABC1 EQ PUSH3 0x4B JUMPI DUP1 PUSH4 0x94F7E8E0 EQ PUSH3 0x9C JUMPI DUP1 PUSH4 0xB54C02F2 EQ PUSH3 0xB3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x73 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x73 PUSH3 0xAD CALLDATASIZE PUSH1 0x4 PUSH3 0x44E JUMP JUMPDEST PUSH3 0xCA JUMP JUMPDEST PUSH3 0x73 PUSH3 0xC4 CALLDATASIZE PUSH1 0x4 PUSH3 0x44E JUMP JUMPDEST PUSH3 0x2B1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH3 0xE0 SWAP2 SWAP1 PUSH3 0x545 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA224CEE700000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP1 MLOAD SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH3 0x18F SWAP2 PUSH32 0x0 SWAP2 DUP6 SWAP2 ADD PUSH3 0x5C7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH3 0x1B4 SWAP1 PUSH3 0x3E7 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP3 DUP3 SUB DUP2 ADD DUP4 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD AND PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x1F8 SWAP2 SWAP1 DUP5 SWAP1 PUSH1 0x20 ADD PUSH3 0x637 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP3 DUP6 ADD MSTORE ADDRESS PUSH1 0x60 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x21 DUP6 ADD MSTORE PUSH1 0x35 DUP5 ADD DUP10 SWAP1 MSTORE PUSH1 0x55 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP6 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x75 SWAP1 SWAP4 ADD SWAP1 SWAP2 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP4 POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x2C0 DUP5 DUP5 PUSH3 0xCA JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND EXTCODESIZE DUP1 ISZERO PUSH3 0x2EA JUMPI POP SWAP1 POP PUSH3 0x2AB JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH3 0x2FF SWAP2 SWAP1 PUSH3 0x545 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA224CEE700000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE MLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 DUP7 SWAP1 PUSH32 0x0 SWAP1 DUP5 SWAP1 PUSH3 0x3AD SWAP1 PUSH3 0x3E7 JUMP JUMPDEST PUSH3 0x3BA SWAP3 SWAP2 SWAP1 PUSH3 0x5C7 JUMP JUMPDEST DUP2 SWAP1 PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE2 SWAP1 POP DUP1 ISZERO DUP1 ISZERO PUSH3 0x3DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x55F DUP1 PUSH3 0x66B DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH3 0x449 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x47B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x490 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH3 0x4A7 JUMPI PUSH3 0x4A7 PUSH3 0x3F5 JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP7 DUP3 GT OR ISZERO PUSH3 0x4ED JUMPI PUSH3 0x4ED PUSH3 0x3F5 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP3 DUP4 MSTORE DUP2 DUP4 ADD SWAP4 POP DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP10 DUP5 GT ISZERO PUSH3 0x50C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH3 0x535 JUMPI PUSH3 0x525 DUP7 PUSH3 0x424 JUMP JUMPDEST DUP6 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP4 DUP3 ADD SWAP4 PUSH3 0x511 JUMP JUMPDEST SWAP10 SWAP8 SWAP1 SWAP2 ADD CALLDATALOAD SWAP8 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x595 JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH3 0x561 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x5BE JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x5A4 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x40 DUP5 ADD MSTORE PUSH3 0x604 DUP2 PUSH1 0x60 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x5A1 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x60 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH3 0x64B DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH3 0x5A1 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH3 0x661 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH3 0x5A1 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x55F CODESIZE SUB DUP1 PUSH2 0x55F DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x22 SWAP2 PUSH2 0x2F8 JUMP JUMPDEST PUSH2 0x4D PUSH1 0x1 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBD PUSH2 0x3C6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x518 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE EQ PUSH2 0x69 JUMPI PUSH2 0x69 PUSH2 0x3E7 JUMP JUMPDEST PUSH2 0x75 DUP3 DUP3 PUSH1 0x0 PUSH2 0x7C JUMP JUMPDEST POP POP PUSH2 0x44C JUMP JUMPDEST PUSH2 0x85 DUP4 PUSH2 0xA8 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x92 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0xA3 JUMPI PUSH2 0xA1 DUP4 DUP4 PUSH2 0xE8 JUMP JUMPDEST POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xB1 DUP2 PUSH2 0x116 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x10D DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x538 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x1AE JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 EXTCODESIZE PUSH2 0x17F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x518 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 DUP4 EXTCODESIZE PUSH2 0x20D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x176 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x228 SWAP2 SWAP1 PUSH2 0x3FD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x263 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x268 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x279 DUP3 DUP3 DUP7 PUSH2 0x285 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x294 JUMPI POP DUP2 PUSH2 0x27E JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x2A4 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x176 SWAP2 SWAP1 PUSH2 0x419 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2EF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2D7 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x30B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x33F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x365 JUMPI PUSH2 0x365 PUSH2 0x2BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x38D JUMPI PUSH2 0x38D PUSH2 0x2BE JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x3A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B7 DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2D4 JUMP JUMPDEST DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x110 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x40F DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2D4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x438 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2D4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xBE DUP1 PUSH2 0x45A PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE PUSH1 0x10 JUMPI PUSH1 0xE PUSH1 0x13 JUMP JUMPDEST STOP JUMPDEST PUSH1 0xE JUMPDEST PUSH1 0x1F PUSH1 0x1B PUSH1 0x21 JUMP JUMPDEST PUSH1 0x65 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH1 0x83 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD MSIZE OR PUSH23 0x48E7221CBADA3677E497C843B81C481A12709122F21B78 0xDC EXTCODESIZE SWAP15 0xEE 0xD PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A26469706673582212204E CALL 0xB4 PUSH32 0x9F7907780449D747D523DC9434A238B35D2BC77F3EA68AB707558AEC64736F6C PUSH4 0x43000813 STOP CALLER PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2603 CODESIZE SUB DUP1 PUSH3 0x2603 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x65 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0xA0 MSTORE AND PUSH1 0x80 MSTORE PUSH3 0xA4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH3 0x86 DUP2 PUSH3 0x4C JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x99 DUP2 PUSH3 0x4C JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x24EC PUSH3 0x117 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x334 ADD MSTORE DUP2 DUP2 PUSH2 0x60E ADD MSTORE DUP2 DUP2 PUSH2 0x89B ADD MSTORE DUP2 DUP2 PUSH2 0xA8F ADD MSTORE DUP2 DUP2 PUSH2 0xC09 ADD MSTORE DUP2 DUP2 PUSH2 0xCC7 ADD MSTORE DUP2 DUP2 PUSH2 0xD0E ADD MSTORE DUP2 DUP2 PUSH2 0x106B ADD MSTORE PUSH2 0x138B ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x3E7 ADD MSTORE DUP2 DUP2 PUSH2 0x64D ADD MSTORE DUP2 DUP2 PUSH2 0xACE ADD MSTORE PUSH2 0xD4D ADD MSTORE PUSH2 0x24EC PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4F1EF286 GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0xBC197C81 GT PUSH2 0x74 JUMPI DUP1 PUSH4 0xC5C03699 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xC5C03699 EQ PUSH2 0x3D5 JUMPI DUP1 PUSH4 0xD087D288 EQ PUSH2 0x409 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x41E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x378 JUMPI DUP1 PUSH4 0xC399EC88 EQ PUSH2 0x3C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0xA224CEE7 EQ PUSH2 0x305 JUMPI DUP1 PUSH4 0xB0D691FE EQ PUSH2 0x325 JUMPI DUP1 PUSH4 0xB61D27F6 EQ PUSH2 0x358 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1D06D40D GT PUSH2 0xFC JUMPI DUP1 PUSH4 0x3A871CDD GT PUSH2 0xE1 JUMPI DUP1 PUSH4 0x3A871CDD EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0x47E1DA2A EQ PUSH2 0x2CA JUMPI DUP1 PUSH4 0x4A58DB19 EQ PUSH2 0x2EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1D06D40D EQ PUSH2 0x24F JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x27C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x23DE29 EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0x25E7C27 EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x1D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x133 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D PUSH2 0x153 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B23 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17F PUSH2 0x17A CALLDATASIZE PUSH1 0x4 PUSH2 0x1BCE JUMP JUMPDEST PUSH2 0x464 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B4 PUSH2 0x1AF CALLDATASIZE PUSH1 0x4 PUSH2 0x1C10 JUMP JUMPDEST PUSH2 0x549 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x18B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21E PUSH2 0x1F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C29 JUMP JUMPDEST PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x18B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26F PUSH2 0x26A CALLDATASIZE PUSH1 0x4 PUSH2 0x1DC8 JUMP JUMPDEST PUSH2 0x580 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18B SWAP2 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x288 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EFF JUMP JUMPDEST PUSH2 0x5A9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x2B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F1A JUMP JUMPDEST PUSH2 0x5D0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x18B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D PUSH2 0x2E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FB3 JUMP JUMPDEST PUSH2 0x5F6 JUMP JUMPDEST PUSH2 0x15D PUSH2 0x899 JUMP JUMPDEST PUSH2 0x15D PUSH2 0x300 CALLDATASIZE PUSH1 0x4 PUSH2 0x204D JUMP JUMPDEST PUSH2 0x93F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x311 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D PUSH2 0x320 CALLDATASIZE PUSH1 0x4 PUSH2 0x209B JUMP JUMPDEST PUSH2 0x958 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x331 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x0 PUSH2 0x1B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x364 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D PUSH2 0x373 CALLDATASIZE PUSH1 0x4 PUSH2 0x2133 JUMP JUMPDEST PUSH2 0xA77 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x384 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21E PUSH2 0x393 CALLDATASIZE PUSH1 0x4 PUSH2 0x218D JUMP JUMPDEST PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0xBC3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B4 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x415 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0xC7A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21E PUSH2 0x439 CALLDATASIZE PUSH1 0x4 PUSH2 0x2227 JUMP JUMPDEST PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x4F7 JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x4E2312E000000000000000000000000000000000000000000000000000000000 EQ JUMPDEST DUP1 PUSH2 0x543 JUMPI POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x593 SWAP2 SWAP1 PUSH2 0x228D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5B2 DUP2 PUSH2 0xCF6 JUMP JUMPDEST PUSH2 0x5CD DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH1 0x0 PUSH2 0xDFB JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5DA PUSH2 0x1053 JUMP JUMPDEST PUSH2 0x5E4 DUP5 DUP5 PUSH2 0x10F4 JUMP JUMPDEST SWAP1 POP PUSH2 0x5EF DUP3 PUSH2 0x1222 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0x66F JUMPI POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ JUMPDEST PUSH2 0x700 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C7920656E74727920706F696E74206F722077616C6C657420666163746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72792063616E2063616C6C000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 DUP2 EQ PUSH2 0x769 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x77726F6E67206172726179206C656E6774687300000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6F7 JUMP JUMPDEST DUP3 DUP2 EQ PUSH2 0x7D2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x77726F6E672076616C756573206C656E67746873000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x890 JUMPI PUSH2 0x87E DUP8 DUP8 DUP4 DUP2 DUP2 LT PUSH2 0x7F2 JUMPI PUSH2 0x7F2 PUSH2 0x230D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x807 SWAP2 SWAP1 PUSH2 0x1EFF JUMP JUMPDEST DUP7 DUP7 DUP5 DUP2 DUP2 LT PUSH2 0x819 JUMPI PUSH2 0x819 PUSH2 0x230D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0x832 JUMPI PUSH2 0x832 PUSH2 0x230D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x844 SWAP2 SWAP1 PUSH2 0x233C JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x128D SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x888 DUP2 PUSH2 0x23A1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x7D5 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0xB760FAF900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0xB760FAF9 SWAP1 CALLVALUE SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x924 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x938 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x948 DUP3 PUSH2 0xCF6 JUMP JUMPDEST PUSH2 0x954 DUP3 DUP3 PUSH1 0x1 PUSH2 0xDFB JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x971 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x9FD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xA3C JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 AND PUSH2 0x101 OR SWAP1 SSTORE JUMPDEST PUSH2 0xA45 DUP3 PUSH2 0x130A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x954 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND SWAP1 SSTORE POP POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0xAF0 JUMPI POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ JUMPDEST PUSH2 0xB7C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C7920656E74727920706F696E74206F722077616C6C657420666163746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72792063616E2063616C6C000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH2 0xBBD DUP5 DUP5 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x128D SWAP3 POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC51 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC75 SWAP2 SWAP1 PUSH2 0x2400 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x35567E1A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x24 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x35567E1A SWAP1 PUSH1 0x44 ADD PUSH2 0xC34 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0xD6F JUMPI POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ JUMPDEST PUSH2 0x5CD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C7920656E74727920706F696E74206F722077616C6C657420666163746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72792063616E2063616C6C000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE3B PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0xE46 DUP5 PUSH2 0x13FA JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT DUP1 PUSH2 0xE53 JUMPI POP DUP2 JUMPDEST ISZERO PUSH2 0xE64 JUMPI PUSH2 0xE62 DUP5 DUP5 PUSH2 0x14EE JUMP JUMPDEST POP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 DUP1 SLOAD PUSH1 0xFF AND PUSH2 0x938 JUMPI DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR DUP2 SSTORE PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0xF5A SWAP1 DUP7 SWAP1 PUSH1 0x44 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x3659CFE600000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x14EE JUMP JUMPDEST POP DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP2 SSTORE PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 AND EQ PUSH2 0x104A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A207570677261646520627265616B732066 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7572746865722075706772616465730000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH2 0x938 DUP6 PUSH2 0x1513 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x10F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6163636F756E743A206E6F742066726F6D20456E747279506F696E7400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6F7 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x114E DUP4 PUSH1 0x40 MLOAD PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3C DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x5C ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1160 PUSH2 0x140 DUP7 ADD DUP7 PUSH2 0x233C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x116D SWAP2 SWAP1 PUSH2 0x1DC8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x1 SLOAD DUP2 LT ISZERO PUSH2 0x1216 JUMPI PUSH2 0x11A8 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1191 JUMPI PUSH2 0x1191 PUSH2 0x230D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH2 0x1560 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x11D1 JUMPI PUSH2 0x11D1 PUSH2 0x230D JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1204 JUMPI PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x543 JUMP JUMPDEST DUP1 PUSH2 0x120E DUP2 PUSH2 0x23A1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1172 JUMP JUMPDEST POP PUSH1 0x0 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5CD JUMPI PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 CALLER SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP5 SWAP1 DUP5 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x938 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x938 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x12B6 SWAP2 SWAP1 PUSH2 0x2419 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x12F3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x12F8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x938 JUMPI DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x1375 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6E6F206F776E6572730000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6F7 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1388 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x1A12 JUMP JUMPDEST POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8AFFFD56ADB385A94A6B7426D4E3F51E2F9DE8984C19093C2DDCCF8FCFDDFE8D DUP3 PUSH1 0x40 MLOAD PUSH2 0x13EF SWAP2 SWAP1 PUSH2 0x2435 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST DUP1 EXTCODESIZE PUSH2 0x1488 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5EF DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2490 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x161C JUMP JUMPDEST PUSH2 0x151C DUP2 PUSH2 0x13FA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x41 SUB PUSH2 0x1593 JUMPI PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0x1589 DUP7 DUP3 DUP6 DUP6 PUSH2 0x172E JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x543 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x40 SUB PUSH2 0x15BA JUMPI PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x15B1 DUP6 DUP4 DUP4 PUSH2 0x1986 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x543 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x60 DUP4 EXTCODESIZE PUSH2 0x16AC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E74726163740000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x16D4 SWAP2 SWAP1 PUSH2 0x2419 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x170F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1714 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1724 DUP3 DUP3 DUP7 PUSH2 0x19BF JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP3 GT ISZERO PUSH2 0x17E0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST DUP4 PUSH1 0xFF AND PUSH1 0x1B EQ DUP1 PUSH2 0x17F5 JUMPI POP DUP4 PUSH1 0xFF AND PUSH1 0x1C EQ JUMPDEST PUSH2 0x1881 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202776272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6F7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP9 SWAP1 MSTORE PUSH1 0xFF DUP8 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18D5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD SWAP2 POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x197D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6F7 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0xFF DUP4 SWAP1 SHR PUSH1 0x1B ADD PUSH2 0x1724 DUP7 DUP3 DUP8 DUP6 PUSH2 0x172E JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x19CE JUMPI POP DUP2 PUSH2 0x5EF JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x19DE JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6F7 SWAP2 SWAP1 PUSH2 0x1EEC JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x1A8C JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1A8C JUMPI DUP3 MLOAD DUP3 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1A32 JUMP JUMPDEST POP PUSH2 0x1A98 SWAP3 SWAP2 POP PUSH2 0x1A9C JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1A98 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1A9D JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1AD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1AEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1B1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x1B3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B48 DUP10 PUSH2 0x1AB1 JUMP JUMPDEST SWAP8 POP PUSH2 0x1B56 PUSH1 0x20 DUP11 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP7 POP PUSH2 0x1B64 PUSH1 0x40 DUP11 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1B88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B94 DUP13 DUP4 DUP14 ADD PUSH2 0x1ADA JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0xA0 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1BAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BBA DUP12 DUP3 DUP13 ADD PUSH2 0x1ADA JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x5EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1C41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C4A DUP7 PUSH2 0x1AB1 JUMP JUMPDEST SWAP5 POP PUSH2 0x1C58 PUSH1 0x20 DUP8 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C87 DUP9 DUP3 DUP10 ADD PUSH2 0x1ADA JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1D0E JUMPI PUSH2 0x1D0E PUSH2 0x1C98 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1D30 JUMPI PUSH2 0x1D30 PUSH2 0x1C98 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D65 JUMPI PUSH2 0x1D65 PUSH2 0x1C98 JUMP JUMPDEST PUSH2 0x1D96 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x1CC7 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x1DAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1DDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1DF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1E1A PUSH2 0x1E15 DUP3 PUSH2 0x1D16 JUMP JUMPDEST PUSH2 0x1CC7 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP9 DUP4 GT ISZERO PUSH2 0x1E39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 ADD JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1E71 JUMPI DUP1 CALLDATALOAD DUP6 DUP2 GT ISZERO PUSH2 0x1E55 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1E63 DUP12 DUP10 DUP4 DUP11 ADD ADD PUSH2 0x1D3A JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x1E3D JUMP JUMPDEST POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1E99 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1E81 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1EBA DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1E7E JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x5EF PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1EA2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1F11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5EF DUP3 PUSH2 0x1AB1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1F2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 ADD PUSH2 0x160 DUP2 DUP8 SUB SLT ISZERO PUSH2 0x1F59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 SWAP1 SWAP5 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1F80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1B1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1FCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1FE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FF0 DUP11 DUP4 DUP12 ADD PUSH2 0x1F6E JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2009 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2015 DUP11 DUP4 DUP12 ADD PUSH2 0x1F6E JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x202E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x203B DUP10 DUP3 DUP11 ADD PUSH2 0x1F6E JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2060 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2069 DUP4 PUSH2 0x1AB1 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2085 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2091 DUP6 DUP3 DUP7 ADD PUSH2 0x1D3A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x20AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x20C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x20D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x20E4 PUSH2 0x1E15 DUP3 PUSH2 0x1D16 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD DUP4 ADD SWAP1 DUP4 DUP2 ADD SWAP1 DUP8 DUP4 GT ISZERO PUSH2 0x2103 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 DUP5 ADD SWAP3 JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0x2128 JUMPI PUSH2 0x2119 DUP5 PUSH2 0x1AB1 JUMP JUMPDEST DUP3 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH2 0x2108 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2149 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2152 DUP6 PUSH2 0x1AB1 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2175 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2181 DUP8 DUP3 DUP9 ADD PUSH2 0x1ADA JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x21A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x21B2 DUP10 PUSH2 0x1AB1 JUMP JUMPDEST SWAP8 POP PUSH2 0x21C0 PUSH1 0x20 DUP11 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x21DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x21E9 DUP13 DUP4 DUP14 ADD PUSH2 0x1F6E JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x220E DUP13 DUP4 DUP14 ADD PUSH2 0x1F6E JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1BAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x2240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2249 DUP8 PUSH2 0x1AB1 JUMP JUMPDEST SWAP6 POP PUSH2 0x2257 PUSH1 0x20 DUP9 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x203B DUP10 DUP3 DUP11 ADD PUSH2 0x1ADA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2300 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x22EE DUP6 DUP4 MLOAD PUSH2 0x1EA2 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x22B4 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x2371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x238C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x1B1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x23F9 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2412 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x242B DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1E7E JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2483 JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2451 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x7066735822122031F6EE RETURN 0xAC DUP7 0xD9 DUP16 SWAP9 0xD5 PUSH27 0x8938E28D1C235D7AC68EA2EB09A7F7E5E54FD1FE4364736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"340:1351:24:-:0;;;420:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;500:10;520:4;489:37;;;;;:::i;:::-;-1:-1:-1;;;;;577:15:26;;;559:34;;629:15;;624:2;609:18;;602:43;509:2;494:18;489:37:24;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;466:60:24;;;-1:-1:-1;340:1351:24;;;;;;;;;;:::o;14:309:26:-;103:6;156:2;144:9;135:7;131:23;127:32;124:52;;;172:1;169;162:12;124:52;198:16;;-1:-1:-1;;;;;243:31:26;;233:42;;223:70;;289:1;286;279:12;223:70;312:5;14:309;-1:-1:-1;;;14:309:26:o;328:323::-;340:1351:24;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@computeAddress_1791":{"entryPoint":null,"id":1791,"parameterSlots":2,"returnSlots":1},"@computeAddress_1830":{"entryPoint":null,"id":1830,"parameterSlots":3,"returnSlots":1},"@createAccount_3044":{"entryPoint":689,"id":3044,"parameterSlots":2,"returnSlots":1},"@getAddress_3101":{"entryPoint":202,"id":3101,"parameterSlots":2,"returnSlots":1},"@walletImplementation_2951":{"entryPoint":null,"id":2951,"parameterSlots":0,"returnSlots":0},"abi_decode_address":{"entryPoint":1060,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_uint256":{"entryPoint":1102,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_packed_t_bytes1_t_address_t_bytes32_t_bytes32__to_t_bytes1_t_address_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":1591,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_bytes_memory_ptr__to_t_address_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":1479,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":1349,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_Wallet_$2938__to_t_address_payable__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":1441,"id":null,"parameterSlots":3,"returnSlots":0},"panic_error_0x41":{"entryPoint":1013,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4691:26","statements":[{"nodeType":"YulBlock","src":"6:3:26","statements":[]},{"body":{"nodeType":"YulBlock","src":"138:125:26","statements":[{"nodeType":"YulAssignment","src":"148:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"160:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"171:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"156:3:26"},"nodeType":"YulFunctionCall","src":"156:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"148:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"190:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"205:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"213:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"201:3:26"},"nodeType":"YulFunctionCall","src":"201:55:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"183:6:26"},"nodeType":"YulFunctionCall","src":"183:74:26"},"nodeType":"YulExpressionStatement","src":"183:74:26"}]},"name":"abi_encode_tuple_t_contract$_Wallet_$2938__to_t_address_payable__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"107:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"118:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"129:4:26","type":""}],"src":"14:249:26"},{"body":{"nodeType":"YulBlock","src":"300:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"310:6:26"},"nodeType":"YulFunctionCall","src":"310:88:26"},"nodeType":"YulExpressionStatement","src":"310:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"414:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"417:4:26","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"407:6:26"},"nodeType":"YulFunctionCall","src":"407:15:26"},"nodeType":"YulExpressionStatement","src":"407:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"438:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"441:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"431:6:26"},"nodeType":"YulFunctionCall","src":"431:15:26"},"nodeType":"YulExpressionStatement","src":"431:15:26"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"268:184:26"},{"body":{"nodeType":"YulBlock","src":"506:147:26","statements":[{"nodeType":"YulAssignment","src":"516:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"538:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"525:12:26"},"nodeType":"YulFunctionCall","src":"525:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"516:5:26"}]},{"body":{"nodeType":"YulBlock","src":"631:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"640:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"643:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"633:6:26"},"nodeType":"YulFunctionCall","src":"633:12:26"},"nodeType":"YulExpressionStatement","src":"633:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"567:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"585:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"574:3:26"},"nodeType":"YulFunctionCall","src":"574:54:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"564:2:26"},"nodeType":"YulFunctionCall","src":"564:65:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"557:6:26"},"nodeType":"YulFunctionCall","src":"557:73:26"},"nodeType":"YulIf","src":"554:93:26"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"485:6:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"496:5:26","type":""}],"src":"457:196:26"},{"body":{"nodeType":"YulBlock","src":"770:1138:26","statements":[{"body":{"nodeType":"YulBlock","src":"816:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"825:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"828:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"818:6:26"},"nodeType":"YulFunctionCall","src":"818:12:26"},"nodeType":"YulExpressionStatement","src":"818:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"791:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"800:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"787:3:26"},"nodeType":"YulFunctionCall","src":"787:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"812:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"783:3:26"},"nodeType":"YulFunctionCall","src":"783:32:26"},"nodeType":"YulIf","src":"780:52:26"},{"nodeType":"YulVariableDeclaration","src":"841:37:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"868:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"855:12:26"},"nodeType":"YulFunctionCall","src":"855:23:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"845:6:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"887:28:26","value":{"kind":"number","nodeType":"YulLiteral","src":"897:18:26","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"891:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"942:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"951:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"954:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"944:6:26"},"nodeType":"YulFunctionCall","src":"944:12:26"},"nodeType":"YulExpressionStatement","src":"944:12:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"930:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"938:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"927:2:26"},"nodeType":"YulFunctionCall","src":"927:14:26"},"nodeType":"YulIf","src":"924:34:26"},{"nodeType":"YulVariableDeclaration","src":"967:32:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"981:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"992:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"977:3:26"},"nodeType":"YulFunctionCall","src":"977:22:26"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"971:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1047:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1056:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1059:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1049:6:26"},"nodeType":"YulFunctionCall","src":"1049:12:26"},"nodeType":"YulExpressionStatement","src":"1049:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1026:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"1030:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1022:3:26"},"nodeType":"YulFunctionCall","src":"1022:13:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1037:7:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1018:3:26"},"nodeType":"YulFunctionCall","src":"1018:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1011:6:26"},"nodeType":"YulFunctionCall","src":"1011:35:26"},"nodeType":"YulIf","src":"1008:55:26"},{"nodeType":"YulVariableDeclaration","src":"1072:26:26","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1095:2:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1082:12:26"},"nodeType":"YulFunctionCall","src":"1082:16:26"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"1076:2:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1107:14:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1117:4:26","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"1111:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1144:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1146:16:26"},"nodeType":"YulFunctionCall","src":"1146:18:26"},"nodeType":"YulExpressionStatement","src":"1146:18:26"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1136:2:26"},{"name":"_1","nodeType":"YulIdentifier","src":"1140:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1133:2:26"},"nodeType":"YulFunctionCall","src":"1133:10:26"},"nodeType":"YulIf","src":"1130:36:26"},{"nodeType":"YulVariableDeclaration","src":"1175:20:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1189:1:26","type":"","value":"5"},{"name":"_3","nodeType":"YulIdentifier","src":"1192:2:26"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1185:3:26"},"nodeType":"YulFunctionCall","src":"1185:10:26"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"1179:2:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1204:23:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1224:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1218:5:26"},"nodeType":"YulFunctionCall","src":"1218:9:26"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1208:6:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1236:115:26","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1258:6:26"},{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"1274:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"1278:2:26","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1270:3:26"},"nodeType":"YulFunctionCall","src":"1270:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"1283:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1266:3:26"},"nodeType":"YulFunctionCall","src":"1266:84:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1254:3:26"},"nodeType":"YulFunctionCall","src":"1254:97:26"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1240:10:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1410:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1412:16:26"},"nodeType":"YulFunctionCall","src":"1412:18:26"},"nodeType":"YulExpressionStatement","src":"1412:18:26"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1369:10:26"},{"name":"_1","nodeType":"YulIdentifier","src":"1381:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1366:2:26"},"nodeType":"YulFunctionCall","src":"1366:18:26"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1389:10:26"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1401:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1386:2:26"},"nodeType":"YulFunctionCall","src":"1386:22:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1363:2:26"},"nodeType":"YulFunctionCall","src":"1363:46:26"},"nodeType":"YulIf","src":"1360:72:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1448:2:26","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1452:10:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1441:6:26"},"nodeType":"YulFunctionCall","src":"1441:22:26"},"nodeType":"YulExpressionStatement","src":"1441:22:26"},{"nodeType":"YulVariableDeclaration","src":"1472:17:26","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1483:6:26"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"1476:3:26","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1505:6:26"},{"name":"_3","nodeType":"YulIdentifier","src":"1513:2:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1498:6:26"},"nodeType":"YulFunctionCall","src":"1498:18:26"},"nodeType":"YulExpressionStatement","src":"1498:18:26"},{"nodeType":"YulAssignment","src":"1525:22:26","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1536:6:26"},{"name":"_4","nodeType":"YulIdentifier","src":"1544:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1532:3:26"},"nodeType":"YulFunctionCall","src":"1532:15:26"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1525:3:26"}]},{"nodeType":"YulVariableDeclaration","src":"1556:34:26","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1578:2:26"},{"name":"_5","nodeType":"YulIdentifier","src":"1582:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1574:3:26"},"nodeType":"YulFunctionCall","src":"1574:11:26"},{"name":"_4","nodeType":"YulIdentifier","src":"1587:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1570:3:26"},"nodeType":"YulFunctionCall","src":"1570:20:26"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"1560:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1622:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1631:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1634:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1624:6:26"},"nodeType":"YulFunctionCall","src":"1624:12:26"},"nodeType":"YulExpressionStatement","src":"1624:12:26"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"1605:6:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1613:7:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1602:2:26"},"nodeType":"YulFunctionCall","src":"1602:19:26"},"nodeType":"YulIf","src":"1599:39:26"},{"nodeType":"YulVariableDeclaration","src":"1647:22:26","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1662:2:26"},{"name":"_4","nodeType":"YulIdentifier","src":"1666:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1658:3:26"},"nodeType":"YulFunctionCall","src":"1658:11:26"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"1651:3:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1734:92:26","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1755:3:26"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1779:3:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1760:18:26"},"nodeType":"YulFunctionCall","src":"1760:23:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1748:6:26"},"nodeType":"YulFunctionCall","src":"1748:36:26"},"nodeType":"YulExpressionStatement","src":"1748:36:26"},{"nodeType":"YulAssignment","src":"1797:19:26","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1808:3:26"},{"name":"_4","nodeType":"YulIdentifier","src":"1813:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1804:3:26"},"nodeType":"YulFunctionCall","src":"1804:12:26"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1797:3:26"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1689:3:26"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"1694:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1686:2:26"},"nodeType":"YulFunctionCall","src":"1686:15:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1702:23:26","statements":[{"nodeType":"YulAssignment","src":"1704:19:26","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1715:3:26"},{"name":"_4","nodeType":"YulIdentifier","src":"1720:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1711:3:26"},"nodeType":"YulFunctionCall","src":"1711:12:26"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"1704:3:26"}]}]},"pre":{"nodeType":"YulBlock","src":"1682:3:26","statements":[]},"src":"1678:148:26"},{"nodeType":"YulAssignment","src":"1835:16:26","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1845:6:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1835:6:26"}]},{"nodeType":"YulAssignment","src":"1860:42:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1887:9:26"},{"name":"_4","nodeType":"YulIdentifier","src":"1898:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1883:3:26"},"nodeType":"YulFunctionCall","src":"1883:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1870:12:26"},"nodeType":"YulFunctionCall","src":"1870:32:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1860:6:26"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"728:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"739:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"751:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"759:6:26","type":""}],"src":"658:1250:26"},{"body":{"nodeType":"YulBlock","src":"2014:125:26","statements":[{"nodeType":"YulAssignment","src":"2024:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2036:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2047:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2032:3:26"},"nodeType":"YulFunctionCall","src":"2032:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2024:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2066:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2081:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2089:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2077:3:26"},"nodeType":"YulFunctionCall","src":"2077:55:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2059:6:26"},"nodeType":"YulFunctionCall","src":"2059:74:26"},"nodeType":"YulExpressionStatement","src":"2059:74:26"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1983:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1994:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2005:4:26","type":""}],"src":"1913:226:26"},{"body":{"nodeType":"YulBlock","src":"2295:530:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2305:12:26","value":{"kind":"number","nodeType":"YulLiteral","src":"2315:2:26","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2309:2:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2326:32:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2344:9:26"},{"name":"_1","nodeType":"YulIdentifier","src":"2355:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2340:3:26"},"nodeType":"YulFunctionCall","src":"2340:18:26"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"2330:6:26","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2374:9:26"},{"name":"_1","nodeType":"YulIdentifier","src":"2385:2:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2367:6:26"},"nodeType":"YulFunctionCall","src":"2367:21:26"},"nodeType":"YulExpressionStatement","src":"2367:21:26"},{"nodeType":"YulVariableDeclaration","src":"2397:17:26","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"2408:6:26"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"2401:3:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2423:27:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2443:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2437:5:26"},"nodeType":"YulFunctionCall","src":"2437:13:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2427:6:26","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"2466:6:26"},{"name":"length","nodeType":"YulIdentifier","src":"2474:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2459:6:26"},"nodeType":"YulFunctionCall","src":"2459:22:26"},"nodeType":"YulExpressionStatement","src":"2459:22:26"},{"nodeType":"YulAssignment","src":"2490:25:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2501:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2512:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2497:3:26"},"nodeType":"YulFunctionCall","src":"2497:18:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2490:3:26"}]},{"nodeType":"YulVariableDeclaration","src":"2524:29:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2542:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"2550:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2538:3:26"},"nodeType":"YulFunctionCall","src":"2538:15:26"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"2528:6:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2562:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"2571:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2566:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"2630:169:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2651:3:26"},{"arguments":[{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2666:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2660:5:26"},"nodeType":"YulFunctionCall","src":"2660:13:26"},{"kind":"number","nodeType":"YulLiteral","src":"2675:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2656:3:26"},"nodeType":"YulFunctionCall","src":"2656:62:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2644:6:26"},"nodeType":"YulFunctionCall","src":"2644:75:26"},"nodeType":"YulExpressionStatement","src":"2644:75:26"},{"nodeType":"YulAssignment","src":"2732:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2743:3:26"},{"name":"_1","nodeType":"YulIdentifier","src":"2748:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2739:3:26"},"nodeType":"YulFunctionCall","src":"2739:12:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2732:3:26"}]},{"nodeType":"YulAssignment","src":"2764:25:26","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2778:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"2786:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2774:3:26"},"nodeType":"YulFunctionCall","src":"2774:15:26"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2764:6:26"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2592:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"2595:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2589:2:26"},"nodeType":"YulFunctionCall","src":"2589:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2603:18:26","statements":[{"nodeType":"YulAssignment","src":"2605:14:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2614:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"2617:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2610:3:26"},"nodeType":"YulFunctionCall","src":"2610:9:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2605:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"2585:3:26","statements":[]},"src":"2581:218:26"},{"nodeType":"YulAssignment","src":"2808:11:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"2816:3:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2808:4:26"}]}]},"name":"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2264:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2275:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2286:4:26","type":""}],"src":"2144:681:26"},{"body":{"nodeType":"YulBlock","src":"2896:184:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2906:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"2915:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2910:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"2975:63:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3000:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"3005:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2996:3:26"},"nodeType":"YulFunctionCall","src":"2996:11:26"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3019:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"3024:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3015:3:26"},"nodeType":"YulFunctionCall","src":"3015:11:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3009:5:26"},"nodeType":"YulFunctionCall","src":"3009:18:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2989:6:26"},"nodeType":"YulFunctionCall","src":"2989:39:26"},"nodeType":"YulExpressionStatement","src":"2989:39:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2936:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"2939:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2933:2:26"},"nodeType":"YulFunctionCall","src":"2933:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2947:19:26","statements":[{"nodeType":"YulAssignment","src":"2949:15:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2958:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"2961:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2954:3:26"},"nodeType":"YulFunctionCall","src":"2954:10:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2949:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"2929:3:26","statements":[]},"src":"2925:113:26"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3058:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"3063:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3054:3:26"},"nodeType":"YulFunctionCall","src":"3054:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"3072:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3047:6:26"},"nodeType":"YulFunctionCall","src":"3047:27:26"},"nodeType":"YulExpressionStatement","src":"3047:27:26"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"2874:3:26","type":""},{"name":"dst","nodeType":"YulTypedName","src":"2879:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"2884:6:26","type":""}],"src":"2830:250:26"},{"body":{"nodeType":"YulBlock","src":"3232:426:26","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3249:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3264:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3272:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3260:3:26"},"nodeType":"YulFunctionCall","src":"3260:55:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3242:6:26"},"nodeType":"YulFunctionCall","src":"3242:74:26"},"nodeType":"YulExpressionStatement","src":"3242:74:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3336:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3347:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3332:3:26"},"nodeType":"YulFunctionCall","src":"3332:18:26"},{"kind":"number","nodeType":"YulLiteral","src":"3352:2:26","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3325:6:26"},"nodeType":"YulFunctionCall","src":"3325:30:26"},"nodeType":"YulExpressionStatement","src":"3325:30:26"},{"nodeType":"YulVariableDeclaration","src":"3364:27:26","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"3384:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3378:5:26"},"nodeType":"YulFunctionCall","src":"3378:13:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3368:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3411:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3422:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3407:3:26"},"nodeType":"YulFunctionCall","src":"3407:18:26"},{"name":"length","nodeType":"YulIdentifier","src":"3427:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3400:6:26"},"nodeType":"YulFunctionCall","src":"3400:34:26"},"nodeType":"YulExpressionStatement","src":"3400:34:26"},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"3482:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3490:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3478:3:26"},"nodeType":"YulFunctionCall","src":"3478:15:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3499:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3510:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3495:3:26"},"nodeType":"YulFunctionCall","src":"3495:18:26"},{"name":"length","nodeType":"YulIdentifier","src":"3515:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"3443:34:26"},"nodeType":"YulFunctionCall","src":"3443:79:26"},"nodeType":"YulExpressionStatement","src":"3443:79:26"},{"nodeType":"YulAssignment","src":"3531:121:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3547:9:26"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3566:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3574:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3562:3:26"},"nodeType":"YulFunctionCall","src":"3562:15:26"},{"kind":"number","nodeType":"YulLiteral","src":"3579:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3558:3:26"},"nodeType":"YulFunctionCall","src":"3558:88:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3543:3:26"},"nodeType":"YulFunctionCall","src":"3543:104:26"},{"kind":"number","nodeType":"YulLiteral","src":"3649:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3539:3:26"},"nodeType":"YulFunctionCall","src":"3539:113:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3531:4:26"}]}]},"name":"abi_encode_tuple_t_address_t_bytes_memory_ptr__to_t_address_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3193:9:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3204:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3212:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3223:4:26","type":""}],"src":"3085:573:26"},{"body":{"nodeType":"YulBlock","src":"3846:309:26","statements":[{"nodeType":"YulVariableDeclaration","src":"3856:27:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3876:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3870:5:26"},"nodeType":"YulFunctionCall","src":"3870:13:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3860:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3931:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3939:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3927:3:26"},"nodeType":"YulFunctionCall","src":"3927:17:26"},{"name":"pos","nodeType":"YulIdentifier","src":"3946:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"3951:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"3892:34:26"},"nodeType":"YulFunctionCall","src":"3892:66:26"},"nodeType":"YulExpressionStatement","src":"3892:66:26"},{"nodeType":"YulVariableDeclaration","src":"3967:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3984:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"3989:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3980:3:26"},"nodeType":"YulFunctionCall","src":"3980:16:26"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"3971:5:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4005:29:26","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4027:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4021:5:26"},"nodeType":"YulFunctionCall","src":"4021:13:26"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"4009:8:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"4082:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"4090:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4078:3:26"},"nodeType":"YulFunctionCall","src":"4078:17:26"},{"name":"end_1","nodeType":"YulIdentifier","src":"4097:5:26"},{"name":"length_1","nodeType":"YulIdentifier","src":"4104:8:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"4043:34:26"},"nodeType":"YulFunctionCall","src":"4043:70:26"},"nodeType":"YulExpressionStatement","src":"4043:70:26"},{"nodeType":"YulAssignment","src":"4122:27:26","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"4133:5:26"},{"name":"length_1","nodeType":"YulIdentifier","src":"4140:8:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4129:3:26"},"nodeType":"YulFunctionCall","src":"4129:20:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4122:3:26"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3814:3:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3819:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3827:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3838:3:26","type":""}],"src":"3663:492:26"},{"body":{"nodeType":"YulBlock","src":"4361:328:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4378:3:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4387:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"4395:66:26","type":"","value":"0xff00000000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4383:3:26"},"nodeType":"YulFunctionCall","src":"4383:79:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4371:6:26"},"nodeType":"YulFunctionCall","src":"4371:92:26"},"nodeType":"YulExpressionStatement","src":"4371:92:26"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4483:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"4488:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4479:3:26"},"nodeType":"YulFunctionCall","src":"4479:11:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4500:2:26","type":"","value":"96"},{"name":"value1","nodeType":"YulIdentifier","src":"4504:6:26"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4496:3:26"},"nodeType":"YulFunctionCall","src":"4496:15:26"},{"kind":"number","nodeType":"YulLiteral","src":"4513:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4492:3:26"},"nodeType":"YulFunctionCall","src":"4492:88:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4472:6:26"},"nodeType":"YulFunctionCall","src":"4472:109:26"},"nodeType":"YulExpressionStatement","src":"4472:109:26"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4601:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"4606:2:26","type":"","value":"21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4597:3:26"},"nodeType":"YulFunctionCall","src":"4597:12:26"},{"name":"value2","nodeType":"YulIdentifier","src":"4611:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4590:6:26"},"nodeType":"YulFunctionCall","src":"4590:28:26"},"nodeType":"YulExpressionStatement","src":"4590:28:26"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4638:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"4643:2:26","type":"","value":"53"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4634:3:26"},"nodeType":"YulFunctionCall","src":"4634:12:26"},{"name":"value3","nodeType":"YulIdentifier","src":"4648:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4627:6:26"},"nodeType":"YulFunctionCall","src":"4627:28:26"},"nodeType":"YulExpressionStatement","src":"4627:28:26"},{"nodeType":"YulAssignment","src":"4664:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4675:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"4680:2:26","type":"","value":"85"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4671:3:26"},"nodeType":"YulFunctionCall","src":"4671:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4664:3:26"}]}]},"name":"abi_encode_tuple_packed_t_bytes1_t_address_t_bytes32_t_bytes32__to_t_bytes1_t_address_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4313:3:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4318:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4326:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4334:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4342:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4353:3:26","type":""}],"src":"4160:529:26"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_contract$_Wallet_$2938__to_t_address_payable__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        if gt(_3, _1) { panic_error_0x41() }\n        let _5 := shl(5, _3)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _3)\n        dst := add(memPtr, _4)\n        let srcEnd := add(add(_2, _5), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            mstore(dst, abi_decode_address(src))\n            dst := add(dst, _4)\n        }\n        value0 := memPtr\n        value1 := calldataload(add(headStart, _4))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), 0xffffffffffffffffffffffffffffffffffffffff))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_t_address_t_bytes_memory_ptr__to_t_address_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 64)\n        let length := mload(value1)\n        mstore(add(headStart, 64), length)\n        copy_memory_to_memory_with_cleanup(add(value1, 32), add(headStart, 96), length)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 96)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_packed_t_bytes1_t_address_t_bytes32_t_bytes32__to_t_bytes1_t_address_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value3, value2, value1, value0) -> end\n    {\n        mstore(pos, and(value0, 0xff00000000000000000000000000000000000000000000000000000000000000))\n        mstore(add(pos, 1), and(shl(96, value1), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        mstore(add(pos, 21), value2)\n        mstore(add(pos, 53), value3)\n        end := add(pos, 85)\n    }\n}","id":26,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"2951":[{"length":32,"start":81},{"length":32,"start":358},{"length":32,"start":896}]},"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060043610620000465760003560e01c80638117abc1146200004b57806394f7e8e0146200009c578063b54c02f214620000b3575b600080fd5b620000737f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b62000073620000ad3660046200044e565b620000ca565b62000073620000c43660046200044e565b620002b1565b60008083604051602401620000e0919062000545565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa224cee70000000000000000000000000000000000000000000000000000000017905290519192506000916200018f917f000000000000000000000000000000000000000000000000000000000000000091859101620005c7565b6040516020818303038152906040529050600060405180602001620001b490620003e7565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f909101166040819052620001f89190849060200162000637565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815282825280516020918201207fff00000000000000000000000000000000000000000000000000000000000000828501523060601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602185015260358401899052605580850191909152825180850390910181526075909301909152815191012093505050505b92915050565b600080620002c08484620000ca565b905073ffffffffffffffffffffffffffffffffffffffff81163b8015620002ea57509050620002ab565b600085604051602401620002ff919062000545565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa224cee7000000000000000000000000000000000000000000000000000000001790525190915060009086907f0000000000000000000000000000000000000000000000000000000000000000908490620003ad90620003e7565b620003ba929190620005c7565b8190604051809103906000f5905080158015620003db573d6000803e3d6000fd5b50979650505050505050565b61055f806200066b83390190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b803573ffffffffffffffffffffffffffffffffffffffff811681146200044957600080fd5b919050565b600080604083850312156200046257600080fd5b823567ffffffffffffffff808211156200047b57600080fd5b818501915085601f8301126200049057600080fd5b8135602082821115620004a757620004a7620003f5565b8160051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108682111715620004ed57620004ed620003f5565b6040529283528183019350848101820192898411156200050c57600080fd5b948201945b838610156200053557620005258662000424565b8552948201949382019362000511565b9997909101359750505050505050565b6020808252825182820181905260009190848201906040850190845b818110156200059557835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010162000561565b50909695505050505050565b60005b83811015620005be578181015183820152602001620005a4565b50506000910152565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201526000825180604084015262000604816060850160208701620005a1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016060019392505050565b600083516200064b818460208801620005a1565b83519083019062000661818360208801620005a1565b0194935050505056fe608060405260405161055f38038061055f833981016040819052610022916102f8565b61004d60017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd6103c6565b60008051602061051883398151915214610069576100696103e7565b6100758282600061007c565b505061044c565b610085836100a8565b6000825111806100925750805b156100a3576100a183836100e8565b505b505050565b6100b181610116565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061010d8383604051806060016040528060278152602001610538602791396101ae565b90505b92915050565b803b61017f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b60008051602061051883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060833b61020d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610176565b600080856001600160a01b03168560405161022891906103fd565b600060405180830381855af49150503d8060008114610263576040519150601f19603f3d011682016040523d82523d6000602084013e610268565b606091505b509092509050610279828286610285565b925050505b9392505050565b6060831561029457508161027e565b8251156102a45782518084602001fd5b8160405162461bcd60e51b81526004016101769190610419565b634e487b7160e01b600052604160045260246000fd5b60005b838110156102ef5781810151838201526020016102d7565b50506000910152565b6000806040838503121561030b57600080fd5b82516001600160a01b038116811461032257600080fd5b60208401519092506001600160401b038082111561033f57600080fd5b818501915085601f83011261035357600080fd5b815181811115610365576103656102be565b604051601f8201601f19908116603f0116810190838211818310171561038d5761038d6102be565b816040528281528860208487010111156103a657600080fd5b6103b78360208301602088016102d4565b80955050505050509250929050565b8181038181111561011057634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052600160045260246000fd5b6000825161040f8184602087016102d4565b9190910192915050565b60208152600082518060208401526104388160408501602087016102d4565b601f01601f19169190910160400192915050565b60be8061045a6000396000f3fe608060405236601057600e6013565b005b600e5b601f601b6021565b6065565b565b600060607f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156083573d6000f35b3d6000fdfea26469706673582212200659177648e7221cbada3677e497c843b81c481a12709122f21b78dc3b9eee0d64736f6c63430008130033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204ef1b47f9f7907780449d747d523dc9434a238b35d2bc77f3ea68ab707558aec64736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0x46 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8117ABC1 EQ PUSH3 0x4B JUMPI DUP1 PUSH4 0x94F7E8E0 EQ PUSH3 0x9C JUMPI DUP1 PUSH4 0xB54C02F2 EQ PUSH3 0xB3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x73 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x73 PUSH3 0xAD CALLDATASIZE PUSH1 0x4 PUSH3 0x44E JUMP JUMPDEST PUSH3 0xCA JUMP JUMPDEST PUSH3 0x73 PUSH3 0xC4 CALLDATASIZE PUSH1 0x4 PUSH3 0x44E JUMP JUMPDEST PUSH3 0x2B1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH3 0xE0 SWAP2 SWAP1 PUSH3 0x545 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA224CEE700000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP1 MLOAD SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH3 0x18F SWAP2 PUSH32 0x0 SWAP2 DUP6 SWAP2 ADD PUSH3 0x5C7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH3 0x1B4 SWAP1 PUSH3 0x3E7 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP3 DUP3 SUB DUP2 ADD DUP4 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD AND PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x1F8 SWAP2 SWAP1 DUP5 SWAP1 PUSH1 0x20 ADD PUSH3 0x637 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP3 DUP6 ADD MSTORE ADDRESS PUSH1 0x60 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x21 DUP6 ADD MSTORE PUSH1 0x35 DUP5 ADD DUP10 SWAP1 MSTORE PUSH1 0x55 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP6 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x75 SWAP1 SWAP4 ADD SWAP1 SWAP2 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP4 POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x2C0 DUP5 DUP5 PUSH3 0xCA JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND EXTCODESIZE DUP1 ISZERO PUSH3 0x2EA JUMPI POP SWAP1 POP PUSH3 0x2AB JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH3 0x2FF SWAP2 SWAP1 PUSH3 0x545 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA224CEE700000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE MLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 DUP7 SWAP1 PUSH32 0x0 SWAP1 DUP5 SWAP1 PUSH3 0x3AD SWAP1 PUSH3 0x3E7 JUMP JUMPDEST PUSH3 0x3BA SWAP3 SWAP2 SWAP1 PUSH3 0x5C7 JUMP JUMPDEST DUP2 SWAP1 PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE2 SWAP1 POP DUP1 ISZERO DUP1 ISZERO PUSH3 0x3DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x55F DUP1 PUSH3 0x66B DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH3 0x449 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x47B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x490 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH3 0x4A7 JUMPI PUSH3 0x4A7 PUSH3 0x3F5 JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP7 DUP3 GT OR ISZERO PUSH3 0x4ED JUMPI PUSH3 0x4ED PUSH3 0x3F5 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP3 DUP4 MSTORE DUP2 DUP4 ADD SWAP4 POP DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP10 DUP5 GT ISZERO PUSH3 0x50C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH3 0x535 JUMPI PUSH3 0x525 DUP7 PUSH3 0x424 JUMP JUMPDEST DUP6 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP4 DUP3 ADD SWAP4 PUSH3 0x511 JUMP JUMPDEST SWAP10 SWAP8 SWAP1 SWAP2 ADD CALLDATALOAD SWAP8 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x595 JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH3 0x561 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x5BE JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x5A4 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x40 DUP5 ADD MSTORE PUSH3 0x604 DUP2 PUSH1 0x60 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x5A1 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x60 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH3 0x64B DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH3 0x5A1 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH3 0x661 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH3 0x5A1 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x55F CODESIZE SUB DUP1 PUSH2 0x55F DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x22 SWAP2 PUSH2 0x2F8 JUMP JUMPDEST PUSH2 0x4D PUSH1 0x1 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBD PUSH2 0x3C6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x518 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE EQ PUSH2 0x69 JUMPI PUSH2 0x69 PUSH2 0x3E7 JUMP JUMPDEST PUSH2 0x75 DUP3 DUP3 PUSH1 0x0 PUSH2 0x7C JUMP JUMPDEST POP POP PUSH2 0x44C JUMP JUMPDEST PUSH2 0x85 DUP4 PUSH2 0xA8 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x92 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0xA3 JUMPI PUSH2 0xA1 DUP4 DUP4 PUSH2 0xE8 JUMP JUMPDEST POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xB1 DUP2 PUSH2 0x116 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x10D DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x538 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x1AE JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 EXTCODESIZE PUSH2 0x17F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x518 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 DUP4 EXTCODESIZE PUSH2 0x20D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x176 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x228 SWAP2 SWAP1 PUSH2 0x3FD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x263 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x268 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x279 DUP3 DUP3 DUP7 PUSH2 0x285 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x294 JUMPI POP DUP2 PUSH2 0x27E JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x2A4 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x176 SWAP2 SWAP1 PUSH2 0x419 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2EF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2D7 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x30B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x33F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x365 JUMPI PUSH2 0x365 PUSH2 0x2BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x38D JUMPI PUSH2 0x38D PUSH2 0x2BE JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x3A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B7 DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2D4 JUMP JUMPDEST DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x110 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x40F DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2D4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x438 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2D4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xBE DUP1 PUSH2 0x45A PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE PUSH1 0x10 JUMPI PUSH1 0xE PUSH1 0x13 JUMP JUMPDEST STOP JUMPDEST PUSH1 0xE JUMPDEST PUSH1 0x1F PUSH1 0x1B PUSH1 0x21 JUMP JUMPDEST PUSH1 0x65 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH1 0x83 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD MSIZE OR PUSH23 0x48E7221CBADA3677E497C843B81C481A12709122F21B78 0xDC EXTCODESIZE SWAP15 0xEE 0xD PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A26469706673582212204E CALL 0xB4 PUSH32 0x9F7907780449D747D523DC9434A238B35D2BC77F3EA68AB707558AEC64736F6C PUSH4 0x43000813 STOP CALLER ","sourceMap":"340:1351:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;369:44;;;;;;;;213:42:26;201:55;;;183:74;;171:2;156:18;369:44:24;;;;;;;1108:581;;;;;;:::i;:::-;;:::i;539:563::-;;;;;;:::i;:::-;;:::i;1108:581::-;1210:7;1229:23;1289:6;1255:41;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;1338:87;;1255:41;;-1:-1:-1;;;1338:87:24;;1370:20;;1255:41;;1338:87;;:::i;:::-;;;;;;;;;;;;;1306:119;;1435:21;1489:31;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;1459:101;;1489:31;1534:16;;1489:31;1459:101;;:::i;:::-;;;;;;;;;;;;;;1594:19;;1459:101;1594:19;;;;2327:12:18;2310:60;;;4371:92:26;1878:4:18;4500:2:26;4496:15;4513:66;4492:88;4479:11;;;4472:109;4597:12;;;4590:28;;;4634:12;;;;4627:28;;;;2310:60:18;;;;;;;;;;4671:12:26;;;;2310:60:18;;;2300:71;;;;;;-1:-1:-1;;;;1108:581:24;;;;;:::o;539:563::-;641:6;659:12;674:24;685:6;693:4;674:10;:24::i;:::-;659:39;-1:-1:-1;727:16:24;;;;757:12;;753:71;;-1:-1:-1;807:4:24;-1:-1:-1;785:28:24;;753:71;834:23;894:6;860:41;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;932:114;860:41;;-1:-1:-1;;;963:4:24;;991:20;;860:41;;932:114;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;911:135:24;539:563;-1:-1:-1;;;;;;;539:563:24:o;-1:-1:-1:-;;;;;;;;:::o;268:184:26:-;320:77;317:1;310:88;417:4;414:1;407:15;441:4;438:1;431:15;457:196;525:20;;585:42;574:54;;564:65;;554:93;;643:1;640;633:12;554:93;457:196;;;:::o;658:1250::-;751:6;759;812:2;800:9;791:7;787:23;783:32;780:52;;;828:1;825;818:12;780:52;868:9;855:23;897:18;938:2;930:6;927:14;924:34;;;954:1;951;944:12;924:34;992:6;981:9;977:22;967:32;;1037:7;1030:4;1026:2;1022:13;1018:27;1008:55;;1059:1;1056;1049:12;1008:55;1095:2;1082:16;1117:4;1140:2;1136;1133:10;1130:36;;;1146:18;;:::i;:::-;1192:2;1189:1;1185:10;1224:2;1218:9;1283:66;1278:2;1274;1270:11;1266:84;1258:6;1254:97;1401:6;1389:10;1386:22;1381:2;1369:10;1366:18;1363:46;1360:72;;;1412:18;;:::i;:::-;1448:2;1441:22;1498:18;;;1532:15;;;;-1:-1:-1;1574:11:26;;;1570:20;;;1602:19;;;1599:39;;;1634:1;1631;1624:12;1599:39;1658:11;;;;1678:148;1694:6;1689:3;1686:15;1678:148;;;1760:23;1779:3;1760:23;:::i;:::-;1748:36;;1711:12;;;;1804;;;;1678:148;;;1845:6;1883:18;;;;1870:32;;-1:-1:-1;;;;;;;658:1250:26:o;2144:681::-;2315:2;2367:21;;;2437:13;;2340:18;;;2459:22;;;2286:4;;2315:2;2538:15;;;;2512:2;2497:18;;;2286:4;2581:218;2595:6;2592:1;2589:13;2581:218;;;2660:13;;2675:42;2656:62;2644:75;;2774:15;;;;2739:12;;;;2617:1;2610:9;2581:218;;;-1:-1:-1;2816:3:26;;2144:681;-1:-1:-1;;;;;;2144:681:26:o;2830:250::-;2915:1;2925:113;2939:6;2936:1;2933:13;2925:113;;;3015:11;;;3009:18;2996:11;;;2989:39;2961:2;2954:10;2925:113;;;-1:-1:-1;;3072:1:26;3054:16;;3047:27;2830:250::o;3085:573::-;3272:42;3264:6;3260:55;3249:9;3242:74;3352:2;3347;3336:9;3332:18;3325:30;3223:4;3384:6;3378:13;3427:6;3422:2;3411:9;3407:18;3400:34;3443:79;3515:6;3510:2;3499:9;3495:18;3490:2;3482:6;3478:15;3443:79;:::i;:::-;3574:2;3562:15;3579:66;3558:88;3543:104;;;;3649:2;3539:113;;3085:573;-1:-1:-1;;;3085:573:26:o;3663:492::-;3838:3;3876:6;3870:13;3892:66;3951:6;3946:3;3939:4;3931:6;3927:17;3892:66;:::i;:::-;4021:13;;3980:16;;;;4043:70;4021:13;3980:16;4090:4;4078:17;;4043:70;:::i;:::-;4129:20;;3663:492;-1:-1:-1;;;;3663:492:26:o"},"gasEstimates":{"creation":{"codeDepositCost":"614200","executionCost":"infinite","totalCost":"infinite"},"external":{"createAccount(address[],uint256)":"infinite","getAddress(address[],uint256)":"infinite","walletImplementation()":"infinite"}},"methodIdentifiers":{"createAccount(address[],uint256)":"b54c02f2","getAddress(address[],uint256)":"94f7e8e0","walletImplementation()":"8117abc1"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"entryPoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"contract Wallet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletImplementation\",\"outputs\":[{\"internalType\":\"contract Wallet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WalletFactory.sol\":\"WalletFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@account-abstraction/contracts/callback/TokenCallbackHandler.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-empty-blocks */\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\n/**\\n * Token callback handler.\\n *   Handles supported tokens' callbacks, allowing account receiving these tokens.\\n */\\ncontract TokenCallbackHandler is IERC777Recipient, IERC721Receiver, IERC1155Receiver {\\n    function tokensReceived(\\n        address,\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata,\\n        bytes calldata\\n    ) external pure override {\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC1155Receiver.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC1155Receiver.onERC1155BatchReceived.selector;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\n            interfaceId == type(IERC1155Receiver).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xfff3df5f5211d71158bb017ff791dc4fa85db53890f7bd72bac3a43d89e83752\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/core/BaseAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-empty-blocks */\\n\\nimport \\\"../interfaces/IAccount.sol\\\";\\nimport \\\"../interfaces/IEntryPoint.sol\\\";\\nimport \\\"./Helpers.sol\\\";\\n\\n/**\\n * Basic account implementation.\\n * this contract provides the basic logic for implementing the IAccount interface  - validateUserOp\\n * specific account implementation should inherit it and provide the account-specific logic\\n */\\nabstract contract BaseAccount is IAccount {\\n    using UserOperationLib for UserOperation;\\n\\n    //return value in case of signature failure, with no time-range.\\n    // equivalent to _packValidationData(true,0,0);\\n    uint256 constant internal SIG_VALIDATION_FAILED = 1;\\n\\n    /**\\n     * Return the account nonce.\\n     * This method returns the next sequential nonce.\\n     * For a nonce of a specific key, use `entrypoint.getNonce(account, key)`\\n     */\\n    function getNonce() public view virtual returns (uint256) {\\n        return entryPoint().getNonce(address(this), 0);\\n    }\\n\\n    /**\\n     * return the entryPoint used by this account.\\n     * subclass should return the current entryPoint used by this account.\\n     */\\n    function entryPoint() public view virtual returns (IEntryPoint);\\n\\n    /**\\n     * Validate user's signature and nonce.\\n     * subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external override virtual returns (uint256 validationData) {\\n        _requireFromEntryPoint();\\n        validationData = _validateSignature(userOp, userOpHash);\\n        _validateNonce(userOp.nonce);\\n        _payPrefund(missingAccountFunds);\\n    }\\n\\n    /**\\n     * ensure the request comes from the known entrypoint.\\n     */\\n    function _requireFromEntryPoint() internal virtual view {\\n        require(msg.sender == address(entryPoint()), \\\"account: not from EntryPoint\\\");\\n    }\\n\\n    /**\\n     * validate the signature is valid for this message.\\n     * @param userOp validate the userOp.signature field\\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\\n     *          (also hashes the entrypoint and chain id)\\n     * @return validationData signature and time-range of this operation\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If the account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash)\\n    internal virtual returns (uint256 validationData);\\n\\n    /**\\n     * Validate the nonce of the UserOperation.\\n     * This method may validate the nonce requirement of this account.\\n     * e.g.\\n     * To limit the nonce to use sequenced UserOps only (no \\\"out of order\\\" UserOps):\\n     *      `require(nonce < type(uint64).max)`\\n     * For a hypothetical account that *requires* the nonce to be out-of-order:\\n     *      `require(nonce & type(uint64).max == 0)`\\n     *\\n     * The actual nonce uniqueness is managed by the EntryPoint, and thus no other\\n     * action is needed by the account itself.\\n     *\\n     * @param nonce to validate\\n     *\\n     * solhint-disable-next-line no-empty-blocks\\n     */\\n    function _validateNonce(uint256 nonce) internal view virtual {\\n    }\\n\\n    /**\\n     * sends to the entrypoint (msg.sender) the missing funds for this transaction.\\n     * subclass MAY override this method for better funds management\\n     * (e.g. send to the entryPoint more than the minimum required, so that in future transactions\\n     * it will not be required to send again)\\n     * @param missingAccountFunds the minimum value this method should send the entrypoint.\\n     *  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\\n     */\\n    function _payPrefund(uint256 missingAccountFunds) internal virtual {\\n        if (missingAccountFunds != 0) {\\n            (bool success,) = payable(msg.sender).call{value : missingAccountFunds, gas : type(uint256).max}(\\\"\\\");\\n            (success);\\n            //ignore failure (its EntryPoint's job to verify, not account.)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5eb3253b32fd8ba8ae7b9d83da8e9924254a4d3d17a8772b41280e8572974b3c\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\",\"keccak256\":\"0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\ninterface IAccount {\\n\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp the operation that is about to be executed.\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external returns (uint256 validationData);\\n}\\n\",\"keccak256\":\"0x556a0e5980de18e90b115553ed502408155ba35f58642823010d9288047bc418\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp)\\n    external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatedSignature the aggregated signature\\n     */\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\\n}\\n\",\"keccak256\":\"0x060e9ddb0152250c269ba0640dc5753834ac44cf182a2837d508c0c529cae26a\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IEntryPoint.sol\":{\"content\":\"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\nimport \\\"./INonceManager.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager, INonceManager {\\n\\n    /***\\n     * An event emitted after each successful request\\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\\n     * @param sender - the account that generates this request.\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\n     * @param nonce - the nonce value from the request.\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\\n     */\\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\\n\\n    /**\\n     * account \\\"sender\\\" was deployed.\\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\\n     * @param sender the account that is deployed\\n     * @param factory the factory used to deploy this account (in the initCode)\\n     * @param paymaster the paymaster used by this UserOp\\n     */\\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\n     * @param userOpHash the request unique identifier.\\n     * @param sender the sender of this request\\n     * @param nonce the nonce used in the request\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\\n\\n    /**\\n     * an event emitted by handleOps(), before starting the execution loop.\\n     * any event emitted before this event, is part of the validation.\\n     */\\n    event BeforeExecution();\\n\\n    /**\\n     * signature aggregator used by the following UserOperationEvents within this bundle.\\n     */\\n    event SignatureAggregatorChanged(address indexed aggregator);\\n\\n    /**\\n     * a custom revert error of handleOps, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\n     *  @param reason - revert reason\\n     *      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\n     *      so a failure can be attributed to the correct entity.\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\n     */\\n    error FailedOp(uint256 opIndex, string reason);\\n\\n    /**\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    /**\\n     * Successful result from simulateValidation.\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     */\\n    error ValidationResult(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\\n\\n    /**\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\n     */\\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\\n        AggregatorStakeInfo aggregatorInfo);\\n\\n    /**\\n     * return value of getSenderAddress\\n     */\\n    error SenderAddressResult(address sender);\\n\\n    /**\\n     * return value of simulateHandleOp\\n     */\\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint48 validAfter, uint48 validUntil, bool targetSuccess, bytes targetResult);\\n\\n    //UserOps handled, per aggregator\\n    struct UserOpsPerAggregator {\\n        UserOperation[] userOps;\\n\\n        // aggregator address\\n        IAggregator aggregator;\\n        // aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * no signature aggregator is used.\\n     * if any account requires an aggregator (that is, it returned an aggregator when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\\n\\n    /**\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\n     * @param userOp the user operation to validate.\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external;\\n\\n    /**\\n     * gas and return values during simulation\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\\n     */\\n    struct ReturnInfo {\\n        uint256 preOpGas;\\n        uint256 prefund;\\n        bool sigFailed;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n        bytes paymasterContext;\\n    }\\n\\n    /**\\n     * returned aggregated signature info.\\n     * the aggregator returned by the account, and its current stake.\\n     */\\n    struct AggregatorStakeInfo {\\n        address aggregator;\\n        StakeInfo stakeInfo;\\n    }\\n\\n    /**\\n     * Get counterfactual sender address.\\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n     * this method always revert, and returns the address in SenderAddressResult error\\n     * @param initCode the constructor code to be passed into the UserOperation.\\n     */\\n    function getSenderAddress(bytes memory initCode) external;\\n\\n\\n    /**\\n     * simulate full execution of a UserOperation (including both validation and target execution)\\n     * this method will always revert with \\\"ExecutionResult\\\".\\n     * it performs full validation of the UserOperation, but ignores signature error.\\n     * an optional target address is called after the userop succeeds, and its value is returned\\n     * (before the entire call is reverted)\\n     * Note that in order to collect the the success/failure of the target call, it must be executed\\n     * with trace enabled to track the emitted events.\\n     * @param op the UserOperation to simulate\\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\\n     *        are set to the return from that call.\\n     * @param targetCallData callData to pass to target address\\n     */\\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\\n}\\n\\n\",\"keccak256\":\"0x3a90bf308819ed125fa4202f880999caff8a8686633b8ddb79a30ca240d5b8f8\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/INonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface INonceManager {\\n\\n    /**\\n     * Return the next nonce for this sender.\\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\\n     * But UserOp with different keys can come with arbitrary order.\\n     *\\n     * @param sender the account address\\n     * @param key the high 192 bit of the nonce\\n     * @return nonce a full nonce to pass for next UserOp with this sender.\\n     */\\n    function getNonce(address sender, uint192 key)\\n    external view returns (uint256 nonce);\\n\\n    /**\\n     * Manually increment the nonce of the sender.\\n     * This method is exposed just for completeness..\\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\\n     * as the EntryPoint will update the nonce regardless.\\n     * Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future\\n     * UserOperations will not pay extra for the first transaction with a given key.\\n     */\\n    function incrementNonce(uint192 key) external;\\n}\\n\",\"keccak256\":\"0x509871e6c63663cdcc3eba19920fe84e991f38b289b1377ac3c3a6d9f22d7e12\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when stake or unstake delay are modified\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 unstakeDelaySec\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the entity's deposit\\n     * @param staked true if this entity is staked.\\n     * @param stake actual amount of ether staked for this entity.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 10^15 eth\\n     *    48 bit for full timestamp\\n     *    32 bit allows 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint48 withdrawTime;\\n    }\\n\\n    //API struct used by getStakeInfo and simulateValidation\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /// @return info - full deposit information of given account\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// @return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\",\"keccak256\":\"0xd227b02888cd4ac68daebcdfd992ec00f9fff66fa3b3bb16f656cd582fa3480f\",\"license\":\"GPL-3.0-only\"},\"@account-abstraction/contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c\",\"license\":\"GPL-3.0\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xca2eb23a188f213d914fad982985d07e491dbc9960a387d4469bfce5c48911b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"node_modules/@openzeppelin/contracts/proxy/utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdd7ab1894aa38a7e0b4a74436913db828e303be8b0dda4b064d6630ea2a05644\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x8ddea9f930f26e588ea606f44c90d2623560c908e38614a03a4ca78aea8f9202\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5615339d191e77be7e46319b67856f9355786f705b7b3c4a7237ab70c1864ab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is ERC1967Upgrade {\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0xe3a447af30d1f68b3b8644e5a694a8618259ac5152dce599ba88a3805f9621b0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0fd59f83d16f090c27a8105db0f4ad05b0f5d127f9878b82ebf0ad2bbc4e3f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0x27f9465d84949f059ed37b23c82f4a9fc16c1b8d6fbd69837a0f920875e2af83\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d15d280d1f868f59a8264dc73f7ea8c51f10d78aac864b2f2ad29412d187ff5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return recover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return recover(hash, r, vs);\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x828774372910d18e7337bc31a288d786748af4cd9da80222467e486ed1d569ab\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\",\"license\":\"MIT\"},\"contracts/Wallet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@account-abstraction/contracts/core/BaseAccount.sol\\\";\\nimport \\\"@account-abstraction/contracts/core/Helpers.sol\\\";\\nimport \\\"@account-abstraction/contracts/callback/TokenCallbackHandler.sol\\\";\\n\\ncontract Wallet is\\n    BaseAccount,\\n    TokenCallbackHandler,\\n    Initializable,\\n    UUPSUpgradeable\\n{\\n    using ECDSA for bytes32;\\n\\n    address public immutable walletFactory;\\n    IEntryPoint private immutable _entryPoint;\\n    address[] public owners;\\n\\n    event WalletInitialized(IEntryPoint indexed entryPoint, address[] owners);\\n\\n    modifier _requireFromEntryPointOrFactory() {\\n        require(\\n            msg.sender == address(_entryPoint) || msg.sender == walletFactory,\\n            \\\"only entry point or wallet factory can call\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(IEntryPoint anEntryPoint, address ourWalletFactory) {\\n        _entryPoint = anEntryPoint;\\n        walletFactory = ourWalletFactory;\\n    }\\n\\n    function initialize(address[] memory initialOwners) public initializer {\\n        _initialize(initialOwners);\\n    }\\n\\n    function execute(\\n        address dest,\\n        uint256 value,\\n        bytes calldata func\\n    ) external _requireFromEntryPointOrFactory {\\n        _call(dest, value, func);\\n    }\\n\\n    function executeBatch(\\n        address[] calldata dests,\\n        uint256[] calldata values,\\n        bytes[] calldata funcs\\n    ) external _requireFromEntryPointOrFactory {\\n        require(dests.length == funcs.length, \\\"wrong array lengths\\\");\\n        require(values.length == funcs.length, \\\"wrong values lengths\\\");\\n        for (uint256 i = 0; i < dests.length; i++) {\\n            _call(dests[i], values[i], funcs[i]);\\n        }\\n    }\\n\\n    function _validateSignature(\\n        UserOperation calldata userOp,\\n        bytes32 userOpHash\\n    ) internal view override returns (uint256) {\\n        bytes32 hash = userOpHash.toEthSignedMessageHash();\\n        bytes[] memory signatures = abi.decode(userOp.signature, (bytes[]));\\n\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            if (owners[i] != hash.recover(signatures[i])) {\\n                return SIG_VALIDATION_FAILED;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function _initialize(address[] memory initialOwners) internal {\\n        require(initialOwners.length > 0, \\\"no owners\\\");\\n        owners = initialOwners;\\n        emit WalletInitialized(_entryPoint, initialOwners);\\n    }\\n\\n    function _call(address target, uint256 value, bytes memory data) internal {\\n        (bool success, bytes memory result) = target.call{value: value}(data);\\n        if (!success) {\\n            assembly {\\n                revert(add(result, 32), mload(result))\\n            }\\n        }\\n    }\\n\\n    function encodeSignatures(\\n        bytes[] memory signatures\\n    ) public pure returns (bytes memory) {\\n        return abi.encode(signatures);\\n    }\\n\\n    function entryPoint() public view override returns (IEntryPoint) {\\n        return _entryPoint;\\n    }\\n\\n    function getDeposit() public view returns (uint256) {\\n        return entryPoint().balanceOf(address(this));\\n    }\\n\\n    function addDeposit() public payable {\\n        entryPoint().depositTo{value: msg.value}(address(this));\\n    }\\n\\n    function _authorizeUpgrade(\\n        address\\n    ) internal view override _requireFromEntryPointOrFactory {}\\n\\n    receive() external payable {}\\n}\",\"keccak256\":\"0xdcf04d918089077486190c958f1a526638d4cf8e4dfd23a654b2c0e5d96aadac\",\"license\":\"GPL-3.0\"},\"contracts/WalletFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport {IEntryPoint} from \\\"@account-abstraction/contracts/interfaces/IEntryPoint.sol\\\";\\nimport {Wallet} from \\\"./Wallet.sol\\\";\\nimport {Create2} from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport {ERC1967Proxy} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n\\n\\ncontract WalletFactory {\\n    Wallet public immutable walletImplementation;\\n\\n    constructor(IEntryPoint entryPoint) {\\n        walletImplementation = new Wallet(entryPoint, address(this));\\n    }\\n\\n    function createAccount(\\n        address[] memory owners,\\n        uint256 salt\\n    ) external returns (Wallet) {\\n        address addr = getAddress(owners, salt);\\n        uint256 codeSize = addr.code.length;\\n        if (codeSize > 0) {\\n            return Wallet(payable(addr));\\n        }\\n\\n        bytes memory walletInit = abi.encodeCall(Wallet.initialize, owners);\\n        ERC1967Proxy proxy = new ERC1967Proxy{salt: bytes32(salt)}(\\n            address(walletImplementation),\\n            walletInit\\n        );\\n\\n        return Wallet(payable(address(proxy)));\\n    }\\n\\n    function getAddress(\\n        address[] memory owners,\\n        uint256 salt\\n    ) public view returns (address) {\\n        bytes memory walletInit = abi.encodeCall(Wallet.initialize, owners);\\n        bytes memory proxyConstructor = abi.encode(\\n            address(walletImplementation),\\n            walletInit\\n        );\\n        bytes memory bytecode = abi.encodePacked(\\n            type(ERC1967Proxy).creationCode,\\n            proxyConstructor\\n        );\\n\\n        bytes32 bytecodeHash = keccak256(bytecode);\\n\\n        return Create2.computeAddress(bytes32(salt), bytecodeHash);\\n    }\\n}\",\"keccak256\":\"0x2ed2f48671397b0bd9c28f94b28a5ddd6a094192d9092cecf1b7668a0acf77ee\",\"license\":\"GPL-3.0\"},\"node_modules/@openzeppelin/contracts/proxy/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"node_modules/@openzeppelin/contracts/proxy/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209c1d6383885269d26fe910d4f26757b81e38c01405b225f9e1f0789a051b59e664736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP13 SAR PUSH4 0x83885269 0xD2 PUSH16 0xE910D4F26757B81E38C01405B225F9E1 CREATE PUSH25 0x9A051B59E664736F6C63430008130033000000000000000000 ","sourceMap":"126:7518:25:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;126:7518:25;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209c1d6383885269d26fe910d4f26757b81e38c01405b225f9e1f0789a051b59e664736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP13 SAR PUSH4 0x83885269 0xD2 PUSH16 0xE910D4F26757B81E38C01405B225F9E1 CREATE PUSH25 0x9A051B59E664736F6C63430008130033000000000000000000 ","sourceMap":"126:7518:25:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_verifyCallResult(bool,bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@openzeppelin/contracts/proxy/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"node_modules/@openzeppelin/contracts/proxy/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}